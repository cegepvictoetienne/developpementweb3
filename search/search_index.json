{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Page principale","text":""},{"location":"#cours-de-developpement-web-3-du-cegep-de-victoriaville","title":"Cours de d\u00e9veloppement web 3 du C\u00e9gep de Victoriaville","text":""},{"location":"#presentation-du-professeur","title":"Pr\u00e9sentation du professeur","text":"<p>Nom : \u00c9tienne Rivard</p>"},{"location":"#presentation-du-cours","title":"Pr\u00e9sentation du cours","text":"<ul> <li>420-5A5-VI - D\u00e9veloppement Web 3</li> <li>5h de cours par semaine (2h th\u00e9orie \u2013 3h travaux pratiques \u2013 3h de travail \u00e0 la maison)</li> </ul> <p>Cible de formation :</p> <ul> <li>\u00c0 la fin de ce cours, l'\u00e9l\u00e8ve sera capable d'effectuer le d\u00e9veloppement d\u2019applications Web transactionnelles \u00e0 l'aide de technologies Web modernes.</li> </ul> <p>Les grandes lignes:</p> <ul> <li>Typescript</li> <li>Node.js</li> <li>Mongoose</li> <li>Express</li> <li>Architecture MVC</li> <li>React</li> <li>Progressive Web Apps (PWA)</li> <li>Netlify</li> <li>Plan de cours disponible dans L\u00e9a  </li> </ul>"},{"location":"#horaire-pour-lautomne-2025","title":"Horaire pour l'automne 2025","text":"<p>Voir l'horaire ici</p>"},{"location":"#regles-pour-lutilisation-du-code-emprunte","title":"R\u00e8gles pour l'utilisation du code emprunt\u00e9","text":"<p>Voir le site de la technique pour le code emprunt\u00e9 </p>"},{"location":"#evaluations","title":"\u00c9valuations","text":"\u00c9valuation Pond\u00e9ration \u00c9ch\u00e9ancier Examen 1 \u2013 Microservices (API) 25% Semaine 5-6 Examen 2 - React 25% Semaine 11-12 Projet - Application React 50% Semaines 12 \u00e0 15 (Remise finale \u00e0 la semaine 15)"},{"location":"accessibilite/","title":"Accessibilit\u00e9","text":""},{"location":"accessibilite/#accessibilite-et-le-web","title":"Accessibilit\u00e9 et le Web","text":"<p>Parmis les utilisateurs de votre site Web, il y en aura qui auront des difficult\u00e9s \u00e0 utiliser votre site Web. Il est important de prendre en compte ces utilisateurs et de leur permettre d'utiliser votre site Web.</p>"},{"location":"accessibilite/#rendre-accessible-les-images","title":"Rendre accessible les images","text":"<p>Les images sont un \u00e9l\u00e9ment important d'un site Web. Elles permettent d'illustrer le contenu et de le rendre plus agr\u00e9able \u00e0 lire. Cependant, les images ne sont pas accessibles aux personnes malvoyantes. Il est donc important de rendre les images accessibles.</p>"},{"location":"accessibilite/#ajouter-un-attribut-alt","title":"Ajouter un attribut alt","text":"<p>L'attribut alt permet de d\u00e9crire l'image. Cet attribut est lu par les lecteurs d'\u00e9cran. Il est donc important de d\u00e9crire l'image de mani\u00e8re pr\u00e9cise.  </p> <pre><code>&lt;img src=\"image.jpg\" alt=\"Description de l'image\"&gt;\n</code></pre>"},{"location":"accessibilite/#ajouter-un-attribut-title","title":"Ajouter un attribut title","text":"<p>L'attribut title permet d'ajouter un titre \u00e0 l'image. Ce titre est affich\u00e9 lorsque l'utilisateur passe la souris sur l'image. Il est donc important de d\u00e9crire l'image de mani\u00e8re pr\u00e9cise.  </p> <pre><code>&lt;img src=\"image.jpg\" alt=\"Description de l'image\" title=\"Titre de l'image\"&gt;\n</code></pre>"},{"location":"accessibilite/#bien-structurer-le-contenu","title":"Bien structurer le contenu","text":"<p>Il est important de bien structurer le contenu de votre site Web. Cela permet aux utilisateurs de mieux comprendre le contenu et de mieux naviguer sur votre site Web.</p>"},{"location":"accessibilite/#utiliser-les-balises-de-titres","title":"Utiliser les balises de titres","text":"<p>Les balises de titres permettent de structurer le contenu de votre site Web. Il est important de bien utiliser les balises de titres.  </p> <pre><code>&lt;h1&gt;Titre de niveau 1&lt;/h1&gt;\n&lt;h2&gt;Titre de niveau 2&lt;/h2&gt;\n&lt;h3&gt;Titre de niveau 3&lt;/h3&gt;\n&lt;h4&gt;Titre de niveau 4&lt;/h4&gt;\n&lt;h5&gt;Titre de niveau 5&lt;/h5&gt;\n&lt;h6&gt;Titre de niveau 6&lt;/h6&gt;\n</code></pre>"},{"location":"accessibilite/#utiliser-les-proprietes-aria","title":"Utiliser les propri\u00e9t\u00e9s ARIA","text":"<p>Les propri\u00e9t\u00e9s ARIA permettent d'ajouter des informations suppl\u00e9mentaires sur les \u00e9l\u00e9ments de votre site Web. Ces informations sont lues par les lecteurs d'\u00e9cran. Il est donc important de bien utiliser les propri\u00e9t\u00e9s ARIA.</p>"},{"location":"accessibilite/#ajouter-lattribut-aria-label","title":"Ajouter l'attribut aria-label","text":"<p>L'attribut aria-label permet d'ajouter un label \u00e0 un \u00e9l\u00e9ment. Ce label est lu par les lecteurs d'\u00e9cran. Il est donc important de d\u00e9crire l'\u00e9l\u00e9ment de mani\u00e8re pr\u00e9cise.  </p> <pre><code>&lt;button aria-label=\"Description du bouton\"&gt;Bouton&lt;/button&gt;\n</code></pre>"},{"location":"accessibilite/#ajouter-lattribut-aria-role","title":"Ajouter l'attribut aria-role","text":"<p>L'attribut aria-role permet d'ajouter un r\u00f4le \u00e0 un \u00e9l\u00e9ment. Ce r\u00f4le est lu par les lecteurs d'\u00e9cran. Il est donc important de d\u00e9crire l'\u00e9l\u00e9ment de mani\u00e8re pr\u00e9cise.  </p> <pre><code>&lt;button aria-role=\"button\"&gt;Bouton&lt;/button&gt;\n</code></pre>"},{"location":"accessibilite/#liste-des-roles","title":"Liste des r\u00f4les","text":"<p>Manuel</p> <p>Liste des r\u00f4les ARIA </p>"},{"location":"accessibilite/#ajoute-de-labels-aux-champs-de-formulaires","title":"Ajoute de labels aux champs de formulaires","text":"<p>Les champs de formulaires sont des \u00e9l\u00e9ments importants d'un site Web. Ils permettent aux utilisateurs de saisir des informations. Cependant, les champs de formulaires ne sont pas accessibles aux personnes malvoyantes. Il est donc important de rendre les champs de formulaires accessibles.</p>"},{"location":"accessibilite/#ajouter-un-label","title":"Ajouter un label","text":"<p>L'attribut label permet d'ajouter un label \u00e0 un champ de formulaire. Ce label est lu par les lecteurs d'\u00e9cran. Il est donc important de d\u00e9crire le champ de formulaire de mani\u00e8re pr\u00e9cise.  </p> <pre><code>&lt;label for=\"nom\"&gt;Nom&lt;/label&gt;\n&lt;input type=\"text\" id=\"nom\" name=\"nom\"&gt;\n</code></pre>"},{"location":"accessibilite/#regrouper-les-champs-de-formulaires","title":"Regrouper les champs de formulaires","text":"<p>C'est important de regrouper ensemble les champs de formulaires qui sont li\u00e9s. Cela permet aux utilisateurs de mieux comprendre le formulaire et de mieux naviguer sur votre site Web.</p>"},{"location":"accessibilite/#ajouter-un-fieldset","title":"Ajouter un fieldset","text":"<p>L'\u00e9l\u00e9ment fieldset permet de regrouper ensemble les champs de formulaires qui sont li\u00e9s. Il est important de bien utiliser l'\u00e9l\u00e9ment fieldset.  </p> <pre><code>&lt;fieldset&gt;\n  &lt;legend&gt;Informations personnelles&lt;/legend&gt;\n  &lt;label for=\"nom\"&gt;Nom&lt;/label&gt;\n  &lt;input type=\"text\" id=\"nom\" name=\"nom\"&gt;\n  &lt;label for=\"prenom\"&gt;Pr\u00e9nom&lt;/label&gt;\n  &lt;input type=\"text\" id=\"prenom\" name=\"prenom\"&gt;\n&lt;/fieldset&gt;\n</code></pre>"},{"location":"apropos/","title":"\u00c0 propos","text":""},{"location":"apropos/#a-propos-du-site-web","title":"\u00c0 propos du site Web","text":"<p>Site Web d\u00e9velopp\u00e9 en MarkDown \u00e0 l'aide des outils suivants :  </p> <ul> <li>Material for MKDocs </li> <li>Mermaid </li> <li>Pygments </li> <li>svg to css </li> </ul> <p>Inspirations :  </p> <ul> <li>Projet Crown Clothing V2 </li> </ul> <p>Version originale 2023 par \u00c9tienne Rivard. Bas\u00e9 en partie sur le contenu d\u00e9velopp\u00e9 par Carine Croteau en 2022.  </p> <p>Licences :  </p> <ul> <li>Book by Ralf Schmitzer from Book Icon by Noun Project (CC BY 3.0)  </li> </ul>"},{"location":"authentification/","title":"Authentification","text":""},{"location":"authentification/#authentification","title":"Authentification","text":"<p>L'authentification joue un r\u00f4le crucial dans la s\u00e9curit\u00e9 et la protection des donn\u00e9es des utilisateurs, en v\u00e9rifiant leur identit\u00e9 avant de leur accorder l'acc\u00e8s \u00e0 des fonctionnalit\u00e9s restreintes.  Dans cette le\u00e7on, nous allons utiliser la plateforme populaire Firebase de Google pour g\u00e9rer notre authentification, autant dans l'application React que pour notre API.  </p>"},{"location":"authentification/#installation-dans-react","title":"Installation dans React","text":"<ol> <li> <p>Installer les modules pour Firebase dans React :  </p> console<pre><code>npm install firebase react-firebase-hooks\n</code></pre> </li> <li> <p>Configurer Firebase :  </p> <p>Aller \u00e0 la console de Firebase.  </p> <p>Ajouter un nouveau projet :  </p> <p> Aouter un nouveau projet Firebase </p> <p> Donner un nom au projet </p> <p>Ajouter une application :  </p> <p> Cliquer sur le bouton Web </p> <p> Nommer l'application </p> <p> G\u00e9n\u00e9rer le code JavaScript pour votre application </p> <p>Configurer l'authentification par courriel/mot de passe :  </p> <p> Ajouter l'authentification par utilisateur/mot de passe </p> <p> Activer l'authentification par utilisateur/mot de passe </p> <p>Ajouter un utilisateur :  </p> <p> Ajouter un utilisateur/mot de passe </p> </li> <li> <p>Cr\u00e9er le fichier firebase.ts :  </p> firebase.ts<pre><code>import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithEmailAndPassword, signOut } from 'firebase/auth';\n\nconst firebaseConfig = {\napiKey: '',\nauthDomain: '',\nprojectId: '',\nstorageBucket: '',\nmessagingSenderId: '',\nappId: '',\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\n\nexport const logInWithEmailAndPassword = async (\nemail: string,\npassword: string\n) =&gt; {\ntry {\n    await signInWithEmailAndPassword(auth, email, password);\n} catch (err: any) {\n    console.error(err);\n    alert(err.message);\n}\n};\n</code></pre> </li> <li> <p>Cr\u00e9er une page de login  </p> routes/login.route.tsx<pre><code>/**\n * Bas\u00e9 sur le mod\u00e8le de Material UI \n * https://github.com/mui/material-ui/tree/v5.14.4/docs/data/material/getting-started/templates/sign-in\n **/\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, logInWithEmailAndPassword } from '../firebase';\nimport { useAuthState } from 'react-firebase-hooks/auth';\n\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\n\nfunction Copyright(props: any) {\nreturn (\n    &lt;Typography\n    variant=\"body2\"\n    color=\"text.secondary\"\n    align=\"center\"\n    {...props}\n    &gt;\n    {'Copyright \u00a9 '}\n    Etienne Rivard {new Date().getFullYear()}\n    {'.'}\n    &lt;/Typography&gt;\n);\n}\n\nconst defaultTheme = createTheme();\n\nfunction Login() {\nconst [user, loading] = useAuthState(auth);\nconst navigate = useNavigate();\n\nuseEffect(() =&gt; {\n    if (loading) {\n    // maybe trigger a loading screen\n    return;\n    }\n    if (user) navigate('/');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n}, [user, loading]);\n\nconst handleSubmit = (event: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    logInWithEmailAndPassword(\n    data.get('email') as string,\n    data.get('password') as string\n    );\n};\n\nreturn (\n    &lt;ThemeProvider theme={defaultTheme}&gt;\n    &lt;Grid container component=\"main\" sx={{ height: '87vh', width: '90vw' }}&gt;\n        &lt;CssBaseline /&gt;\n        &lt;Grid\n        item\n        xs={false}\n        sm={4}\n        md={7}\n        sx={{\n            backgroundImage:\n            'url(https://source.unsplash.com/random?wallpapers)',\n            backgroundRepeat: 'no-repeat',\n            backgroundColor: (t) =&gt;\n            t.palette.mode === 'light'\n                ? t.palette.grey[50]\n                : t.palette.grey[900],\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n        }}\n        /&gt;\n        &lt;Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square&gt;\n        &lt;Box\n            sx={{\n            my: 8,\n            mx: 4,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            }}\n        &gt;\n            &lt;Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}&gt;\n            &lt;LockOutlinedIcon /&gt;\n            &lt;/Avatar&gt;\n            &lt;Typography component=\"h1\" variant=\"h5\"&gt;\n            \"S'authentifier \u00e0 X\"\n            &lt;/Typography&gt;\n            &lt;Box\n            component=\"form\"\n            noValidate\n            onSubmit={handleSubmit}\n            sx={{ mt: 1 }}\n            &gt;\n            &lt;TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"courriel\"\n                name=\"email\"\n                autoComplete=\"email\"\n                autoFocus\n            /&gt;\n            &lt;TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"mot de passe\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n            /&gt;\n            &lt;Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n            &gt;\n                S'authentifier\n            &lt;/Button&gt;\n            &lt;Copyright sx={{ mt: 5 }} /&gt;\n            &lt;/Box&gt;\n        &lt;/Box&gt;\n        &lt;/Grid&gt;\n    &lt;/Grid&gt;\n    &lt;/ThemeProvider&gt;\n);\n}\nexport default Login;\n</code></pre> </li> <li> <p>Rediriger vers la page de login si l'utilisateur n'est pas authentifi\u00e9 :  </p> routes/home.route.tsx<pre><code>import { Home } from '../components/home.component';\nimport { useEffect } from 'react';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { auth } from '../firebase';\n\nexport const HomeRoute = () =&gt; {\nconst [user, loading] = useAuthState(auth);\nconst navigate = useNavigate();\n\nuseEffect(() =&gt; {\n    // si loading = true, \u00e7a veut dire que le firebase n'est pas encore pr\u00eat.\n    if (loading) return;\n    // si user est null, l'utilisateur n'est pas authentifi\u00e9\n    if (!user) navigate('/login');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n}, [user, loading]);\n\nreturn &lt;Home /&gt;;\n};\n</code></pre> </li> </ol> <p>CodeSandbox</p> <p>D\u00e9mo - Page Login </p>"},{"location":"authentification/#installation-dans-un-api","title":"Installation dans un API","text":"<p>Firebase peut cr\u00e9er des jetons dans l'application React qui servent \u00e0 valider l'utilisateur dans votre API.  </p> <ol> <li> <p>Installer le module Firebase Admin \u00e0 votre API :  </p> console<pre><code>npm install firebase-admin\n</code></pre> </li> <li> <p>G\u00e9n\u00e9rer firebase.json \u00e0 partir de la console Firebase :  </p> <p> Dans la configuration du projet, aller \u00e0 l'onglet Service Accounts </p> <p> G\u00e9n\u00e9rer une cl\u00e9 </p> <p>Le fichier g\u00e9n\u00e9r\u00e9 donne un acc\u00e8s administratif \u00e0 votre projet. Ne pas le mettre dans votre github! </p> </li> <li> <p>Coder un intergiciel pour prot\u00e9ger vos routes :  </p> authentificationFirebase.ts<pre><code>import admin from 'firebase-admin';\nimport express, { Express, Request, Response, NextFunction } from 'express';\n\nvar serviceAccount = require('../firebase.json');\n\nadmin.initializeApp({\ncredential: admin.credential.cert(serviceAccount),\n});\n\nexport const firebaseAuthentication = async (\nreq: Request,\nres: Response,\nnext: NextFunction\n) =&gt; {\nconst authHeader = req.headers.authorization;\nconsole.log('start firebaseAuthentication');\nif (authHeader) {\n    const idToken = authHeader.split(' ')[1];\n    console.log('idToken:', idToken);\n    admin\n    .auth()\n    .verifyIdToken(idToken)\n    .then(function (decodedToken) {\n        console.log('Next()');\n        next();\n    })\n    .catch(function (error) {\n        console.log('catch Error:', error);\n        const errorMessage = {\n        status: 403,\n        error: error,\n        };\n        res.sendStatus(403).send(errorMessage);\n        res.end();\n    });\n} else {\n    console.log('no header');\n    const errorMessage = {\n    status: 401,\n    error: 'Missing authorization header',\n    };\n    res.sendStatus(401);\n    res.end();\n}\n};      \n</code></pre> </li> <li> <p>Dans votre application React, g\u00e9n\u00e9rer le jeton :  </p> firebase.ts<pre><code>export const getToken = async () =&gt; {\nif (!auth.currentUser) return '';\n\nreturn await auth.currentUser\n    .getIdToken(false)\n    .then(function (idToken) {\n    return idToken;\n    })\n    .catch(function (error) {\n    console.log(error);\n    return null;\n    });\n};\n</code></pre> </li> <li> <p>Dans votre application React, envoyer le jeton dans l'appel de votre API :  </p> api.ts<pre><code>const token = await getToken();\nconst config = {\n    headers: { Authorization: `Bearer ${token}` },\n};\nconst response = await axios\n    .get('/api/embeddings/logs', config)\n    .catch((reason) =&gt; console.log(reason));\n</code></pre> </li> </ol> <p>CodeSandbox</p> <p>D\u00e9mo - API s\u00e9curis\u00e9e </p>"},{"location":"bruno/","title":"Bruno","text":""},{"location":"bruno/#bruno-remplacement-open-source-de-postman","title":"Bruno - Remplacement open source de Postman","text":"<p>Bruno :  </p> <ul> <li>est libre de droit  </li> <li>utilise des formats standards de donn\u00e9es  </li> <li>fonctionne 100% hors ligne  </li> <li>compatible avec git  </li> </ul>"},{"location":"bruno/#installation-de-bruno","title":"Installation de Bruno","text":"<p>T\u00e9l\u00e9chargez Bruno ici :  Page de t\u00e9l\u00e9chargement </p>"},{"location":"bruno/#utilisation-de-bruno","title":"Utilisation de Bruno","text":"<p>1- Cr\u00e9er un dossier <code>bruno</code> \u00e0 la racine de votre projet. 2- Ajouter tous les appels \u00e0 votre API dans le dossier <code>bruno</code>. (Soit par l'IDE, soit en cr\u00e9ant des fichiers <code>.bru</code>)  </p>"},{"location":"bruno/#exemple-de-fichier-bru-pour-un-get","title":"Exemple de fichier <code>.bru</code> pour un GET","text":"bruno/hotel/Get All.bru<pre><code>meta {\n  name: Get all Reservations\n  type: http\n  seq: 2\n}\n\nget {\n  url: http://localhost:3000/api/reservations/all\n  body: none\n  auth: none\n}\n</code></pre>"},{"location":"bruno/#exemple-de-fichier-bru-pour-un-post","title":"Exemple de fichier <code>.bru</code> pour un POST","text":"bruno/hotel/Ajout R\u00e9servation.bru<pre><code>meta {\n  name: Ajout R\u00e9servation\n  type: http\n  seq: 1\n}\n\npost {\n  url: http://localhost:3000/api/reservations/add\n  body: json\n  auth: none\n}\n\nbody:json {\n  {\n    \"reservation\": \n      {\n        \"id\": \"9\",\n        \"nom\": \"Kamala Harris\",\n        \"courriel\": \"kamala@profinfo.ca\",\n        \"dateDebut\": \"2025-01-06\",\n        \"dateFin\": \"2025-01-08\",\n        \"typeChambre\": \"Deluxe\",\n        \"prixParNuit\": 150,\n        \"created\": \"2025-08-11\"\n      }\n  }\n}\n</code></pre>"},{"location":"codesandbox/","title":"CodeSandbox","text":""},{"location":"codesandbox/#tous-les-demos-codesandbox-references-dans-le-cours","title":"Tous les d\u00e9mos CodeSandbox r\u00e9f\u00e9renc\u00e9s dans le cours","text":""},{"location":"codesandbox/#generateur-express","title":"G\u00e9n\u00e9rateur Express","text":"<p>D\u00e9mo - API Express </p>"},{"location":"codesandbox/#introduction-a-react","title":"Introduction \u00e0 React","text":"<p>D\u00e9mo - Personnage - Base D\u00e9mo - Personnage - Props D\u00e9mo - Personnage - useState D\u00e9mo - Personnage - useEffect </p>"},{"location":"codesandbox/#styles-react-et-mui","title":"Styles : React et MUI","text":"<p>D\u00e9mo - Material UI </p>"},{"location":"codesandbox/#styles-react-tailwindcss","title":"Styles : React - TailwindCSS","text":"<p>D\u00e9mo - TailwindCSS ## Router - useParams - useContext et API D\u00e9mo - monrouteur D\u00e9mo - Chapeaux en folie </p>"},{"location":"codesandbox/#internationalisation","title":"Internationalisation","text":"<p>D\u00e9mo - Intl </p>"},{"location":"codesandbox/#authentification","title":"Authentification","text":"<p>D\u00e9mo - Page Login D\u00e9mo - API s\u00e9curis\u00e9e </p>"},{"location":"documentation/","title":"Rendre la documentation disponible pour l'api","text":""},{"location":"documentation/#rendre-disponible-la-documentation-de-linterface-logicielle-avec-express-et-netlify","title":"Rendre disponible la documentation de l'interface logicielle avec express et netlify","text":""},{"location":"documentation/#documentation-de-linterface-logicielle","title":"Documentation de l'interface logicielle","text":"<ol> <li> <p>Utiliser SwaggerEditor pour cr\u00e9er la documentation de l'interface logicielle.  </p> <p></p> </li> <li> <p>Exporter votre documentation en format yaml.  </p> <p></p> </li> <li> <p>Convertir le fichier yaml en html avec redoc-cli.  </p> console<pre><code>npx @redocly/cli build-docs -o index.html api.yaml\n</code></pre> </li> <li> <p>Copier le index.html dans le dossier 'src' de votre projet. </p> </li> <li> <p>Copier \u00e9galement le index.html dans le dossier 'functions' de votre projet, pour le rendre disponible sur le serveur netlify.</p> </li> <li> <p>Ajouter le code suivant dans le fichier 'server.ts' pour rendre disponible la documentation dans la route '/api-docs.  </p> <pre><code>// rend disponible la documentation de l'interface logicielle\napp.get('/api-docs/', async (req, res) =&gt; {\n    res.set('Content-Security-Policy', 'script-src blob:');\n    res.set('Content-Security-Policy', 'worker-src blob:');\n    res.sendFile(path.join(__dirname, 'index.html'));\n});\n\n// redirige vers api-docs\napp.get('/', (req, res) =&gt; {\n    res.redirect('/api-docs');\n});\n</code></pre> </li> <li> <p>Mettre \u00e0 jour le fichier 'netlify.toml' pour rendre disponible la documentation sur le serveur netlify.  </p> <pre><code>[build]\ncommand = \"npm install &amp;&amp; npm run build\"\nfunctions = \"functions\"\n[functions]\nexternal_node_modules = [\"express\"]\n# Ajout de la documentation de l'interface logicielle\nincluded_files=[\"./functions/index.html\"]\nnode_bundler = \"esbuild\"\n[[redirects]]\nforce = true\nfrom = \"/*\"\nstatus = 200\nto = \"/.netlify/functions/api/:splat\"\n</code></pre> </li> <li> <p>Pousser les changements dans le d\u00e9p\u00f4t git et v\u00e9rifier que la documentation est disponible sur le serveur netlify.  </p> </li> </ol>"},{"location":"exercice10_context/","title":"Exercice 10 - Contexte et API","text":""},{"location":"exercice10_context/#exercice-usecontext-et-api","title":"Exercice - useContext et API","text":"<p>Faire une boutique en ligne qui affiche une liste de bi\u00e8res et la gestion d\u2019un panier (ajout et retrait de bi\u00e8res dans le panier)  </p> <p>L\u2019API : https://bieres.profinfo.ca/api/bieres </p>"},{"location":"exercice11_internationalisation/","title":"Exercice 11 - Internationalisation","text":""},{"location":"exercice11_internationalisation/#exercice-internationalisation","title":"Exercice - Internationalisation","text":"<ul> <li>Cr\u00e9er une application React</li> <li>Afficher une facture avec les \u00e9l\u00e9ments suivants :<ul> <li>Date et heure de la transaction</li> <li>Au moins 3 items avec leurs prix unitaires, la quantit\u00e9 et le prix total</li> <li>Un sous-total</li> <li>Le calcul des taxes en indiquant entre parenth\u00e8ses le pourcentage de la taxe</li> </ul> </li> <li>Il doit y avoir un s\u00e9lecteur de langue (Anglais et Fran\u00e7ais)</li> <li>Il doit y avoir un contexte de langue</li> <li>Tout doit \u00eatre traduit et localis\u00e9 - FR et EN.</li> </ul>"},{"location":"exercice12_authentification/","title":"Exercice 12 - Authentification","text":""},{"location":"exercice12_authentification/#exercice-authentification","title":"Exercice - Authentification","text":"<ul> <li>Faire une mini-application React avec une page de login et un appel \u00e0 votre API du projet int\u00e9grateur.  </li> <li>S\u00e9curiser la mini-application avec Firebase   </li> <li>S\u00e9curiser votre API avec Firebase  </li> <li>Faire un appel \u00e0 votre API avec un jeton  </li> </ul>"},{"location":"exercice13_pwa/","title":"Exercice 13 - PWA","text":""},{"location":"exercice13_pwa/#exercice-pwa","title":"Exercice PWA","text":"<ul> <li>Trouver 2 progressive Web apps par personne.\u00a0  </li> <li>Vous ne pouvez PAS inscrire une PWA qui est d\u00e9j\u00e0 pr\u00e9sente dans le fichier collaboratif!  </li> <li>Effectuez un Audit Lighthouse et copiez le r\u00e9sultat dans le fichier collaboratif  </li> </ul>"},{"location":"exercice14_netlify/","title":"Exercice 14 - Netlify","text":""},{"location":"exercice14_netlify/#exercice-netlify","title":"Exercice - Netlify","text":"<ul> <li>Cr\u00e9ez-vous un compte Netlify.  </li> <li>D\u00e9ployez l'API de votre projet int\u00e9grateur.  </li> </ul>"},{"location":"exercice1_lodash/","title":"Exercice 1 - lodash","text":""},{"location":"exercice1_lodash/#exercice-avec-lodash","title":"Exercice avec Lodash","text":"<ul> <li>Cr\u00e9er un dossier exercice_lodash  </li> <li>Initialiser TypeScript  </li> <li>Initialiser Node  </li> <li>Installer nodemon, concurrently et lodash  </li> <li>Cr\u00e9er un script dans package.json pour compiler le TypeScript et ex\u00e9cuter le code avec nodemon en paral\u00e8le  </li> <li>Prendre le code suivant et r\u00e9soudre les items avec lodash  </li> </ul> exercice_lodash.ts<pre><code>import _ from 'lodash';\n\ntype Utilisateur = {\n  nom: string;\n  age: number;\n  actif: boolean;\n};\n\nlet utilisateurs: Utilisateur[] = [\n  { nom: 'Roy', age: 30, actif: true },\n  { nom: 'Moses', age: 31, actif: true },\n  { nom: 'Jen', age: 31, actif: false },\n  { nom: 'Douglas', age: 45, actif: true },\n  { nom: 'Denholm', age: 40, actif: false },\n  { nom: 'Richmond', age: 40, actif: true },\n];\n\n// Avec Lodash, cr\u00e9er un tableau qui ne prend que les utilisateurs actifs\nconst utilisateursActifs = '\u00c0 faire';\nconsole.log('Liste des utilisateurs actifs :');\nconsole.log(utilisateursActifs);\n\n// Avec Lodash, cr\u00e9er un tableau qui contient seulement les utilisateurs de 40 ans et plus\nconst utilisateurs40plus = '\u00c0 faire';\nconsole.log('Liste des utilisateurs de 40 ans et plus :');\nconsole.log(utilisateurs40plus);\n\n// Avec Lodash, regrouper les utilisateurs par leur age\nconst utilisateursParAge = '\u00c0 faire';\nconsole.log('Regrouper les utilisateurs par leur \u00e2ge :');\nconsole.log(utilisateursParAge);\n\n// Avec Lodash, extrait l'utilisateur le plus vieux\nconst utilisateursPlusVieux = '\u00c0 faire';\nconsole.log('Le plus vieux :');\nconsole.log(utilisateursPlusVieux);\n\n// Avec Lodash, d\u00e9terminer l'age moyen\nconst ageMoyen = '\u00c0 faire';\nconsole.log('Age moyen :');\nconsole.log(ageMoyen);\n\n// Avec Lodash, remplacer les caract\u00e8res avec accents et c\u00e9dilles par leur \u00e9quivalent sans accent. Ex : \u00e9 -&gt; e, \u00e7 =&gt; c\nconst phraseAvecAccents = \"\u00c7a \u00e9t\u00e9 un mois d'ao\u00fbt tr\u00e8s temp\u00e9r\u00e9\";\nconst phraseSansAccents = '\u00c0 faire';\nconsole.log(phraseSansAccents);\n</code></pre>"},{"location":"exercice2_express_avec_modele/","title":"Exercice 2 - Express avec mod\u00e8le","text":""},{"location":"exercice2_express_avec_modele/#exercice-express-avec-modele","title":"Exercice - Express avec mod\u00e8le","text":"<ul> <li>Faire un API pour une chenil qui doit faire l\u2019inventaire de ses r\u00e9sidents (chats et chiens)  </li> <li>GET /animal pour la liste de tous les animaux  </li> <li>GET /animal/:id pour extraire un animal par son ID  </li> <li>POST /animal pour ajouter un animal dans la liste  </li> <li>DELETE /animal/:id pour supprimer un animal de la liste  </li> <li>Un animal a les attributs suivants :  <ul> <li>ID  </li> <li>Nom  </li> <li>Type = Chat ou Chien  </li> <li>Age  </li> <li>Propri\u00e9taire  </li> </ul> </li> <li>Bien s\u00fbr, c\u2019est en TypeScript, donc un type Animal doit \u00eatre cr\u00e9\u00e9!  </li> <li>Faire l\u2019API des animaux avec le mod\u00e8le g\u00e9n\u00e9r\u00e9 (express-generator-typescript).</li> <li>Assurez-vous de valider le nom, la race et le propri\u00e9taire de l\u2019animal.</li> <li>Ajouter le num\u00e9ro de t\u00e9l\u00e9phone du propri\u00e9taire et valider que le num\u00e9ro est bien sous la forme (999) 999-9999</li> <li>Testez les m\u00e9thodes en utilisant Bruno</li> </ul>"},{"location":"exercice3_intergiciels_express/","title":"Exercice 3 - Intergiciels Express et tests API","text":""},{"location":"exercice3_intergiciels_express/#exercice-express-et-intergiciels","title":"Exercice - Express et intergiciels","text":"<ul> <li>Faire un intergiciel pour garder l\u2019historique des appels \u00e0 l'API cr\u00e9\u00e9 au cours pr\u00e9c\u00e9dent.</li> <li> <p>Pas besoin de couche de persistance. Tout peut \u00eatre fait en m\u00e9moire!  </p> </li> <li> <p>Faire un intergiciel qui valide si l'utilisateur est autoris\u00e9. L'utilisateur autoris\u00e9 est celui qui envoi le bon mot de passe dans l'ent\u00eate de la requ\u00eate.  Retourner un 403 si l'ent\u00eate ne contient pas le bon mot de passe.  </p> </li> </ul>"},{"location":"exercice3_intergiciels_express/#exercice-tests-api","title":"Exercice - Tests API","text":"<ul> <li>Tester l'API cr\u00e9\u00e9 au cours pr\u00e9c\u00e9dent avec VITest et Supertest.</li> </ul>"},{"location":"exercice4_mongodb/","title":"Exercice 4 - Mongo DB","text":""},{"location":"exercice4_mongodb/#exercice-mongo-db","title":"Exercice - Mongo DB","text":"<p>Mod\u00e8le de donn\u00e9es : persons.json </p> <ul> <li>Partez du mod\u00e8le persons.json.  </li> <li>Cr\u00e9er une application node pour tester vos connaissances avec le client MongoDB :  </li> <li>Cr\u00e9er des fonctions qui :  <ul> <li>permet de r\u00e9cup\u00e9rer les informations d\u2019une seule personne \u00e0 partir de son identifiant  </li> <li>permet de rechercher l\u2019information dans les attributs nom, pr\u00e9nom et courriel  </li> <li>permet d\u2019obtenir le nombre de personnes par couleur des yeux  </li> <li>permet d\u2019obtenir la balance moyenne des personnes entre x et y ann\u00e9es   </li> </ul> </li> </ul> <p>Ex\u00e9cutez ces fonctions en mode console.  </p>"},{"location":"exercice5_mongoose/","title":"Exercice 5 - Mongoose","text":""},{"location":"exercice5_mongoose/#exercice-mongoose","title":"Exercice - Mongoose","text":"<p>Mod\u00e8le de donn\u00e9es : persons.json </p> <ul> <li>Exercice avec Mongoose.</li> <li>Partez du mod\u00e8le persons.json.  </li> <li>Cr\u00e9ez le sch\u00e9ma \u00e0 partir du mod\u00e8le persons.json.  </li> </ul>"},{"location":"exercice6_mongoose/","title":"Exercice 6 - Mongoose","text":""},{"location":"exercice6_mongoose/#exercice-mongoose","title":"Exercice - Mongoose","text":"<p>Mod\u00e8le de donn\u00e9es : persons.json </p> <ul> <li>Partez du sch\u00e9ma cr\u00e9\u00e9 \u00e0 l'exercice 5 </li> <li>Cr\u00e9ez un service web int\u00e9grant les 4 m\u00e9thodes de base (CRUD) avec l\u2019ensemble des attributs.   </li> <li>Assurez-vous que les donn\u00e9es sont ad\u00e9quatement stock\u00e9es (avec les bons types) et que la structure est conforme.   </li> <li>Attributs obligatoires :   <ul> <li>name (first et last)  </li> <li>age  </li> <li>isActive  </li> <li>registered  </li> <li>Balance  </li> </ul> </li> <li>Vous devez aussi valider les champs facultatifs.</li> <li>Ajoutez d\u2019autres routes :  <ul> <li>/persons/? : permet de r\u00e9cup\u00e9rer les informations d\u2019une seule personne \u00e0 partir de son identifiant  </li> <li>/persons/q/? : permet de rechercher l\u2019information dans les attributs nom, pr\u00e9nom et courriel  </li> <li>/persons/stats/eyeColor : permet d\u2019obtenir le nombre de personnes par couleur des yeux  </li> <li>/persons/stats/balance/?/? : permet d\u2019obtenir la balance moyenne des personnes entre x et y ann\u00e9es   </li> </ul> </li> </ul>"},{"location":"exercice7_express_jwt/","title":"Exercice 7 - Express et JWT","text":""},{"location":"exercice7_express_jwt/#exercice-express-et-jwt","title":"Exercice - Express et JWT","text":"<ul> <li>Prendre l'API de l'exercice 6 :  <ul> <li>Ajouter une gestion d'utilisateurs  </li> <li>Prot\u00e9ger l'API par des jetons JWT  </li> </ul> </li> </ul>"},{"location":"exercice8_react/","title":"Exercice 8 - React","text":""},{"location":"exercice8_react/#exercice-react","title":"Exercice - React","text":"<ul> <li>Faire un validateur de mot de passe :  <ul> <li>Avoir une composante pour l\u2019affichage de la validation et la gestion du rouge/vert.  </li> <li>Utiliser useState pour g\u00e9rer les valeurs.  </li> <li>Utiliser une interface pour les props de la composante.  </li> </ul> </li> </ul> Aspect visuel de l'exercice 9"},{"location":"exercice9_react_styles/","title":"Exercice 9 - React et styles","text":""},{"location":"exercice9_react_styles/#exercice-react-et-les-styles","title":"Exercice - React et les styles","text":"<ul> <li>Faire un carnet d\u2019adresses avec Material UI et TailwindCSS (essayer les deux dans des projets diff\u00e9rents)  </li> <li> <p>Afficher sous forme de carte les informations suivantes :  </p> <ul> <li>Pr\u00e9nom  </li> <li>Nom  </li> <li>Adresse  </li> <li>Num\u00e9ro de t\u00e9l\u00e9phone  </li> <li>Date de naissance  </li> <li>Courriel  </li> </ul> </li> <li> <p>Faire un th\u00e8me personnalis\u00e9 avec Material UI.  </p> </li> </ul>"},{"location":"exercice_prep_exam/","title":"Exercice Pr\u00e9paration Examen","text":""},{"location":"exercice_prep_exam/#jeu-de-pendu-avec-react-et-typescript","title":"Jeu de Pendu avec React et TypeScript","text":"<p>Objectif : Cr\u00e9er une version simplifi\u00e9e du jeu de pendu o\u00f9 les joueurs doivent deviner un mot en proposant des lettres.</p>"},{"location":"exercice_prep_exam/#fonctionnalites-suggerees","title":"Fonctionnalit\u00e9s sugg\u00e9r\u00e9es :","text":"<ul> <li>S\u00e9lectionnez un mot al\u00e9atoire \u00e0 deviner au d\u00e9but du jeu. (utiliser https://trouve-mot.fr/api/random)  </li> <li>Affichez des tirets bas pour chaque lettre du mot \u00e0 deviner.</li> <li>Permettez aux joueurs de proposer des lettres.</li> <li>Affichez les lettres correctes dans le mot \u00e0 mesure qu'elles sont devin\u00e9es.</li> <li>Limitez le nombre d'erreurs autoris\u00e9es (par exemple, 6 erreurs pour un dessin de pendu complet).</li> <li>Affichez le dessin du pendu en fonction du nombre d'erreurs.</li> <li>Affichez un message de victoire si le joueur devine le mot, et un message de d\u00e9faite s'il atteint le nombre maximum d'erreurs.</li> </ul>"},{"location":"exercice_prep_exam/#etapes-suggerees","title":"\u00c9tapes sugg\u00e9r\u00e9es :","text":"<ol> <li>Cr\u00e9ez un composant WordToGuess pour afficher le mot \u00e0 deviner.</li> <li>Cr\u00e9ez un composant LetterInput pour permettre aux joueurs de proposer des lettres.</li> <li>G\u00e9rez l'\u00e9tat du jeu \u00e0 l'aide de React Hooks (useState, useEffect).</li> <li>Utiliser une API pour s\u00e9lectionner un mot al\u00e9atoire.</li> <li>Afficher les lettres correctes devin\u00e9es.</li> <li>G\u00e9rez les erreurs et le dessin du pendu en fonction du nombre d'erreurs.</li> <li>Ajoutez des messages de victoire et de d\u00e9faite.</li> </ol>"},{"location":"exercice_prep_exam/#exigences-techniques","title":"Exigences techniques :","text":"<ul> <li>Utilisez TypeScript pour d\u00e9finir les types des donn\u00e9es.</li> <li>Utilisez des composants fonctionnels et des hooks pour g\u00e9rer l'\u00e9tat.</li> <li>Utilisez des styles CSS pour rendre le jeu plus attrayant.</li> </ul>"},{"location":"exercice_prep_exam/#css-et-html-de-depart","title":"CSS et HTML de d\u00e9part :","text":"<pre><code>body {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  margin: 0;\n  background-color: #f0f0f0;\n}\n\n.hangman {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.gallows {\n  width: 200px;\n  height: 300px;\n  background-color: #931f1d;\n  margin-bottom: 20px;\n}\n\n.head {\n  width: 60px;\n  height: 60px;\n  background-color: #8a9b68; /* Gold */\n  border-radius: 50%;\n  position: relative;\n  top: 20px;\n  left: 70px;\n}\n\n.body {\n  width: 10px;\n  height: 100px;\n  background-color: #8a9b68;\n  position: relative;\n  top: 20px;\n  left: 95px;\n}\n\n.left-arm {\n  width: 80px;\n  height: 10px;\n  background-color: #8a9b68;\n  position: relative;\n  top: -50px;\n  left: 34px;\n  transform: rotate(-45deg);\n}\n\n.right-arm {\n  width: 80px;\n  height: 10px;\n  background-color: #8a9b68;\n  position: relative;\n  top: -58px;\n  left: 88px;\n  transform: rotate(45deg);\n}\n\n.left-leg {\n  width: 80px;\n  height: 10px;\n  background-color: #8a9b68;\n  position: relative;\n  top: 18px;\n  left: 34px;\n}\n\n.right-leg {\n  width: 80px;\n  height: 10px;\n  background-color: #8a9b68;\n  position: relative;\n  top: 10px;\n  left: 88px;\n}\n\n.left-leg {\n  transform: rotate(-45deg);\n}\n\n.right-leg {\n  transform: rotate(45deg);\n}\n</code></pre> <pre><code>&lt;div class=\"hangman\"&gt;\n      &lt;div class=\"gallows\"&gt;\n        &lt;div class=\"head\"&gt;&lt;/div&gt;\n        &lt;div class=\"body\"&gt;&lt;/div&gt;\n        &lt;div class=\"left-arm\"&gt;&lt;/div&gt;\n        &lt;div class=\"right-arm\"&gt;&lt;/div&gt;\n        &lt;div class=\"left-leg\"&gt;&lt;/div&gt;\n        &lt;div class=\"right-leg\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre> <p>Bonne cr\u00e9ation de jeu!</p>"},{"location":"express_jwt/","title":"Express et JWT","text":""},{"location":"express_jwt/#express-et-jwt","title":"Express et JWT","text":"<p>JWT (JSON Web Token) permet d\u2019authentifier un utilisateur lors de chaque appel d'un point d'interface logicielle.  </p> <ul> <li>Le jeton est g\u00e9n\u00e9r\u00e9 par le serveur, qui s\u2019assure que l\u2019utilisateur est bien celui qu\u2019il pr\u00e9tend.  </li> <li>Le jeton est envoy\u00e9 au client et ce dernier le conserve dans un t\u00e9moin pour l\u2019utiliser \u00e0 chaque appel d'un point d'interface logicielle.  </li> <li>Un intergiciel du c\u00f4t\u00e9 du serveur valide chaque appel d'un point d'interface logicielle en v\u00e9rifiant le jeton.  </li> <li>Si le jeton n\u2019est pas valide, le point d'interface logicielle ne retourne pas de donn\u00e9es.  </li> </ul> <p>Manuel</p> <p>Wikipedia - Article sur JWT </p>"},{"location":"express_jwt/#installer-le-module-pour-creer-et-valider-les-jetons","title":"Installer le module pour cr\u00e9er et valider les jetons","text":"console<pre><code>npm install jsonwebtoken @types/jsonwebtoken\n</code></pre>"},{"location":"express_jwt/#la-variable-denvironnement-dans-dev","title":"La variable d'environnement dans dev","text":"config/.env.development<pre><code>## Environment ##\nNODE_ENV=development\n\n\n## Server ##\nPORT=3000\nHOST=localhost\n\n## JWT ##\n\nJWTSECRET = \"7ds8f97ds897f89sd7fsd87f89ds789f7d9s\"\n\n## Setup jet-logger ##\nJET_LOGGER_MODE=CONSOLE\nJET_LOGGER_FILEPATH=jet-logger.log\nJET_LOGGER_TIMESTAMP=TRUE\nJET_LOGGER_FORMAT=LINE\n</code></pre>"},{"location":"express_jwt/#exposer-la-variable-dans-env","title":"Exposer la variable dans ENV","text":"src/common/constants/ENV.ts<pre><code>import jetEnv, { num, str } from 'jet-env';\nimport { isEnumVal } from 'jet-validators';\n\nimport { NodeEnvs } from '.';\n\n/******************************************************************************\n                                 Setup\n******************************************************************************/\n\nconst ENV = jetEnv({\n  NodeEnv: isEnumVal(NodeEnvs),\n  Port: num,\n  Jwtsecret: str,\n});\n\n/******************************************************************************\n                            Export default\n******************************************************************************/\n\nexport default ENV;\n</code></pre>"},{"location":"express_jwt/#passer-a-es2022","title":"Passer \u00e0 ES2022","text":"/tsconfig.json<pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"CommonJS\",\n    \"lib\": [\"ES2022\"],\n    \"strict\": true,\n    \"baseUrl\": \"./\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"paths\": {\n      \"@src/*\": [\"src/*\"]\n    },\n    \"useUnknownInCatchVariables\": false,\n    \"types\": [\"vitest/globals\"]\n  },\n  \"ts-node\": {\n    \"swc\": true,\n    \"require\": [\"tsconfig-paths/register\", \"./config.ts\"]\n  },\n  \"include\": [\n    \"src/**/*.ts\",\n    \"tests/**/*.ts\",\n    \"config.ts\",\n    \"scripts\",\n    \"eslint.config.ts\",\n    \"vitest.config.mts\"\n  ],\n  \"exclude\": [\"src/public/*\"]\n}\n</code></pre>"},{"location":"express_jwt/#le-modele-user-ajouter-userlogin","title":"Le mod\u00e8le User (Ajouter UserLogin)","text":"src/models/User.ts<pre><code>import { isString } from 'jet-validators';\nimport { parseObject, TParseOnError } from 'jet-validators/utils';\n\nimport { isRelationalKey, transIsDate } from '@src/common/util/validators';\nimport { IModel } from './common/types';\n\n/******************************************************************************\n                                 Constants\n******************************************************************************/\n\nconst DEFAULT_USER_VALS = (): IUser =&gt; ({\n  id: -1,\n  name: '',\n  created: new Date(),\n  password: '',\n  email: '',\n});\n\n/******************************************************************************\n                                  Types\n******************************************************************************/\n\nexport interface IUser extends IModel {\n  name: string;\n  email: string;\n  password: string;\n}\n\nexport interface IUserLogin {\n  email: string;\n  password: string;\n}\n\n/******************************************************************************\n                                  Setup\n******************************************************************************/\n\n// Initialize the \"parseUser\" function\nconst parseUser = parseObject&lt;IUser&gt;({\n  id: isRelationalKey,\n  name: isString,\n  email: isString,\n  password: isString,\n  created: transIsDate,\n});\n\n// Initialize the \"parseUserLogin\" function\nconst parseUserLogin = parseObject&lt;IUserLogin&gt;({\n  email: isString,\n  password: isString,\n});\n\n/******************************************************************************\n                                 Functions\n******************************************************************************/\n\n/**\n * New user object.\n */\nfunction __new__(user?: Partial&lt;IUser&gt;): IUser {\n  const retVal = { ...DEFAULT_USER_VALS(), ...user };\n  return parseUser(retVal, (errors) =&gt; {\n    throw new Error('Setup new user failed ' + JSON.stringify(errors, null, 2));\n  });\n}\n\n/**\n * Check is a user object. For the route validation.\n */\nfunction test(arg: unknown, errCb?: TParseOnError): arg is IUser {\n  return !!parseUser(arg, errCb);\n}\n\n/**\n * Check is a user login object. For the route validation.\n */\nfunction testlogin(arg: unknown, errCb?: TParseOnError): arg is IUserLogin {\n  return !!parseUserLogin(arg, errCb);\n}\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default {\n  new: __new__,\n  test,\n  testlogin,\n} as const;\n</code></pre>"},{"location":"express_jwt/#le-service-de-generation-de-jetons","title":"Le service de g\u00e9n\u00e9ration de jetons","text":"src/services/JetonService.ts<pre><code>// **** Variables **** //\n\nimport { IUserLogin } from '@src/models/User';\nimport UserService from './UserService';\nimport jwt from 'jsonwebtoken';\nimport ENV from '@src/common/constants/ENV';\n\nexport const UTILISATEUR_NOT_FOUND_ERR = 'Utilisateur non trouv\u00e9';\n\n// **** Functions **** //\n\n/**\n * G\u00e9n\u00e9rer un jeton pour un utilisateur\n *\n * @param {IUserLogin} utilisateur - L'utilisateur demandant le jeton\n * @returns {Promise} - Le jeton sign\u00e9\n */\nasync function generateToken(utilisateur: IUserLogin): Promise&lt;string&gt; {\n  const utilisateurBD = (await UserService.getAll()).filter(\n    (user) =&gt; user.email === utilisateur.email,\n  )[0];\n  if (utilisateurBD &amp;&amp; utilisateurBD.password === utilisateur.password) {\n    return jwt.sign(utilisateur.email, ENV.Jwtsecret as string);\n  } else {\n    return '';\n  }\n}\n\n// **** Export default **** //\nexport default {\n  generateToken,\n} as const;\n</code></pre>"},{"location":"express_jwt/#le-chemin-pour-les-jetons","title":"Le chemin pour les jetons","text":"src/common/constants/Paths.ts<pre><code>export default {\n  Base: '/api',\n  GenerateToken: {\n    Base: '/generatetoken',\n    Get: '/',\n  },\n  Users: {\n    Base: '/users',\n    Get: '/all',\n    Add: '/add',\n    Update: '/update',\n    Delete: '/delete/:id',\n  },\n} as const;\n</code></pre>"},{"location":"express_jwt/#la-route","title":"La route","text":"src/routes/JetonRoutes.ts<pre><code>import JetonService from '@src/services/JetonService';\nimport User from '@src/models/User';\nimport { IReq, IRes } from './common/types';\nimport { parseReq } from './common/util';\n// **** Functions **** //\n\n/******************************************************************************\n                                Constants\n******************************************************************************/\n\nconst Validators = {\n  generatetoken: parseReq({ userLogin: User.testlogin }),\n} as const;\n\n/**\n * G\u00e9n\u00e9rer un jeton.\n *\n * @param {IReq} req - La requ\u00eate au serveur\n * @param {IRes} res - La r\u00e9ponse du serveur\n */\nasync function generateToken(req: IReq, res: IRes) {\n  const { userLogin } = Validators.generatetoken(req.body);\n  const token = await JetonService.generateToken(userLogin);\n  return res.send({ token: token });\n}\n\n// **** Export default **** //\n\nexport default {\n  generateToken,\n} as const;\n</code></pre>"},{"location":"express_jwt/#le-router","title":"Le Router","text":"src/routes/index.ts<pre><code>import { Router } from 'express';\n\nimport Paths from '@src/common/constants/Paths';\nimport UserRoutes from './UserRoutes';\nimport JetonRoutes from './JetonRoutes';\n\n/******************************************************************************\n                                Setup\n******************************************************************************/\n\nconst apiRouter = Router();\n\n// Init token router\nconst tokenRouter = Router();\n\n// Generate Token\ntokenRouter.get(Paths.GenerateToken.Get, JetonRoutes.generateToken);\n\n// ** Add tokenRouter ** //\napiRouter.use(Paths.GenerateToken.Base, tokenRouter);\n\n// Init router\nconst userRouter = Router();\n\n// Get all users\nuserRouter.get(Paths.Users.Get, UserRoutes.getAll);\nuserRouter.post(Paths.Users.Add, UserRoutes.add);\nuserRouter.put(Paths.Users.Update, UserRoutes.update);\nuserRouter.delete(Paths.Users.Delete, UserRoutes.delete);\n\n// Add UserRouter\napiRouter.use(Paths.Users.Base, userRouter);\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default apiRouter;\n</code></pre>"},{"location":"express_jwt/#lintergiciel-pour-valider-les-jetons","title":"L'intergiciel pour valider les jetons","text":"src/services/authenticateToken.ts<pre><code>import jwt from 'jsonwebtoken';\nimport { Response, Request, NextFunction } from 'express';\nimport HttpStatusCodes from '@src/common/constants/HttpStatusCodes';\nimport ENV from '@src/common/constants/ENV';\n/**\n * Intergiciel pour authentifier le jeton de l'utilisateur\n *\n * @param {Request} req - La requ\u00eate au serveur\n * @param {Response} res - La r\u00e9ponse du serveur\n * @param {NextFunction} next - La fonction a appeler pour continuer le processus.\n */\nfunction authenticateToken(req: Request, res: Response, next: NextFunction) {\n  // Ne pas v\u00e9rifier le token si l'url est celui de generatetoken\n  const lastPartOfUrl = req.url.split('/').at(-1);\n  if (lastPartOfUrl === 'generatetoken') {\n    next();\n    return;\n  }\n\n  const authHeader = req.headers['authorization'];\n  const token = authHeader &amp;&amp; authHeader.split(' ')[1];\n\n  console.log(token);\n\n  if (token == null) return res.sendStatus(HttpStatusCodes.UNAUTHORIZED);\n\n  jwt.verify(token, ENV.Jwtsecret as string, (err: any, user: any) =&gt; {\n    console.log(err);\n\n    if (err) return res.sendStatus(HttpStatusCodes.FORBIDDEN);\n\n    next();\n  });\n}\n\nexport default authenticateToken;\n</code></pre>"},{"location":"express_jwt/#ajouter-lintergiciel-au-serveur","title":"Ajouter l'intergiciel au serveur","text":"src/server.ts<pre><code>import morgan from 'morgan';\nimport path from 'path';\nimport helmet from 'helmet';\nimport express, { Request, Response, NextFunction } from 'express';\nimport logger from 'jet-logger';\n\nimport BaseRouter from '@src/routes';\n\nimport Paths from '@src/common/constants/Paths';\nimport ENV from '@src/common/constants/ENV';\nimport HttpStatusCodes from '@src/common/constants/HttpStatusCodes';\nimport { RouteError } from '@src/common/util/route-errors';\nimport { NodeEnvs } from '@src/common/constants';\nimport authenticateToken from './services/authenticateToken';\n\n/******************************************************************************\n                                Setup\n******************************************************************************/\n\nconst app = express();\n\n// **** Middleware **** //\n\n// Basic middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Show routes called in console during development\nif (ENV.NodeEnv === NodeEnvs.Dev) {\n  app.use(morgan('dev'));\n}\n\n// Security\nif (ENV.NodeEnv === NodeEnvs.Production) {\n  // eslint-disable-next-line n/no-process-env\n  if (!process.env.DISABLE_HELMET) {\n    app.use(helmet());\n  }\n}\n\napp.use(authenticateToken);\n\n// Add APIs, must be after middleware\napp.use(Paths.Base, BaseRouter);\n\n// Add error handler\napp.use((err: Error, _: Request, res: Response, next: NextFunction) =&gt; {\n  if (ENV.NodeEnv !== NodeEnvs.Test.valueOf()) {\n    logger.err(err, true);\n  }\n  let status = HttpStatusCodes.BAD_REQUEST;\n  if (err instanceof RouteError) {\n    status = err.status;\n    res.status(status).json({ error: err.message });\n  }\n  return next(err);\n});\n\n// **** FrontEnd Content **** //\n\n// Set views directory (html)\nconst viewsDir = path.join(__dirname, 'views');\napp.set('views', viewsDir);\n\n// Set static directory (js and css).\nconst staticDir = path.join(__dirname, 'public');\napp.use(express.static(staticDir));\n\n// Nav to users pg by default\napp.get('/', (_: Request, res: Response) =&gt; {\n  return res.redirect('/users');\n});\n\n// Redirect to login if not logged in.\napp.get('/users', (_: Request, res: Response) =&gt; {\n  return res.sendFile('users.html', { root: viewsDir });\n});\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default app;\n</code></pre>"},{"location":"express_jwt/#configurer-bruno-pour-utiliser-les-jetons","title":"Configurer Bruno pour utiliser les jetons","text":"<ol> <li> <p>Cr\u00e9er variable de collection. </p> </li> <li> <p>Cr\u00e9er une requ\u00eate GET pour obtenir un jeton.   </p> </li> <li> <p>Dans Script, ajouter le code suivant pour conserver le jeton dans une variable d'environnement.   </p><pre><code>bru.setEnvVar(\"jwttoken\", res.body.token)\n</code></pre> </li> <li> <p>Dans la collection, ajouter la variable dans l'auth Bearer Token </p> </li> <li> <p>Cr\u00e9er une requ\u00eate GET pour obtenir les donn\u00e9es.    </p> </li> <li> <p>Ex\u00e9cuter la requ\u00eate de g\u00e9n\u00e9ration avant celle du GET pour obtenir les donn\u00e9es.</p> </li> </ol>"},{"location":"generateur_express/","title":"G\u00e9n\u00e9rateur Express","text":""},{"location":"generateur_express/#generateur-de-modele-pour-express","title":"G\u00e9n\u00e9rateur de mod\u00e8le pour Express","text":"<p>Il y a un G\u00e9n\u00e9rateur d\u2019applications Express qui permet de g\u00e9n\u00e9rer la structure de base recommand\u00e9e en Typescript. </p> <p>Voici comment g\u00e9n\u00e9rer l\u2019application Situez vous dans le dossier o\u00f9 vous d\u00e9sirez cr\u00e9er l\u2019application (le dossier de l\u2019application sera automatiquement cr\u00e9\u00e9 \u00e0 la prochaine \u00e9tape)  </p> <p>Ex\u00e9cutez la commande de cr\u00e9ation d\u2019application :  </p> console<pre><code>npx express-generator-typescript mapremierappexpress\n</code></pre> <p>Une fois l\u2019application g\u00e9n\u00e9r\u00e9e, d\u00e9placez-vous dans le dossier cr\u00e9\u00e9 et installez les modules  </p> console<pre><code>cd mapremierappexpress\nnpm install \n</code></pre> <p>Si vous avez des erreurs de modules d\u00e9pr\u00e9ci\u00e9s, vous pouvez les corriger en suivant les instructions de la section Module d\u00e9pr\u00e9ci\u00e9.</p> <p>Ex\u00e9cutez l\u2019application en utilisant la commande suivante :  </p> console<pre><code>npm run dev \n</code></pre> <p> </p> Ex\u00e9cution du mod\u00e8le Express <p>Manuel</p> <p>Installation d'express Express Generator avec TypeScript </p>"},{"location":"generateur_express/#configurer-lanalysateur-de-code-eslint-dans-le-projet-express","title":"Configurer l'analysateur de code ESLint dans le projet Express","text":""},{"location":"generateur_express/#etape-1-installer-le-bon-module-eslint","title":"\u00c9tape 1 - Installer le bon module ESLint","text":"<pre><code>npm install @stylistic/eslint-plugin\n</code></pre>"},{"location":"generateur_express/#etape-2-desinstaller-les-modules-eslint-ts-et-js","title":"\u00c9tape 2 - D\u00e9sinstaller les modules ESLint TS et JS","text":"<pre><code>npm remove @stylistic/eslint-plugin-ts\nnpm remove @stylistic/eslint-plugin-js\n</code></pre>"},{"location":"generateur_express/#etape-3-corriger-configuration-eslint","title":"\u00c9tape 3 - Corriger configuration ESLint","text":"<p>Il faut retirer les r\u00e9f\u00e9rences aux vieux modules ESLint TS et JS en faveur au module unifi\u00e9.  </p> eslint.config.ts<pre><code>import eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\nimport stylistic from '@stylistic/eslint-plugin';\nimport nodePlugin from 'eslint-plugin-n';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  nodePlugin.configs['flat/recommended-script'],\n  ...tseslint.configs.strictTypeChecked,\n  ...tseslint.configs.stylisticTypeChecked,\n  {\n    ignores: ['**/node_modules/*', '**/*.mjs', '**/*.js'],\n  },\n  {\n    languageOptions: {\n      parserOptions: {\n        project: './tsconfig.json',\n        warnOnUnsupportedTypeScriptVersion: false,\n      },\n    },\n  },\n  {\n    plugins: {\n      '@stylistic': stylistic,\n    },\n  },\n  {\n    files: ['**/*.ts'],\n  },\n  {\n    rules: {\n      '@typescript-eslint/explicit-member-accessibility': 'warn',\n      '@typescript-eslint/no-misused-promises': 0,\n      '@typescript-eslint/no-floating-promises': 0,\n      '@typescript-eslint/no-confusing-void-expression': 0,\n      '@typescript-eslint/no-unnecessary-condition': 0,\n      '@typescript-eslint/restrict-template-expressions': [\n        'error',\n        { allowNumber: true },\n      ],\n      '@typescript-eslint/restrict-plus-operands': [\n        'warn',\n        { allowNumberAndString: true },\n      ],\n      '@typescript-eslint/no-unused-vars': 'warn',\n      '@typescript-eslint/no-unsafe-enum-comparison': 0,\n      '@typescript-eslint/no-unnecessary-type-parameters': 0,\n      '@stylistic/no-extra-semi': 'warn',\n      'max-len': [\n        'warn',\n        {\n          code: 80,\n        },\n      ],\n      '@stylistic/semi': ['warn', 'always'],\n      '@stylistic/member-delimiter-style': [\n        'warn',\n        {\n          multiline: {\n            delimiter: 'comma',\n            requireLast: true,\n          },\n          singleline: {\n            delimiter: 'comma',\n            requireLast: false,\n          },\n          overrides: {\n            interface: {\n              singleline: {\n                delimiter: 'semi',\n                requireLast: false,\n              },\n              multiline: {\n                delimiter: 'semi',\n                requireLast: true,\n              },\n            },\n          },\n        },\n      ],\n      '@typescript-eslint/no-non-null-assertion': 0,\n      '@typescript-eslint/no-unused-expressions': 'warn',\n      'comma-dangle': ['warn', 'always-multiline'],\n      'no-console': 1,\n      'no-extra-boolean-cast': 0,\n      indent: ['warn', 2],\n      quotes: ['warn', 'single'],\n      'n/no-process-env': 1,\n      'n/no-missing-import': 0,\n      'n/no-unpublished-import': 0,\n      'prefer-const': 'warn',\n    },\n  },\n);  \n</code></pre>"},{"location":"generateur_express/#pour-windows","title":"Pour Windows :","text":""},{"location":"generateur_express/#etape-1-installer-cross-env","title":"\u00c9tape 1 - installer cross-env :","text":"<pre><code>npm install cross-env\n</code></pre>"},{"location":"generateur_express/#etape-2-modifier-packagejson-comme-suit","title":"\u00c9tape 2 - modifier package.json comme suit :","text":"<pre><code>  \"dev\": \"cross-env NODE_ENV=development ts-node ./src\",\n  \"dev:hot\": \"cross-env nodemon --exec \\\"npm run dev\\\" --watch ./src --ext .ts\",\n</code></pre>"},{"location":"generateur_express/#etape-3-modifier-eslintconfigts","title":"\u00c9tape 3 - modifier eslint.config.ts :","text":"<pre><code>{\n    languageOptions: {\n      parserOptions: {\n        project: './tsconfig.json',\n        tsconfigRootDir: process.cwd(), // AJOUTER CETTE LIGNE EN WINDOWS\n        warnOnUnsupportedTypeScriptVersion: false,\n      },\n    },\n  },\n</code></pre>"},{"location":"generateur_express/#coder-un-api-express","title":"Coder un API Express","text":"<p>L'exemple suivant code une mini API qui g\u00e8re des r\u00e9servations dans un hotel.  </p> <p>CodeSandbox</p> <p>D\u00e9mo - API Express </p>"},{"location":"generateur_express/#etape-1-creer-linterface-modelreservationts","title":"\u00c9tape 1 - Cr\u00e9er l\u2019interface model/Reservation.ts","text":"models/Reservation.ts<pre><code>import { isNumber, isString, isEnumVal } from 'jet-validators';\nimport { parseObject, TParseOnError } from 'jet-validators/utils';\n\nimport { isRelationalKey, transIsDate } from '@src/common/util/validators';\nimport { IModel } from './common/types';\n\n\n/******************************************************************************\n                                 Constants\n******************************************************************************/\n\nconst DEFAULT_RESERVATION_VALS = (): IReservation =&gt; ({\n  id: -1,\n  nom: '',\n  courriel: '',\n  dateDebut: new Date(),\n  dateFin: new Date(),\n  typeChambre: TypeChambre.Standard,\n  prixParNuit: 0,\n  created: new Date(), // Vient du IModel pour la date de cr\u00e9ation\n});\n\n\n/******************************************************************************\n                                  Types\n******************************************************************************/\n\nexport enum TypeChambre {\n  Standard='Standard',\n  Deluxe='Deluxe',\n}\n\nexport interface IReservation extends IModel {\n  nom: string;\n  courriel: string;\n  dateDebut: Date;\n  dateFin: Date;\n  typeChambre: TypeChambre;\n  prixParNuit: number;\n}\n\n\n/******************************************************************************\n                                  Setup\n******************************************************************************/\n// Cr\u00e9e une validation pour l'\u00e9num\u00e9ration de type de chambre\nconst isTypeChambreEnumVal = isEnumVal(TypeChambre);\n\n// Initialize the \"parseUser\" function\nconst parseReservation = parseObject&lt;IReservation&gt;({\n  id: isRelationalKey,\n  nom: isString,\n  courriel: isString,\n  dateDebut: transIsDate,\n  dateFin: transIsDate,\n  prixParNuit: isNumber,\n  typeChambre: isTypeChambreEnumVal, \n  created: transIsDate,\n});\n\n\n/******************************************************************************\n                                 Functions\n******************************************************************************/\n\n/**\n * Nouvel objet de r\u00e9servation.\n */\nfunction __new__(reservation?: Partial&lt;IReservation&gt;): IReservation {\n  const retVal = { ...DEFAULT_RESERVATION_VALS(), ...reservation };\n  return parseReservation(retVal, errors =&gt; {\n    throw new Error('Cr\u00e9ation a \u00e9chou\u00e9e ' + JSON.stringify(errors, null, 2));\n  });\n}\n\n/**\n * Valide si l'objet est une r\u00e9servation, pour la route.\n */\nfunction test(arg: unknown, errCb?: TParseOnError): arg is IReservation {\n  return !!parseReservation(arg, errCb);\n}\n\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default {\n  new: __new__,\n  test,\n} as const;\n</code></pre>"},{"location":"generateur_express/#etape-2-ajouter-le-modele-a-la-base-de-donnees-bidon","title":"\u00c9tape 2 - Ajouter le mod\u00e8le \u00e0 la base de donn\u00e9es bidon","text":"repos/MockOrm.ts<pre><code>import jsonfile from 'jsonfile';\n\nimport ENV from '@src/common/constants/ENV';\nimport { NodeEnvs } from '@src/common/constants';\nimport { IReservation } from '@src/models/Reservation';\n\n\n\n/******************************************************************************\n                                Constants\n******************************************************************************/\n\nconst DB_FILE_NAME = (\n  ENV.NodeEnv === NodeEnvs.Test \n    ? 'database.test.json' \n    : 'database.json'\n);\n\n\n/******************************************************************************\n                                Types\n******************************************************************************/\n\ninterface IDb {\n  reservations: IReservation[];\n}\n\n\n/******************************************************************************\n                                Functions\n******************************************************************************/\n\n/**\n * Fetch the json from the file.\n */\nfunction openDb(): Promise&lt;IDb&gt; {\n  return jsonfile.readFile(__dirname + '/' + DB_FILE_NAME) as Promise&lt;IDb&gt;;\n}\n\n/**\n * Update the file.\n */\nfunction saveDb(db: IDb): Promise&lt;void&gt; {\n  return jsonfile.writeFile((__dirname + '/' + DB_FILE_NAME), db);\n}\n\n/**\n * Empty the database\n */\nfunction cleanDb(): Promise&lt;void&gt; {\n  return jsonfile.writeFile((__dirname + '/' + DB_FILE_NAME), {});\n}\n\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default {\n  openDb,\n  saveDb,\n  cleanDb,\n} as const;\n</code></pre>"},{"location":"generateur_express/#etape-3-mettre-a-jour-la-base-de-donnees","title":"\u00c9tape 3 - Mettre \u00e0 jour la base de donn\u00e9es","text":"repos/database.json<pre><code>{\"reservations\":[{\"id\":716805071644,\"nom\":\"Kamala Harris\",\"courriel\":\"kamala@profinfo.ca\",\"dateDebut\":\"2025-01-06\",\"dateFin\":\"2025-01-08\",\"typeChambre\":\"Deluxe\",\"prixParNuit\":150},{\"id\":177404267690,\"nom\":\"Kamala Harris\",\"courriel\":\"kamala@profinfo.ca\",\"dateDebut\":\"2025-01-06\",\"dateFin\":\"2025-01-08\",\"typeChambre\":\"Deluxe\",\"prixParNuit\":150},{\"id\":161338412973,\"nom\":\"Kamala Harris\",\"courriel\":\"kamala@profinfo.ca\",\"dateDebut\":\"2025-01-06\",\"dateFin\":\"2025-01-08\",\"typeChambre\":\"Deluxe\",\"prixParNuit\":150},{\"id\":904137092223,\"nom\":\"Kamala Harris\",\"courriel\":\"kamala@profinfo.ca\",\"dateDebut\":\"2025-01-06T00:00:00.000Z\",\"dateFin\":\"2025-01-08T00:00:00.000Z\",\"typeChambre\":\"Deluxe\",\"prixParNuit\":150,\"created\":\"2025-08-11T00:00:00.000Z\"},{\"id\":997592835914,\"nom\":\"Kamala Harris\",\"courriel\":\"kamala@profinfo.ca\",\"dateDebut\":\"2025-01-06T00:00:00.000Z\",\"dateFin\":\"2025-01-08T00:00:00.000Z\",\"typeChambre\":\"Deluxe\",\"prixParNuit\":150,\"created\":\"2025-08-11T00:00:00.000Z\"}]}\n</code></pre>"},{"location":"generateur_express/#etape-4-creer-le-repo","title":"\u00c9tape 4 - Cr\u00e9er le repo","text":"repos/ReservationRepo.ts<pre><code>import { IReservation } from '@src/models/Reservation';\nimport { getRandomInt } from '@src/common/util/misc';\n\nimport orm from './MockOrm';\n\n\n/******************************************************************************\n                                Functions\n******************************************************************************/\n\n/**\n * Extraire une r\u00e9servation.\n */\nasync function getOne(courriel: string): Promise&lt;IReservation | null&gt; {\n  const db = await orm.openDb();\n  for (const reservation of db.reservations) {\n    if (reservation.courriel === courriel) {\n      return reservation;\n    }\n  }\n  return null;\n}\n\n/**\n * V\u00e9rifier si une r\u00e9servation existe pour cet id.\n */\nasync function persists(id: number): Promise&lt;boolean&gt; {\n  const db = await orm.openDb();\n  for (const reservation of db.reservations) {\n    if (reservation.id === id) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Extraire toutes les r\u00e9servations.\n */\nasync function getAll(): Promise&lt;IReservation[]&gt; {\n  const db = await orm.openDb();\n  return db.reservations;\n}\n\n/**\n * Ajouter une r\u00e9servation.\n */\nasync function add(reservation: IReservation): Promise&lt;void&gt; {\n  const db = await orm.openDb();\n  reservation.id = getRandomInt();\n  db.reservations.push(reservation);\n  return orm.saveDb(db);\n}\n\n/**\n * Mettre \u00e0 jour une r\u00e9servation.\n */\nasync function update(reservation: IReservation): Promise&lt;void&gt; {\n  const db = await orm.openDb();\n  for (let i = 0; i &lt; db.reservations.length; i++) {\n    if (db.reservations[i].id === reservation.id) {\n      const dbReservation = db.reservations[i];\n      db.reservations[i] = {\n        ...dbReservation,\n        nom: reservation.nom,\n        courriel: reservation.courriel,\n        dateDebut: reservation.dateDebut,\n        dateFin: reservation.dateFin,\n        typeChambre: reservation.typeChambre,\n        prixParNuit: reservation.prixParNuit,\n      };\n      return orm.saveDb(db);\n    }\n  }\n}\n\n/**\n * Supprimer une r\u00e9servation.\n */\nasync function delete_(id: number): Promise&lt;void&gt; {\n  const db = await orm.openDb();\n  for (let i = 0; i &lt; db.reservations.length; i++) {\n    if (db.reservations[i].id === id) {\n      db.reservations.splice(i, 1);\n      return orm.saveDb(db);\n    }\n  }\n}\n\n\n// **** Unit-Tests Only **** //\n\n/**\n * Supprimer toutes les r\u00e9servations.\n */\nasync function deleteAllReservations(): Promise&lt;void&gt; {\n  const db = await orm.openDb();\n  db.reservations = [];\n  return orm.saveDb(db);\n}\n\n/**\n * Ins\u00e9rer plusieurs r\u00e9servations\n */\nasync function insertMult(\n  reservations: IReservation[] | readonly IReservation[],\n): Promise&lt;IReservation[]&gt; {\n  const db = await orm.openDb(),\n    reservationsF = [ ...reservations ];\n  for (const reservation of reservationsF) {\n    reservation.id = getRandomInt();\n    reservation.created = new Date();\n  }\n  db.reservations = [ ...db.reservations, ...reservations ];\n  await orm.saveDb(db);\n  return reservationsF;\n}\n\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default {\n  getOne,\n  persists,\n  getAll,\n  add,\n  update,\n  delete: delete_,\n  deleteAllReservations,\n  insertMult,\n} as const;\n</code></pre>"},{"location":"generateur_express/#etape-5-creer-le-service","title":"\u00c9tape 5 - Cr\u00e9er le service","text":"services/ReservationService.ts<pre><code>import { RouteError } from '@src/common/util/route-errors';\nimport HttpStatusCodes from '@src/common/constants/HttpStatusCodes';\n\nimport ReservationRepo from '@src/repos/ReservationRepo';\nimport { IReservation } from '@src/models/Reservation';\n\n\n/******************************************************************************\n                                Constants\n******************************************************************************/\n\nexport const RESERVATION_NOT_FOUND_ERR = 'R\u00e9servation non trouv\u00e9e';\n\n\n/******************************************************************************\n                                Functions\n******************************************************************************/\n\n/**\n * Extraire toutes les r\u00e9servations.\n */\nfunction getAll(): Promise&lt;IReservation[]&gt; {\n  return ReservationRepo.getAll();\n}\n\n/**\n * Ajouter une r\u00e9servation.\n */\nfunction addOne(reservation: IReservation): Promise&lt;void&gt; {\n  return ReservationRepo.add(reservation);\n}\n\n/**\n * Mettre \u00e0 jour une r\u00e9servation\n */\nasync function updateOne(reservation: IReservation): Promise&lt;void&gt; {\n  const persists = await ReservationRepo.persists(reservation.id);\n  if (!persists) {\n    throw new RouteError(\n      HttpStatusCodes.NOT_FOUND,\n      RESERVATION_NOT_FOUND_ERR,\n    );\n  }\n  // Return user\n  return ReservationRepo.update(reservation);\n}\n\n/**\n * Delete a user by their id.\n */\nasync function _delete(id: number): Promise&lt;void&gt; {\n  const persists = await ReservationRepo.persists(id);\n  if (!persists) {\n    throw new RouteError(\n      HttpStatusCodes.NOT_FOUND,\n      RESERVATION_NOT_FOUND_ERR,\n    );\n  }\n  // Delete user\n  return ReservationRepo.delete(id);\n}\n\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default {\n  getAll,\n  addOne,\n  updateOne,\n  delete: _delete,\n} as const;\n</code></pre>"},{"location":"generateur_express/#etape-6-creer-les-routes","title":"\u00c9tape 6 - Cr\u00e9er les routes","text":"routes/ReservationRoutes.ts<pre><code>import { isNumber } from 'jet-validators';\nimport { transform } from 'jet-validators/utils';\n\nimport HttpStatusCodes from '@src/common/constants/HttpStatusCodes';\nimport ReservationService from '@src/services/ReservationService';\n\nimport { IReq, IRes } from './common/types';\nimport { parseReq } from './common/util';\nimport Reservation from '@src/models/Reservation';\n\n\n/******************************************************************************\n                                Constants\n******************************************************************************/\n\nconst Validators = {\n  add: parseReq({ reservation: Reservation.test }),\n  update: parseReq({ reservation: Reservation.test }),\n  delete: parseReq({ id: transform(Number, isNumber) }),\n} as const;\n\n\n/******************************************************************************\n                                Functions\n******************************************************************************/\n\n/**\n * Extraire toutes les r\u00e9servations.\n */\nasync function getAll(_: IReq, res: IRes) {\n  const reservations = await ReservationService.getAll();\n  res.status(HttpStatusCodes.OK).json({ reservations });\n}\n\n/**\n * Ajouter une r\u00e9servation.\n */\nasync function add(req: IReq, res: IRes) {\n  const { reservation } = Validators.add(req.body);\n  await ReservationService.addOne(reservation);\n  res.status(HttpStatusCodes.CREATED).end();\n}\n\n/**\n * Update one user.\n */\nasync function update(req: IReq, res: IRes) {\n  const { reservation } = Validators.update(req.body);\n  await ReservationService.updateOne(reservation);\n  res.status(HttpStatusCodes.OK).end();\n}\n\n/**\n * Delete one user.\n */\nasync function delete_(req: IReq, res: IRes) {\n  const { id } = Validators.delete(req.params);\n  await ReservationService.delete(id);\n  res.status(HttpStatusCodes.OK).end();\n}\n\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default {\n  getAll,\n  add,\n  update,\n  delete: delete_,\n} as const;\n</code></pre>"},{"location":"generateur_express/#etape-7-ajouter-les-chemins-de-lapi-dans-les-commons","title":"\u00c9tape 7 - Ajouter les chemins de l\u2019API dans les commons","text":"/common/constants/Paths.ts<pre><code>export default {\n  Base: '/api',\n  Reservations: {\n    Base: '/reservations',\n    Get: '/all',\n    Add: '/add',\n    Update: '/update',\n    Delete: '/delete/:id',\n  },\n} as const;\n</code></pre>"},{"location":"generateur_express/#etape-8-ajouter-les-chemins-de-lapi-dans-indexts","title":"\u00c9tape 8 - Ajouter les chemins de l\u2019API dans index.ts","text":"routes/index.ts<pre><code>import { Router } from 'express';\n\nimport Paths from '@src/common/constants/Paths';\nimport ReservationRoutes from './ReservationRoutes';\n\n\n/******************************************************************************\n                                Setup\n******************************************************************************/\n\nconst apiRouter = Router();\n\n\n// ** Ajouter les routes de r\u00e9servation ** //\n\n// Initialiser le router\nconst reservationRoutes = Router();\n\n// Les routes\nreservationRoutes.get(Paths.Reservations.Get, ReservationRoutes.getAll);\nreservationRoutes.post(Paths.Reservations.Add, ReservationRoutes.add);\nreservationRoutes.put(Paths.Reservations.Update, ReservationRoutes.update);\nreservationRoutes.delete(Paths.Reservations.Delete, ReservationRoutes.delete);\n\n// Ajouter le router \u00e0 l'API\napiRouter.use(Paths.Reservations.Base, reservationRoutes);\n\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default apiRouter;\n</code></pre>"},{"location":"horaire/","title":"Horaire","text":""},{"location":"horaire/#horaire-du-cours-de-developpement-web-3","title":"Horaire du cours de d\u00e9veloppement web 3","text":"Cours Date Sujet Exercice 1 2025-08-21 13:15:00 Introduction \u00e0 TypeScript npm Prettier Exercice 1 - lodash 2 2025-08-25 12:15:00 TypeScript 2Express - G\u00e9n\u00e9rateurBruno Exercice 2 - Express avec mod\u00e8le 3 2025-08-28 13:15:00 Continuer les exercices 4 2025-09-04 12:15:00 IntergicielsTester API Exercice 3 - Intergiciels Express et Tests API 5 2025-09-08 12:15:00 JavaScript asynchrone MongoDB Exercice 4 - MongoDB 6 2025-09-11 13:15:00 Mongoose Exercice 5 - Mongoose 7 2025-09-15 12:15:00 Mongoose - la suiteSimulacre Mongoose dans un projet complet Exercice 6 - Mongoose 8 2025-09-18 13:15:00 \u00c9valuation formative 9 2025-09-22 12:15:00 Retour sur formatif  Projet APIExpress et JWT Exercice 7 - Express et JWT 10 2025-09-25 13:15:00 Projet API 11 2025-09-29 12:15:00 Examen API 12 2025-10-02 13:15:00 Projet API 13 2025-10-06 12:15:00 Projet API 14 2025-10-09 13:15:00 Introduction \u00e0 React Structure typique d'un projet React Penser en React Exercice 8 - React 15 2025-10-20 12:15:00 Styles : React et MUI Styles : TailWindCSS Exercice 9 - React et styles 16 2025-10-23 13:15:00 Routes, contexte et API R\u00e9gles de React Exercice 10 - Contexte et API 17 2025-10-27 12:15:00 Internationalisation Accessibilit\u00e9 Exercice 11 - Internatialisation 18 2025-10-30 13:15:00 Authentification Exercice 12 - Authentification 19 2025-11-06 13:15:00 Netlify Exercice 14 - Netlify 20 2025-11-10 12:15:00 Formatif React 21 2025-11-13 13:15:00 Projet Application React 22 2025-11-17 12:15:00 Examen React 23 2025-11-20 13:15:00 Projet Application React 24 2025-11-24 12:15:00 Projet Application React 25 2025-11-27 13:15:00 Projet Application React 26 2025-12-01 12:15:00 Projet Application React 27 2025-12-04 13:15:00 Projet Application React 28 2025-12-08 12:15:00 Projet Application React 29 2025-12-11 13:15:00 Projet Application React 30 2025-12-15 12:15:00 Projet Application React (remise \u00e0 la fin du cours)"},{"location":"intergiciels_express/","title":"Intergiciels Express","text":""},{"location":"intergiciels_express/#middleware-intergiciel-express","title":"Middleware (Intergiciel) Express","text":"<p>Lorsque la requ\u00eate arrive, elle passe \u00e0 travers chaque intergiciel. L\u2019intergiciel appelle le prochain avec next()  </p> <pre><code>graph TD\n  A[Client] -- req --&gt; B[Intergiciel 1];\n  B[Intergiciel 1] -- res --&gt; A[Client];\n  B[Intergiciel 1] -- req --&gt; C[Intergiciel 2];\n  C[Intergiciel 2] -- res --&gt; B[Intergiciel 1];\n  C[Intergiciel 2] -- req --&gt; D[\"app.get()\"];\n  D[\"app.get()\"] -- res --&gt; C[Intergiciel 2];\n</code></pre> index.ts<pre><code>import express from \"express\";\n\nconst app = express();\nconst port = 3000;\n\nfunction historique(\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction\n) {\n  console.log(`${req.method} ${req.url}`);\n  next();\n}\n\nconst historiqueParametre = (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction\n) =&gt; {\n  const nom = req.query.nom;\n  console.log(nom);\n  if (nom === \"Etienne\") {\n    next();\n  } else {\n    res.status(404).send(\"Erreur\");\n  }\n};\n\napp.use(historique);\napp.use(historiqueParametre);\n\napp.get(\"/\", (req: express.Request, res: express.Response) =&gt; {\n  res.send(\"Hello World\");\n});\n\napp.listen(port, () =&gt; console.log(\"serveur d\u00e9mar\u00e9\"));\n</code></pre> <p>S'il y a un besoin de contr\u00f4ler et m\u00eame refuser l'ex\u00e9cution de routes, l'intergiciel peut courtcircuiter la cha\u00eene comme suit :  </p> mini-securite.ts<pre><code>const bloquerSiPasEtienne = (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction,\n) =&gt; {\n  const nom = req.query.nom;\n  console.log(nom);\n  if (nom === 'Etienne') {\n    next();\n  } else {\n    res.status(403).send('Erreur');\n  }\n};\n\napp.use(bloquerSiPasEtienne);\n</code></pre>"},{"location":"intergiciels_express/#intergiciel-morgan","title":"Intergiciel - morgan","text":"<p>Morgan est un intergiciel pour garder l\u2019historique des requ\u00eates trait\u00e9es par votre serveur Express.</p> <p>Pour l\u2019installation : </p>console<pre><code>npm install morgan @types/morgan\n</code></pre> <p>Pour l\u2019utilisation :  </p> utilisation_morgan.ts<pre><code>import morgan from 'morgan\u2019;\n\napp.use(morgan('dev'));\n</code></pre> <p>Manuel</p> <p>Morgan - ExpressJS </p>"},{"location":"intergiciels_express/#intergiciel-expressjson","title":"Intergiciel \u2013 express.json()","text":"<p>Intergiciel pour transformer le json re\u00e7u du client en objet, remplace req.body.  </p> <p>Utilisation :  </p> utilisateurs.ts<pre><code>app.use(express.json());\n\napp.post('/', (req: express.Request&lt;Utilisateur&gt;, res: express.Response) =&gt; {\n    const nouvelUtilisateur: Utilisateur = {\n        id: req.body.id,\n        utilisateur: req.body.utilisateur,\n        nom: req.body.nom,\n        age: req.body.age,\n    };\n    listeUtilisateurs.push(nouvelUtilisateur);\n    res.send(nouvelUtilisateur);\n    console.log(nouvelUtilisateur);\n});\n</code></pre> <p>Manuel</p> <p>express.json - ExpressJS </p>"},{"location":"internationalisation/","title":"Internationalisation","text":""},{"location":"internationalisation/#internationalisation","title":"Internationalisation","text":"<ul> <li>Pas tous les utilisateurs de votre application parlent fran\u00e7ais.  </li> <li>On doit \u00ab\u00a0softcoder\u00a0\u00bb tout le texte de l\u2019application pour l\u2019afficher dans la langue de l\u2019utilisateur.  </li> <li> <p>Ce n\u2019est pas seulement le texte qui doit \u00eatre localis\u00e9 mais aussi :  </p> <ul> <li>Les dates</li> <li>L\u2019heure</li> <li>Les montants d\u2019argent</li> <li>Les pourcentages</li> <li>Le singulier et le pluriel des mots</li> <li>Les guillemets</li> </ul> </li> </ul>"},{"location":"internationalisation/#react-et-linternationalisation","title":"React et l\u2019internationalisation","text":"<ul> <li>Plusieurs modules existent pour internationaliser React  </li> <li>Dans ce cours, nous allons utiliser React-Intl </li> </ul> <p>Pour installer React-Intl :  </p> console<pre><code>npm install react-intl\n</code></pre> <p>Manuel</p> <p>React-intl </p>"},{"location":"internationalisation/#installation-minimale-dans-react","title":"Installation minimale dans React","text":"<ol> <li>Cr\u00e9er un dossier lang sous src</li> <li>Cr\u00e9er un fichier json nomm\u00e9 fr.json</li> <li> <p>Ajoutez vos cl\u00e9s de traductions comme ceci :  </p> <pre><code>{\n    \"app.titre\": \"Titre de l'application\"\n}\n</code></pre> </li> <li> <p>Important de bien nommer les cl\u00e9s, pour donner le plus de contexte possible \u00e0 l\u2019\u00e9quipe de traduction. Par exemple, le texte \u00e0 l\u2019int\u00e9rieur d\u2019un input pourrait avoir la cl\u00e9 suivante :</p> <pre><code>{\n    \"formulaireajout.commentaire.placeholder\": \"Entrer un commentaire\"\n}\n</code></pre> </li> </ol>"},{"location":"internationalisation/#code-minimal","title":"Code minimal","text":"main.tsx<pre><code>import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\nimport { IntlProvider } from 'react-intl';\nimport Francais from './lang/fr.json';\n\nconst locale = 'fr';\nconst messages = Francais;\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;IntlProvider locale={locale} messages={messages}&gt;\n      &lt;App /&gt;\n    &lt;/IntlProvider&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre>"},{"location":"internationalisation/#message-traduit-simple","title":"Message traduit simple","text":"<pre><code>&lt;FormattedMessage id=\"app.titre\" defaultMessage=\"Titre\" /&gt;\n</code></pre> <p>Manuel</p> <p>FormattedMessage </p>"},{"location":"internationalisation/#message-avec-variable","title":"Message avec variable","text":"lang/fr.json<pre><code>{\n    \"app.clics.label\": \"Il y a eu {nombreclics} clics\"\n}\n</code></pre> app.tsx<pre><code>&lt;FormattedMessage\n    id=\"app.clics.label\"\n    defaultMessage=\"Titre\"\n    values={{ nombreclics: count }}\n/&gt;\n</code></pre>"},{"location":"internationalisation/#pour-traduire-du-texte-avec-la-possibilite-de-pluriel","title":"Pour traduire du texte avec la possibilit\u00e9 de pluriel","text":"lang/fr.json<pre><code>{\n  \"app.clics.pluriel.label\": \"{nombreclics, plural,=0 {Il n'y a pas eu de clic} one {Il y a eu un clic} other {Il y a eu {nombreclics} clics}}\"\n}\n</code></pre> app.tsx<pre><code>&lt;FormattedMessage\n    id=\"app.clics.pluriel.label\"\n    defaultMessage=\"Titre\"\n    values={{ nombreclics: count }}\n/&gt;\n</code></pre> <p>Manuel</p> <p>Format des messages </p>"},{"location":"internationalisation/#pour-formater-une-date-dans-le-format-de-la-langue-cible","title":"Pour formater une date dans le format de la langue cible","text":"app.tsx<pre><code>const maintenant = new Date();\n\n&lt;FormattedDate\n    value={maintenant}\n    year=\"numeric\"\n    month=\"long\"\n    day=\"2-digit\"\n/&gt;\n</code></pre> <p>Manuel</p> <p>FormattedDate </p>"},{"location":"internationalisation/#pour-formatter-lheure-dans-le-format-de-la-langue-cible","title":"Pour formatter l\u2019heure dans le format de la langue cible","text":"app.tsx<pre><code>const maintenant = new Date();\nconst heure = maintenant.getTime();\n\n&lt;FormattedTime value={heure} /&gt;\n&lt;br /&gt;\n&lt;FormattedTime value={heure} timeZone=\"America/Vancouver\" /&gt;\n</code></pre> <p>Manuel</p> <p>FormattedTime </p>"},{"location":"internationalisation/#pour-formater-une-devise-monetaire","title":"Pour formater une devise (mon\u00e9taire)","text":"app.tsx<pre><code>const prix = 12.35;\n\n&lt;FormattedNumber\n    value={prix}\n    style=\"currency\"\n    currency=\"CAD\"\n    currencyDisplay=\"symbol\"\n/&gt;\n</code></pre> <p>Manuel</p> <p>FormattedNumber </p>"},{"location":"internationalisation/#pour-formater-un-pourcentage","title":"Pour formater un pourcentage","text":"app.tsx<pre><code>const rabais = 15 / 100;\n\n&lt;FormattedNumber value={rabais} style=\"percent\" /&gt;\n</code></pre> <p>CodeSandbox</p> <p>D\u00e9mo - Intl </p>"},{"location":"internationalisation/#selecteur-de-langue","title":"S\u00e9lecteur de langue","text":"<p>Maintenant que le texte est traduit, voici ce qu'il faut faire pour changer la langue dynamiquement :  </p> <ol> <li>Cr\u00e9er un contexte pour la langue  </li> <li>Ajouter une fonction pour changer la langue dans le contexte  </li> <li>Cr\u00e9er un provider pour le contexte  </li> <li>Utiliser le contexte dans le composant qui aura le s\u00e9lecteur  </li> <li>Cr\u00e9er un s\u00e9lecteur de langue et appeler la fonction pour changer la langue  </li> </ol> <p>Note</p> <p>Je laisse ce point sans d\u00e9monstration, un petit d\u00e9fi pour l'exercice qui s'en vient!  </p>"},{"location":"introduction_mongoose/","title":"Introduction \u00e0 Mongoose","text":""},{"location":"introduction_mongoose/#introduction-a-mongoose","title":"Introduction \u00e0 Mongoose","text":"<p>Mongoose est une biblioth\u00e8que JavaScript fr\u00e9quemment utilis\u00e9e dans une application Node.js exploitant une base de donn\u00e9es MongoDB.  </p> <p>Il fournit une solution simple permettant de mod\u00e9liser les donn\u00e9es dans vos applications en pr\u00e9cisant les sch\u00e9mas \u00e0 respecter.  </p> <p>Mongoose est un ODM (Object Document Mapper), ce qui permet de traduire la notion d\u2019objets en documents JSON.  </p> <p>Depuis octobre 2020, Mongoose supporte \u00e9galement le langage TypeScript. (Mongoose et TypeScript)  </p> <p>Manuel</p> <p>Site officiel de Mongoose Documentation de Mongoose </p> <p>Vous trouverez sur Internet plusieurs tutoriels pour cr\u00e9er une application qui utilise Node.js, MongoDB et Mongoose. Les exemples pr\u00e9sent\u00e9s dans ces notes de cours sont inspir\u00e9s de la marche \u00e0 suivre pr\u00e9sent\u00e9e par MDN Web Docs  ainsi que celui-ci.  </p> <p>La premi\u00e8re \u00e9tape consiste \u00e0 ajouter le module Mongoose \u00e0 votre application :  </p> console<pre><code>npm install mongoose\n</code></pre> <p>Vous devez ensuite d\u00e9finir le sch\u00e9ma des donn\u00e9es \u00e0 stocker dans une base de donn\u00e9es MongoDB.  Une pratique recommand\u00e9e consiste \u00e0 cr\u00e9er un dossier models dans lequel tous les sch\u00e9mas de votre application seront stock\u00e9s Voici la d\u00e9finition d\u2019un objet auteur : MDN Author Model </p>"},{"location":"introduction_mongoose/#connexion-a-mongoose","title":"Connexion \u00e0 Mongoose","text":"index.ts<pre><code>connect(ENV.Mongodb).then(() =&gt;\n  server.listen(ENV.Port, () =&gt; logger.info(SERVER_START_MSG)),\n);\n</code></pre>"},{"location":"introduction_mongoose/#schema-mongoose-auteur","title":"Sch\u00e9ma Mongoose - Auteur","text":"auteur.ts<pre><code>import { Schema, model } from 'mongoose';\n\n\n// Interface pour un auteur\n// Notez l'utilisation de id au lieu de _id. Mongoose cr\u00e9e automatiquement un _id pour chaque document.\nexport interface IAuteur {\n    id: string;\n    prenom: string;\n    nom: string;\n    date_naissance?: Date;\n    date_deces?: Date;\n};\n\n\nconst AuteurSchema = new Schema&lt;IAuteur&gt;({\n    id: { type: String, required: true, maxlength: 100 },\n    prenom: { type: String, required: true, maxlength: 100 },\n    nom: { type: String, required: true, maxlength: 100 },\n    date_naissance: Date,\n    date_deces: Date,\n});\n\nexport const Auteur = model&lt;IAuteur&gt;('Auteur', AuteurSchema);\n</code></pre> <p>Note</p> <p>Le premier param\u00e8tre de model&lt;&gt;() est le nom singulier de la collection de votre mod\u00e8le. Mongoose recherche automatiquement la version au pluriel du nom comme nom de la collection. Par exemple, Auteur aura la collection auteurs. Pour emp\u00eacher que Mongoose n'utilise un mauvais pluriel (pensez Bijou qui devient Bijoux et non pas Bijous), faire la commande : <code>mongoose.pluralize(null);</code> </p>"},{"location":"introduction_mongoose/#les-routes-get-tous","title":"Les routes : Get - Tous","text":"route.ts<pre><code>import { IAuteur, Auteur } from '@src/models/Auteur';\n\nimport mongoose from 'mongoose';\nconst uri =\n  'mongodb://localhost:27017/nom_bd?readPreference=primary&amp;ssl=false';\n\n/**\n* Extraire tous les auteurs.\n*\n* @returns {IAuteur[]} Un tableau de tous les auteurs\n*/\nasync function getAll(): Promise&lt;IAuteur[]&gt; {\n    const auteurs = await Auteur.find();\n    return auteurs;\n}\n</code></pre>"},{"location":"introduction_mongoose/#les-routes-get-par-id","title":"Les routes : Get - par Id","text":"route.ts<pre><code>/**\n* Extraire un auteur.\n*\n* @param {string} id - ID de l'auteur \u00e0 extraire\n*\n* @returns {IAuteur} - Un auteur si trouv\u00e9\n*/\n\nasync function getOne(id: string,): Promise&lt;IAuteur | null&gt; {\n    const auteur = await Auteur.findOne({\n        id: id,\n    });\n    return auteur;\n}\n</code></pre>"},{"location":"introduction_mongoose/#les-routes-post","title":"Les routes : POST","text":"route.ts<pre><code>/**\n* Ajouter un auteur.\n* \n* @param {IAuteur} auteur - Auteur \u00e0 ajouter\n*/\n\nasync function add(auteur: IAuteur): Promise&lt;void&gt; {\n    const nouvelAuteur = new Auteur(auteur);\n    await nouvelAuteur.save();\n}\n</code></pre>"},{"location":"introduction_mongoose/#option-strict","title":"Option strict","text":"<p>Manuel</p> <p>Option strict par d\u00e9faut </p>"},{"location":"introduction_react/","title":"Introduction \u00e0 React","text":""},{"location":"introduction_react/#react","title":"React","text":""},{"location":"introduction_react/#generer-un-projet-en-react","title":"G\u00e9n\u00e9rer un projet en React","text":"<p>Il y a plusieurs G\u00e9n\u00e9rateur d\u2019applications React qui permettent de g\u00e9n\u00e9rer la structure de base recommand\u00e9e en JavaScript ou TypeScript. </p> <p>Voici comment g\u00e9n\u00e9rer l\u2019application :  </p> <ol> <li>Situez vous dans le dossier o\u00f9 vous d\u00e9sirez cr\u00e9er l\u2019application (le dossier de l\u2019application sera automatiquement cr\u00e9\u00e9 \u00e0 la prochaine \u00e9tape)  </li> <li>Ex\u00e9cutez la commande de cr\u00e9ation d\u2019application : console<pre><code>npm create vite@latest \n</code></pre></li> <li>Entrez le nom de votre projet : console<pre><code>&gt; npx\n&gt; \"create-vite\"\n\u2502\n\u25c6  Project name:\n\u2502  votre-nom-de-projet\n</code></pre></li> <li>Choisir React : console<pre><code>\u25c6  Select a framework:\n\u2502  \u25cb Vanilla\n\u2502  \u25cb Vue\n\u2502  \u25cf React\n\u2502  \u25cb Preact\n\u2502  \u25cb Lit\n\u2502  \u25cb Svelte\n\u2502  \u25cb Solid\n\u2502  \u25cb Qwik\n\u2502  \u25cb Angular\n\u2502  \u25cb Marko\n\u2502  \u25cb Others\n\u2514\n</code></pre></li> <li>Choisir Typescript : console<pre><code>\u25c6  Select a variant:\n\u2502  \u25cf TypeScript\n\u2502  \u25cb TypeScript + React Compiler\n\u2502  \u25cb TypeScript + SWC\n\u2502  \u25cb JavaScript\n\u2502  \u25cb JavaScript + React Compiler\n\u2502  \u25cb JavaScript + SWC\n\u2502  \u25cb React Router v7 \u2197\n\u2502  \u25cb TanStack Router \u2197\n\u2502  \u25cb RedwoodSDK \u2197\n\u2502  \u25cb RSC \u2197\n\u2514\n</code></pre></li> <li>Choisir No : console<pre><code>\u25c6  Use rolldown-vite (Experimental)?:\n\u2502  \u25cb Yes\n\u2502  \u25cf No\n\u2514\n</code></pre></li> <li>Choisir Yes : console<pre><code>\u25c6  Install with npm and start now?\n\u2502  \u25cf Yes / \u25cb No\n\u2514\n</code></pre></li> </ol> <p>Si vous avez des erreurs de modules d\u00e9pr\u00e9ci\u00e9s, vous pouvez les corriger en suivant les instructions de la section Module d\u00e9pr\u00e9ci\u00e9.</p> <p> </p> Page par d\u00e9faut d'une application Vite en React <p>Manuel</p> <p>Documentation officielle Vite </p>"},{"location":"introduction_react/#react-developer-tools","title":"React Developer Tools","text":"<p>React Developer Tools est un plugiciel dans Chrome pour aider au d\u00e9bogage de vos applications React.  </p> <p>Pour l'installer :  React Developer Tools pour Chrome </p> <p> </p> React Development Tools s'installe dans les outils de d\u00e9veloppement de Chrome"},{"location":"introduction_react/#programmer-react-avec-des-fonctions","title":"Programmer React avec des fonctions","text":"<p>Utiliser des fonctions au lieu des classes en React est la mani\u00e8re officielle de programmer dans cet environnement.  </p> Personnage.tsx<pre><code>import './Personnage.css';\n\nconst Personnage = () =&gt; {\n  const nomDuPersonnage = 'Fluffy McChat';\n  const photoDuPersonnage = 'https://placecats.com/300/300';\n  const adresseDuPersonnage = '123 Ave Des F\u00e9lins';\n\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;div className=\"photo\"&gt;\n        &lt;img src={photoDuPersonnage} /&gt;\n      &lt;/div&gt;\n      &lt;div className=\"info\"&gt;\n        &lt;p&gt;{nomDuPersonnage}&lt;/p&gt;\n        &lt;p className=\"addresse\"&gt;{adresseDuPersonnage}&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Personnage;\n</code></pre> Personnage.css<pre><code>.container {\n  max-width: 600px;\n  width: 400px;\n  margin: 0 auto;\n  background-color: #fff;\n  color: #000;\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.photo {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.photo img {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n}\n\n.info {\n  margin-bottom: 20px;\n}\n\n.address {\n  font-style: italic;\n}\n</code></pre> app.tsx<pre><code>import './App.css';\nimport Personnage from '../Personnage';\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Personnage /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p> </p> Affichage du projet personnage - base <p>CodeSandbox</p> <p>D\u00e9mo - Personnage - Base </p> <p>Manuel</p> <p>Learn React </p>"},{"location":"introduction_react/#passage-de-parametres-avec-les-props","title":"Passage de param\u00e8tres avec les props","text":"<ol> <li>D\u00e9finir la liste des param\u00e8tres dans une interface  </li> <li>L\u2019ajouter comme props \u00e0 la fonction de la composante  </li> <li>Utiliser les param\u00e8tres lors de l\u2019instanciation de la composante  </li> </ol> Personnage.tsx<pre><code>import \"./Personnage.css\";\n\ninterface IPersonnageProps {\n  nom: string;\n  photo: string;\n  adresse: string;\n}\n\nconst Personnage = (props: IPersonnageProps) =&gt; {\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;div className=\"photo\"&gt;\n        &lt;img src={props.photo} /&gt;\n      &lt;/div&gt;\n      &lt;div className=\"info\"&gt;\n        &lt;p&gt;{props.nom}&lt;/p&gt;\n        &lt;p className=\"addresse\"&gt;{props.adresse}&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Personnage;\n</code></pre> app.tsx<pre><code>import \"./App.css\";\nimport Personnage from \"../Personnage\";\n\nfunction App() {\n  const personnage = {\n    nom: \"Fluffy McChat\",\n    photo: \"https://placecats.com/300/300\",\n    adresse: \"123 Ave Des F\u00e9lins\",\n  };\n\n  const nomDuPersonnage = \"Fanta le Chat\";\n  const photoDuPersonnage = \"https://placecats.com/300/300\";\n  const adresseDuPersonnage = \"12123 Ave Des F\u00e9lins\";\n\n  return (\n    &lt;&gt;\n      &lt;Personnage {...personnage} key={1} /&gt;\n      &lt;Personnage\n        nom={nomDuPersonnage}\n        photo={photoDuPersonnage}\n        adresse={adresseDuPersonnage}\n        key={2}\n      /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> Affichage du projet personnage - base avec props <p>CodeSandbox</p> <p>D\u00e9mo - Personnage - Props </p> <p>Manuel</p> <p>Props </p>"},{"location":"introduction_react/#les-hooks-usestate","title":"Les hooks - useState","text":"<ul> <li>Conserve l\u2019\u00e9tat d\u2019une variable  </li> <li>R\u00e9agit lorsque la valeur change  </li> </ul> App.tsx<pre><code>import \"./App.css\";\nimport Personnage from \"../Personnage\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const personnage = {\n    nom: \"Fluffy McChat\",\n    photo: \"https://placecats.com/300/300\",\n    adresse: \"123 Ave Des F\u00e9lins\",\n  };\n\n  const [nom, setNom] = useState(\"Fanta le Chat\");\n\n  const photoDuPersonnage = \"https://placecats.com/300/300\";\n  const adresseDuPersonnage = \"12123 Ave Des F\u00e9lins\";\n\n  return (\n    &lt;&gt;\n      &lt;input value={nom} onChange={(e) =&gt; setNom(e.target.value)} /&gt;\n      &lt;Personnage {...personnage} key={1} /&gt;\n      &lt;Personnage\n        nom={nom}\n        photo={photoDuPersonnage}\n        adresse={adresseDuPersonnage}\n        key={2}\n      /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> Affichage du projet personnage - base avec useState <p>CodeSandbox</p> <p>D\u00e9mo - Personnage - useState </p> <p>Manuel</p> <p>useState </p>"},{"location":"introduction_react/#hooks-useeffect","title":"Hooks : useEffect","text":"<p>Faire des traitements de donn\u00e9es seulement lors d\u2019\u00e9v\u00e9nements pr\u00e9cis, comme le premier render ou lors de changement d\u2019une autre variable.  </p> app.tsx<pre><code>import \"./App.css\";\nimport Personnage from \"../Personnage\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const personnage = {\n    nom: \"Fluffy McChat\",\n    photo: \"https://placecats.com/300/300\",\n    adresse: \"123 Ave Des F\u00e9lins\",\n  };\n\n  const [nom, setNom] = useState(\"Fanta le Chat\");\n  const [longueurDuNom, setLongueurDuNom] = useState(0);\n\n  useEffect(() =&gt; {\n    setLongueurDuNom(nom.length);\n  }, [nom]);\n\n  const photoDuPersonnage = \"https://placecats.com/300/300\";\n  const adresseDuPersonnage = \"12123 Ave Des F\u00e9lins\";\n\n  return (\n    &lt;&gt;\n      &lt;input value={nom} onChange={(e) =&gt; setNom(e.target.value)} /&gt;\n      &lt;p&gt;Longueur du nom : {longueurDuNom}&lt;/p&gt;\n      &lt;Personnage {...personnage} key={1} /&gt;\n      &lt;Personnage\n        nom={nom}\n        photo={photoDuPersonnage}\n        adresse={adresseDuPersonnage}\n        key={2}\n      /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p> </p> Affichage du projet personnage - base avec useEffect <p>CodeSandbox</p> <p>D\u00e9mo - Personnage - useEffect </p> <p>Manuel</p> <p>useEffect </p>"},{"location":"introduction_typescript/","title":"Introduction \u00e0 TypeScript","text":""},{"location":"introduction_typescript/#introduction-a-typescript","title":"Introduction \u00e0 TypeScript","text":"<p>TypeScript c\u2019est du JavaScript avec des types!</p>"},{"location":"introduction_typescript/#pourquoi-utiliser-typescript","title":"Pourquoi utiliser TypeScript?","text":"<p>TypeScript est un langage de programmation qui a gagn\u00e9 en popularit\u00e9 gr\u00e2ce \u00e0 son utilit\u00e9 dans le d\u00e9veloppement logiciel moderne. Voici quelques raisons pour lesquelles vous pourriez envisager d'utiliser TypeScript dans vos programmes :  </p> <ol> <li> <p>S\u00e9curit\u00e9 et robustesse du code : TypeScript introduit un syst\u00e8me de types statiques qui permet de d\u00e9tecter des erreurs de typage d\u00e8s la phase de d\u00e9veloppement. Cela aide \u00e0 \u00e9viter de nombreux bugs li\u00e9s aux types et garantit une meilleure qualit\u00e9 du code.  </p> </li> <li> <p>Meilleure maintenance : Les syst\u00e8mes de types aident les d\u00e9veloppeurs \u00e0 comprendre plus facilement le code existant, \u00e0 d\u00e9tecter des erreurs potentielles et \u00e0 faciliter les refontes. Cela conduit \u00e0 une meilleure maintenance \u00e0 long terme.  </p> </li> <li> <p>Meilleure IDE (environnement de d\u00e9veloppement int\u00e9gr\u00e9) support : Comme TypeScript fournit des informations d\u00e9taill\u00e9es sur les types, les IDE peuvent offrir une assistance au code plus puissante, comme l'autocompl\u00e9tion, la v\u00e9rification en temps r\u00e9el et la navigation dans le code.  </p> </li> <li> <p>\u00c9volution en douceur depuis JavaScript : TypeScript est un sur-ensemble de JavaScript, ce qui signifie que vous pouvez migrer progressivement votre code JavaScript existant vers TypeScript sans avoir \u00e0 tout r\u00e9\u00e9crire. Les fichiers TypeScript peuvent contenir du code JavaScript valide.  </p> </li> <li> <p>\u00c9vite les erreurs courantes : Les types statiques aident \u00e0 \u00e9viter des erreurs courantes comme les r\u00e9f\u00e9rences null ou undefined, les erreurs de type et d'autres probl\u00e8mes fr\u00e9quents en JavaScript.  </p> </li> <li> <p>Facilite la collaboration : Les types statiques documentent de mani\u00e8re plus explicite les attentes concernant les donn\u00e9es et les fonctions, ce qui facilite la collaboration entre les d\u00e9veloppeurs.  </p> </li> <li> <p>Meilleure \u00e9chelle et modularit\u00e9 : TypeScript encourage la construction d'applications modulaires avec des types sp\u00e9cifiques pour les interfaces et les contrats entre les modules. Cela rend les applications plus faciles \u00e0 d\u00e9velopper et \u00e0 faire \u00e9voluer.  </p> </li> <li> <p>Communaut\u00e9 active et \u00e9cosyst\u00e8me croissant : TypeScript est soutenu par Microsoft et a une communaut\u00e9 active. De nombreux outils et biblioth\u00e8ques populaires sont \u00e9galement compatibles avec TypeScript.  </p> </li> <li> <p>Compatibilit\u00e9 avec les normes ES : TypeScript suit g\u00e9n\u00e9ralement les normes ES (ECMAScript), ce qui signifie qu'il prend en charge les fonctionnalit\u00e9s JavaScript modernes tout en ajoutant des fonctionnalit\u00e9s suppl\u00e9mentaires.  </p> </li> <li> <p>Meilleure documentation et apprentissage progressif : TypeScript offre des informations plus d\u00e9taill\u00e9es sur le code, ce qui peut faciliter l'apprentissage d'un nouveau codebase ou l'int\u00e9gration de nouveaux membres dans une \u00e9quipe de d\u00e9veloppement.  </p> </li> </ol> <p>En r\u00e9sum\u00e9, utiliser TypeScript peut am\u00e9liorer la qualit\u00e9, la robustesse et la maintenabilit\u00e9 de votre code, tout en offrant des avantages en termes d'assistance au d\u00e9veloppement et de collaboration. Cependant, il est important de noter que le choix d'utiliser TypeScript d\u00e9pend des besoins sp\u00e9cifiques de votre projet et de votre \u00e9quipe.  </p> <p>Aide \u00e0 trouver les erreurs dans notre code.</p> <p>Manuel</p> <p>Manuel TypeScript </p>"},{"location":"introduction_typescript/#installation-de-typescript","title":"Installation de TypeScript","text":"<p>Pour installer TypeScript, utiliser la commande suivante :</p> console<pre><code>npm install \u2013g typescript\n</code></pre> <p>Note</p> <p>\u00c7a installe sur votre poste le compilateur TypeScript qui transforme le code en JavaScript. Nous allons voir npm plus en d\u00e9tail au prochain cours</p>"},{"location":"introduction_typescript/#indiquer-les-types-aux-variables","title":"Indiquer les types aux variables","text":"TypeScript indique que la variable est mal utilis\u00e9e <p>Dans votre \u00e9diteur de code, TypeScript dit que la variable pr\u00e9nom est un string et vous informe que vous l\u2019utilisez avec un autre type. C\u2019est la base de TypeScript, vous \u00e9viter des erreurs de la sorte.</p> <p> </p> Erreur dans VSCode venant de TypeScript"},{"location":"introduction_typescript/#types-primitifs","title":"Types primitifs","text":"<p>TypeScript a les types primitifs suivants :  </p> <ul> <li>string  </li> <li>number  </li> <li>boolean  </li> <li>null  </li> <li>void  </li> <li>any  </li> <li>never  </li> <li>unknown  </li> </ul>"},{"location":"introduction_typescript/#inference","title":"Inf\u00e9rence","text":"<p>TypeScript peut deviner le type selon le contexte :  </p> <p> </p> TypeScript devine le type par le contexte d'utilisation"},{"location":"introduction_typescript/#linference-ne-marche-pas-toujours","title":"L'inf\u00e9rence ne marche pas toujours","text":"<p>Des fois, l\u2019inf\u00e9rence ne fonctionne pas :  </p> <p> </p> Inf\u00e9rence pas toujours parfait <p>Dans ce cas, il faut \u00eatre explicite :  </p> <p> </p> Aider l'inf\u00e9rence"},{"location":"introduction_typescript/#any","title":"Any","text":"<p>Le type Any est pour indiquer que vous pr\u00e9voyez mettre plus d\u2019un type dans la m\u00eame variable.  </p> <p>C\u2019est \u00e0 proscrire </p> any.ts<pre><code>let quelqueChose : any = 'Une patate';\n\nquelqueChose = 12;\n\nquelqueChose = true;\n\nquelqueChose = { nom: 'Taleb', prenom: 'Fr\u00e9d\u00e9rick' };\n</code></pre> <p>\u00c7a emp\u00eache TypeScript de vous aider!  </p>"},{"location":"introduction_typescript/#never","title":"Never","text":"<p>Utilis\u00e9 comme param\u00e8tre de retour d\u2019une fonction qui ne se terminera jamais.  </p> boucle_sans_fin.ts<pre><code>function bloucleSansFin(): never {\n  while (true) {\n    console.log(\"\u00c0 l'aide, je suis pris ici!\");\n  }\n}\n</code></pre>"},{"location":"introduction_typescript/#void","title":"Void","text":"<p>Utiliser void lorsque votre fonction ne retourne pas de valeur :</p> bonjour.ts<pre><code>function direBonjour(): void {\n  console.log(\"Bonjour!\");\n}\n</code></pre>"},{"location":"introduction_typescript/#unknown","title":"Unknown","text":"<p>Unknown est comme Any, dans le sens qu\u2019il peut recevoir n\u2019importe quel type.</p> unknown.ts<pre><code>let quosseCa: unknown;\n\nquosseCa = 1;\n\nquosseCa = \"Deux\";\n\nquosseCa = false;\n</code></pre> <p>Mais unknown ne peut etre assign\u00e9 \u00e0 aucun autre type de variable que unknown et any:  </p> <p> </p> TypeScript indique que la variable est mal utilis\u00e9e"},{"location":"introduction_typescript/#objets","title":"Objets","text":"<p>Les objets peuvent \u00eatre typ\u00e9s comme les variables :  </p> <p> </p> Contrairement \u00e0 JavaScript, TypeScript interdit d\u2019ajouter des attributs \u00e0 un objet apr\u00e8s sa cr\u00e9ation."},{"location":"introduction_typescript/#types","title":"Types","text":"<p>Si nous voulons cr\u00e9er plusieurs objets avec la m\u00eame forme, cr\u00e9er un type peut aider :  </p> chat.ts<pre><code>/**\n * Repr\u00e9sente un chat\n * @property {string} nom - Le nom du chat\n * @property {number} nombreDeVies - Le nombre de vies restantes au chat\n * @property {string[]} surnoms - Tableau de tous les surnoms du chat\n * @property {string=} race - Race du chat\n */\ntype Chat = {\n  nom: string;\n  nombreDeVies: number;\n  surnoms: string[];\n  race?: string;\n};\n\n/**\n * Affiche le d\u00e9tail d'un chat\n *\n * @param {Chat} unchat - Un chat \u00e0 afficher\n **/\nfunction afficherChat(unchat: Chat): void {\n  console.log(\n    `Le chat se nomme ${unchat.nom} et a ${unchat.nombreDeVies} vies.`\n  );\n}\n\nconst fanta: Chat = {\n  nom: 'Fanta',\n  nombreDeVies: 9,\n  surnoms: ['Chaton', 'Tannant'],\n};\n\nconst guizmo: Chat = {\n  nom: 'Guizmo',\n  nombreDeVies: 3,\n  surnoms: ['Mou'],\n  race: 'Siamois',\n};\n\nafficherChat(fanta);\nafficherChat(guizmo);\n</code></pre> <p>On s\u2019assure que tous les objets ont les m\u00eames attributs. On valide que seulement les objets d\u2019un type peuvent \u00eatre utilis\u00e9s dans une fonction.  </p>"},{"location":"introduction_typescript/#parametres-de-fonctions","title":"Param\u00e8tres de fonctions","text":"<p>Tr\u00e8s utile pour documenter une fonction :  </p> deux_nombres.ts<pre><code>/**\n * Multiplie deux nombres\n *\n * @param {number} nombre1 - Premier nombre\n * @param {number} nombre2 - Second nombre\n **/\nfunction multiplierDeuxNombres(nombre1: number, nombre2: number): number {\n  return nombre1 * nombre2;\n}\n\nconst produit1 = multiplierDeuxNombres(2, 4);\n\nconst produit2 = multiplierDeuxNombres('DIX', 'DEUX'); // Donne une erreur\n</code></pre>"},{"location":"introduction_typescript/#compiler-typescript-en-javascript","title":"Compiler TypeScript en JavaScript","text":"<p>TypeScript ne peut pas \u00eatre ex\u00e9cut\u00e9 directement par Node ou par le navigateur. Il faut le compiler (parfois appel\u00e9 \u00ab\u00a0transpiler\u00a0\u00bb) en JavaScript avant son ex\u00e9cution.  </p> console<pre><code>tsc\n</code></pre>"},{"location":"introduction_typescript/#configurer-tsc","title":"Configurer tsc","text":"<p>Pour compiler, il est important de g\u00e9n\u00e9rer le fichier tsconfig.json avant de faire la commmande tsc :  </p> console<pre><code>tsc -init\n</code></pre> <p>Voici les r\u00e9sultats, selon la version de JavaScript :  </p>"},{"location":"introduction_typescript/#typescript","title":"TypeScript","text":"chat.ts<pre><code>/**\n * Repr\u00e9sente un chat\n * @property {string} nom - Le nom du chat\n * @property {number} nombreDeVies - Le nombre de vies restantes au chat\n * @property {string[]} surnoms - Tableau de tous les surnoms du chat\n * @property {string=} race - Race du chat\n */\ntype Chat = {\n  nom: string;\n  nombreDeVies: number;\n  surnoms: string[];\n  race?: string;\n};\n\n/**\n * Affiche le d\u00e9tail d'un chat\n *\n * @param {Chat} unchat - Un chat \u00e0 afficher\n **/\nfunction afficherChat(unchat: Chat): void {\n  console.log(\n    `Le chat se nomme ${unchat.nom} et a ${unchat.nombreDeVies} vies.`\n  );\n}\n\nconst fanta: Chat = {\n  nom: 'Fanta',\n  nombreDeVies: 9,\n  surnoms: ['Chaton', 'Tannant'],\n};\n\nconst guizmo: Chat = {\n  nom: 'Guizmo',\n  nombreDeVies: 3,\n  surnoms: ['Mou'],\n  race: 'Siamois',\n};\n\nafficherChat(fanta);\nafficherChat(guizmo);\n</code></pre>"},{"location":"introduction_typescript/#javascript-es6","title":"JavaScript ES6","text":"chat.js<pre><code>/**\n * Affiche le d\u00e9tail d'un chat\n *\n * @param {Chat} unchat - Un chat \u00e0 afficher\n **/\nfunction afficherChat(unchat) {\n    console.log(\"Le chat se nomme \".concat(unchat.nom, \" et a \").concat(unchat.nombreDeVies, \" vies.\"));\n}\nvar fanta = {\n    nom: 'Fanta',\n    nombreDeVies: 9,\n    surnoms: ['Chaton', 'Tannant'],\n};\nvar guizmo = {\n    nom: 'Guizmo',\n    nombreDeVies: 3,\n    surnoms: ['Mou'],\n    race: 'Siamois',\n};\nafficherChat(fanta);\nafficherChat(guizmo);\n</code></pre>"},{"location":"introduction_typescript/#javascript-es2022","title":"JavaScript ES2022","text":"chat.js<pre><code>'use strict';\n/**\n * Affiche le d\u00e9tail d'un chat\n *\n * @param {Chat} unchat - Un chat \u00e0 afficher\n **/\nfunction afficherChat(unchat) {\n  console.log(\n    `Le chat se nomme ${unchat.nom} et a ${unchat.nombreDeVies} vies.`\n  );\n}\nconst fanta = {\n  nom: 'Fanta',\n  nombreDeVies: 9,\n  surnoms: ['Chaton', 'Tannant'],\n};\nconst guizmo = {\n  nom: 'Guizmo',\n  nombreDeVies: 3,\n  surnoms: ['Mou'],\n  race: 'Siamois',\n};\nafficherChat(fanta);\nafficherChat(guizmo);\n</code></pre>"},{"location":"introduction_typescript/#configuration-de-tsc-tsconfigjson","title":"Configuration de tsc \u2013 tsconfig.json","text":"<p>tsconfig.json permet de configurer comment tsc compile les fichiers TypeScript.  </p> <p>Quelques param\u00e8tres utiles :  </p> tsconfig.json<pre><code>{\n  \"compilerOptions\": {\n  \"target\": \"ES2022\" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,\n  \"module\": \"commonjs\" /* Specify what module code is generated. */,\n  \"outDir\": \"./dist\",  /* Specify an output folder for all emitted files. */\n  \"strict\": true /* Enable all strict type-checking options. */,\n  \"skipLibCheck\": true /* Skip type checking all .d.ts files. */\n  }\n}\n</code></pre> <p>Manuel</p> <p>What is a tsconfig.json tsconfig reference </p>"},{"location":"javascript_async/","title":"JavaScript asynchrone","text":""},{"location":"javascript_async/#javascript-asynchrone","title":"JavaScript asynchrone","text":"<p>Asynchrone\u00a0: fait r\u00e9f\u00e9rence \u00e0 un environnement de communication o\u00f9 chaque partie re\u00e7oit et traite les messages lorsque c'est possible ou plus pratique, au lieu de le faire au m\u00eame moment.  </p>"},{"location":"javascript_async/#javascript-asynchrone_1","title":"JavaScript asynchrone","text":"<p>De nombreuses fonctionnalit\u00e9s des API Web utilisent d\u00e9sormais du code asynchrone pour s'ex\u00e9cuter, en particulier celles qui acc\u00e8dent \u00e0 un type de ressource ou le r\u00e9cup\u00e8rent \u00e0 partir d'un p\u00e9riph\u00e9rique externe, par exemple en r\u00e9cup\u00e9rant un fichier sur le r\u00e9seau, en acc\u00e9dant \u00e0 une base de donn\u00e9es et en renvoyant des donn\u00e9es, en acc\u00e9dant \u00e0 un flux vid\u00e9o \u00e0 partir d'une webcam ou en diffusant l'affichage vers un casque VR.  </p> <p>Manuel</p> <p>Concepts de l'asynchrone en JavaScript Documentation MDN pour le JavaScript asynchrone </p>"},{"location":"javascript_async/#fonctions-de-rappel-asynchrones","title":"Fonctions de rappel asynchrones","text":"<p>Les\u00a0callbacks\u00a0asynchrones ou fonctions de rappels asynchrones sont des fonctions qui sont pass\u00e9es comme arguments lors de l'appel d'une fonction qui commencera \u00e0 ex\u00e9cuter du code en arri\u00e8re-plan. Lorsque le code d'arri\u00e8re-plan a fini de s'ex\u00e9cuter, il appelle la fonction de rappel pour vous faire savoir que le travail est termin\u00e9, ou pour vous faire savoir que quelque chose d'int\u00e9ressant s'est produit. L'utilisation des\u00a0callbacks\u00a0est un peu d\u00e9mod\u00e9e aujourd'hui, mais vous les verrez encore dans un certain nombre d'API plus anciennes encore couramment utilis\u00e9es.  </p> <p>Manuel</p> <p>Introduction \u00e0 l'asynchrone en JavaScript </p>"},{"location":"javascript_async/#promesses-promises","title":"Promesses (Promises)","text":"<p>Les promesses sont le nouveau style de code asynchrone que vous verrez utilis\u00e9 dans les API Web modernes.  </p> <p>L'objet Promise (pour \u00ab promesse \u00bb) est utilis\u00e9 pour r\u00e9aliser des traitements de fa\u00e7on asynchrone. Une promesse repr\u00e9sente une valeur qui peut \u00eatre disponible maintenant, dans le futur voire jamais.  </p> <p>Une Promise est dans un de ces \u00e9tats :   </p> <ul> <li>pending (en attente) : \u00e9tat initial, la promesse n'est ni remplie, ni rompue ;  </li> <li>fulfilled (tenue) : l'op\u00e9ration a r\u00e9ussi ;  </li> <li>rejected (rompue) : l'op\u00e9ration a \u00e9chou\u00e9 ;  </li> <li>settled (acquitt\u00e9e) : la promesse est tenue ou rompue mais elle n'est plus en attente.  </li> </ul> <p>Une promesse en attente peut \u00eatre tenue avec une valeur ou rompue avec une raison (erreur). Quand on arrive \u00e0 l'une des deux situations, les gestionnaires associ\u00e9s lors de l'appel de la m\u00e9thode then sont alors appel\u00e9s.</p> <pre><code>graph LR\n  A[Promise] -- fulfill --&gt; B[\"then(onFulfillement)\"];\n  A[Promise] -- reject --&gt; C[\"catch(onRejection)\"];\n  B[\"then(onFulfillement)\"] --&gt; D[async actions];\n  B[\"then(onFulfillement)\"] -- return --&gt; E[Promise];\n  C[\"catch(onRejection)\"] --&gt; F[error handling];\n  C[\"catch(onRejection)\"] -- return --&gt; E[Promise];\n  E[Promise] --&gt; G[\"then() or catch()\"];\n</code></pre>"},{"location":"javascript_async/#gerer-les-operations-asynchrones-avec-elegance-grace-aux-promesses","title":"G\u00e9rer les op\u00e9rations asynchrones avec \u00e9l\u00e9gance gr\u00e2ce aux promesses","text":"<p>Essentiellement, une promesse est un objet qui repr\u00e9sente un \u00e9tat interm\u00e9diaire d'une op\u00e9ration - en fait, c'est une promesse qu'un r\u00e9sultat d'une certaine nature sera retourn\u00e9 \u00e0 un moment donn\u00e9 dans le futur. Il n'y a aucune garantie du moment exact o\u00f9 l'op\u00e9ration se terminera et o\u00f9 le r\u00e9sultat sera renvoy\u00e9, mais il est une garantie que lorsque le r\u00e9sultat est disponible, ou que la promesse \u00e9choue, le code que vous fournissez sera ex\u00e9cut\u00e9 afin de faire autre chose avec un r\u00e9sultat r\u00e9ussi, ou de g\u00e9rer gracieusement un cas d'\u00e9chec.  </p> <p>L'une des utilisations les plus courantes des promesses concerne les API web qui renvoient une promesse.  </p>"},{"location":"javascript_async/#le-probleme-des-fonctions-de-rappel","title":"Le probl\u00e8me des fonctions de rappel","text":"<p>Code d\u00e9sordonn\u00e9 et difficile \u00e0 lire :  </p> callback.ts<pre><code>choisirIngredients(function(ingredients) {\n    placerLaCommande(ingredients, function(commande) {\n        ramasserLaCommande(commande, function(pizza) {\n            mangerLaPizza(pizza);\n        }, gererErreur);\n    }, gererErreur);\n}, gererErreur);\n</code></pre> <p>Am\u00e9lioration avec les promesses :  </p> promise.ts<pre><code>choisirIngredients()\n    .then(function(ingredients) {\n        placerLaCommande(ingredients);\n    })\n    .then(function(commande) {\n        ramasserLaCommande(commande);\n    })\n    .then(function(pizza) {\n        mangerLaPizza(pizza);\n    })\n    .catch(gererErreur);\n</code></pre>"},{"location":"javascript_async/#fonctions-flechees","title":"Fonctions fl\u00e9ch\u00e9es","text":"<p>Une expression de fonction fl\u00e9ch\u00e9e permet d\u2019avoir une syntaxe plus courte que les expressions de fonction. Les fonctions fl\u00e9ch\u00e9es sont souvent anonymes et ne sont pas destin\u00e9es \u00e0 \u00eatre utilis\u00e9es pour d\u00e9clarer des m\u00e9thodes.  </p> promise_arrow.ts<pre><code>choisirIngredients()\n    .then(ingredients =&gt; placerLaCommande(ingredients))\n    .then(commande =&gt; ramasserLaCommande(commande))\n    .then(pizza =&gt; mangerLaPizza(pizza))\n    .catch(gererErreur);\n</code></pre> <p>Manuel</p> <p>Fonctions fl\u00e9ch\u00e9es sur MDN </p>"},{"location":"javascript_async/#async-et-await","title":"async et await","text":"<p>Plus r\u00e9cemment, les fonctions async et le mot-cl\u00e9 await ont \u00e9t\u00e9 ajout\u00e9s au langage JavaScript avec l'\u00e9dition intitul\u00e9e ECMAScript 2017. Ces fonctionnalit\u00e9s agissent essentiellement comme du sucre syntaxique sur les promesses, rendant le code asynchrone plus facile \u00e0 \u00e9crire et \u00e0 lire par la suite. Elles font en sorte que le code asynchrone ressemble davantage au code synchrone de la vieille \u00e9cole, et elles valent donc la peine d'\u00eatre apprises.  </p> <p>Manuel</p> <p>Async Await sur MDN </p> async.ts<pre><code>async function allo() { return \"Bonjour\" };\n</code></pre> <p>Pour consommer r\u00e9ellement la valeur renvoy\u00e9e lorsque la promesse se r\u00e9alise, puisqu'elle renvoie une promesse, nous pourrions utiliser un bloc .then() :  </p> async.ts<pre><code>allo().then((valeur) =&gt; console.log(valeur));\n</code></pre> <p>OU</p> async.ts<pre><code>allo().then(console.log);\n</code></pre> <p>L'avantage d'une fonction asynchrone ne devient apparent que lorsque vous la combinez avec le mot-cl\u00e9 await. await ne fonctionne qu'\u00e0 l'int\u00e9rieur de fonctions asynchrones dans du code JavaScript ordinaire, mais il peut \u00eatre utilis\u00e9 seul avec des modules JavaScript.  </p> <p>Manuel</p> <p>Le mot cl\u00e9 await sur MDN </p> <p>Await peut \u00eatre plac\u00e9 devant toute fonction asynchrone bas\u00e9e sur une promesse pour mettre en pause votre code sur cette ligne jusqu'\u00e0 ce que la promesse se r\u00e9alise, puis retourner la valeur r\u00e9sultante. Vous pouvez utiliser await lors de l'appel de toute fonction qui renvoie une promesse, y compris les fonctions de l'API web.  </p> await.ts<pre><code>async function myFetch() {\n    let response = await fetch('coffee.jpg');\n    if (!response.ok) {\n        throw new Error (`Erreur HTTP ! statut : ${response.status}`);\n    }\n\n    return await response.blob ();\n}\n</code></pre>"},{"location":"javascript_async/#sous-le-capot-de-nodejs","title":"Sous le capot de Node.JS","text":""},{"location":"javascript_async/#execution-de-code-synchrone","title":"Ex\u00e9cution de code synchrone","text":""},{"location":"javascript_async/#execution-de-code-avec-promesse","title":"Ex\u00e9cution de code avec promesse","text":""},{"location":"javascript_async/#execution-de-code-avec-settimeout","title":"Ex\u00e9cution de code avec setTimeout","text":""},{"location":"javascript_async/#ordre-traitement-des-appels-asynchrones","title":"Ordre traitement des appels asynchrones","text":"order.ts<pre><code>console.log('1 - D\u00e9but du script');\n\nsetTimeout(() =&gt; {\n  console.log('2 - setTimeout callback');\n}, 0);\n\nPromise.resolve()\n  .then(() =&gt; {\n    console.log('3 - Promise callback 1');\n  })\n  .then(() =&gt; {\n    console.log('4 - Promise callback 2');\n  });\n\nconsole.log('5 - Fin du script');\n</code></pre>"},{"location":"javascript_async/#solution","title":"Solution","text":""},{"location":"manuels/","title":"Manuels","text":""},{"location":"manuels/#tous-les-manuels-references-dans-le-cours","title":"Tous les manuels r\u00e9f\u00e9renc\u00e9s dans le cours","text":""},{"location":"manuels/#introduction-a-typescript","title":"Introduction \u00e0 TypeScript","text":"<p>Manuel TypeScript What is a tsconfig.json tsconfig reference  ## NPM Documentation de npm js Wikipedia - Article sur npm npm init npm-install Documentation officielle de lodash </p>"},{"location":"manuels/#typescript-2","title":"TypeScript 2","text":"<p>Union dans TypeScript R\u00e9tr\u00e9cir le type - Manuel TypeScript Alias de types - Manuel TypeScript Enums - Manuel TypeScript Interfaces - Manuel TypeScript Generics - Manuel TypeScript </p>"},{"location":"manuels/#intergiciels-express","title":"Intergiciels Express","text":"<p>Morgan - ExpressJS express.json - ExpressJS </p>"},{"location":"manuels/#generateur-express","title":"G\u00e9n\u00e9rateur Express","text":"<p>Installation d'express Express Generator avec TypeScript </p>"},{"location":"manuels/#javascript-asynchrone","title":"JavaScript asynchrone","text":"<p>Concepts de l'asynchrone en JavaScript Documentation MDN pour le JavaScript asynchrone Introduction \u00e0 l'asynchrone en JavaScript Fonctions fl\u00e9ch\u00e9es sur MDN Async Await sur MDN Le mot cl\u00e9 await sur MDN </p>"},{"location":"manuels/#mongodb","title":"MongoDB","text":"<p>MongoDB sur GitHub Vid\u00e9o Youtube MongoDB et Promises Driver Quickstart </p>"},{"location":"manuels/#introduction-a-mongoose","title":"Introduction \u00e0 Mongoose","text":"<p>Site officiel de Mongoose Documentation de Mongoose Option strict par d\u00e9faut </p>"},{"location":"manuels/#mongoose-la-suite","title":"Mongoose - La suite","text":"<p>Mongoose - Validations Mongoose - Messages d'erreur personnalis\u00e9s Guide - Virtuals Tutoriel - Virtuals Mongoose - Aggregate MDN - PUT MDN - PATCH </p>"},{"location":"manuels/#introduction-a-react","title":"Introduction \u00e0 React","text":"<p>Documentation officielle Vite Learn React Props useState useEffect </p>"},{"location":"manuels/#styles-react-et-mui","title":"Styles : React et MUI","text":"<p>Material UI - Installation Material UI - Theming Material UI - Button - CSS </p>"},{"location":"manuels/#styles-react-tailwindcss","title":"Styles : React - TailwindCSS","text":"<p>Documentation officielle Tailwind CSS Feuille de triche TailwindCSS</p>"},{"location":"manuels/#router-useparams-usecontext-et-api","title":"Router - useParams - useContext et API","text":"<p>React Router BrowserRouter Route - Documentation useContext - Documentation Axios - Documentation </p>"},{"location":"manuels/#regles-de-react","title":"R\u00e8gles de R\u00e9act","text":"<p>Rules of React</p>"},{"location":"manuels/#internationalisation","title":"Internationalisation","text":"<p>React-intl FormattedMessage Format des messages FormattedDate FormattedTime FormattedNumber </p>"},{"location":"manuels/#pwa","title":"PWA","text":"<p>MDN - Progressive Web Apps Stats et nouvelles sur PWA Web.dev - Apprendre sur PWA Guide pour le plugiciel PWA </p>"},{"location":"manuels/#accessibilite","title":"Accessibilit\u00e9","text":"<p>Liste des r\u00f4les ARIA </p>"},{"location":"manuels/#deploiement-avec-netlify","title":"D\u00e9ploiement avec Netlify","text":"<p>Documentation Netlify </p>"},{"location":"module_deprecie/","title":"Module d\u00e9pr\u00e9ci\u00e9","text":""},{"location":"module_deprecie/#marche-a-suivre-pour-reparer-un-projet-node-avec-inflight-qui-est-deprecie","title":"Marche \u00e0 suivre pour r\u00e9parer un projet node avec inflight qui est d\u00e9pr\u00e9ci\u00e9","text":"<p>Si vous avez un message d'erreur du genre : </p> <pre><code>npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.\nnpm warn deprecated @humanwhocodes/config-array@0.11.14: Use @eslint/config-array instead\nnpm warn deprecated rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported\nnpm warn deprecated @humanwhocodes/object-schema@2.0.3: Use @eslint/object-schema instead\nnpm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported\n</code></pre> <p>Il est possible de r\u00e9parer le projet en ajoutant ceci dans <code>package.json</code>  :</p> <pre><code>  \"overrides\": {\n    \"eslint\": {\n      \"@humanwhocodes/config-array\": \"npm:@eslint/config-array\",\n      \"file-entry-cache\": \"^8.0.0\"\n    }\n  }\n</code></pre> <p>Ensuite, il faut effacer le fichier <code>package-lock.json</code>, le dossier <code>node_modules</code> et le r\u00e9installer avec <code>npm install</code>.</p> <p>Cela devrait r\u00e9parer le probl\u00e8me.</p>"},{"location":"mongodb/","title":"MongoDB","text":""},{"location":"mongodb/#mongodb-node-driver","title":"MongoDB Node Driver","text":"<p>Le pilote officiel MongoDB Node.js permet aux applications Node.js de se connecter \u00e0 MongoDB et de travailler avec des donn\u00e9es. Le pilote dispose d'une API asynchrone qui vous permet d'acc\u00e9der aux valeurs de retour de m\u00e9thode via Promises ou de sp\u00e9cifier des rappels pour y acc\u00e9der lors de la communication avec MongoDB. (Traduction du site officiel)  </p> <p>Manuel</p> <p>MongoDB sur GitHub Vid\u00e9o Youtube MongoDB et Promises Driver Quickstart </p>"},{"location":"mongodb/#etape-1-ajout-du-module-mongodb","title":"\u00c9tape 1 - Ajout du module mongodb","text":"<ol> <li>Cr\u00e9ez un nouveau projet Node  </li> <li>L\u2019initialiser  </li> <li> <p>Ajoutez le module mongodb :  </p> console<pre><code>npm install mongodb\n</code></pre> </li> <li> <p>Importer le module dans le repo appropri\u00e9 : </p> repo.ts<pre><code>import { MongoClient } from 'mongodb';\n</code></pre> </li> </ol>"},{"location":"mongodb/#etape-2-etablissement-de-la-connexion","title":"\u00c9tape 2 \u2013 \u00c9tablissement de la connexion","text":"D\u00e9cortiquer une cha\u00eene de connection MongoDB mongodb.ts<pre><code>// connexion distante\nconst uri = \"mongodb+srv://sample-hostname:27017/?poolSize=20&amp;writeConcern=majority\";\n\n// connexion locale\nconst uri = \"mongodb://localhost:&lt;port&gt;\"\n</code></pre>"},{"location":"mongodb/#etape-3-executer-vos-requetes","title":"\u00c9tape 3 \u2013 Ex\u00e9cuter vos requ\u00eates","text":"<p>Exemple : Utilisation dans une application Node.js (sans Express)  </p> connexion.ts<pre><code>import\u00a0{\u00a0MongoClient\u00a0}\u00a0from \"mongodb\";\n//\u00a0Replace\u00a0the\u00a0uri\u00a0string\u00a0with\u00a0your\u00a0MongoDB\u00a0deployment's\u00a0connection\u00a0string.\nconst\u00a0uri\u00a0=\u00a0\"mongodb+srv://&lt;user&gt;:&lt;password&gt;@&lt;cluster-url&gt;?retryWrites=true&amp;writeConcern=majority\";\nconst\u00a0client\u00a0=\u00a0new\u00a0MongoClient(uri);\nasync\u00a0function\u00a0run()\u00a0{\n\u00a0\u00a0try\u00a0{\n\u00a0\u00a0\u00a0\u00a0await\u00a0client.connect();\n\u00a0\u00a0\u00a0\u00a0const\u00a0database\u00a0=\u00a0client.db('sample_mflix');\n\u00a0\u00a0\u00a0\u00a0const\u00a0movies\u00a0=\u00a0database.collection('movies');\n\u00a0\u00a0\u00a0\u00a0//\u00a0Query\u00a0for\u00a0a\u00a0movie\u00a0that\u00a0has\u00a0the\u00a0title\u00a0'Back\u00a0to\u00a0the\u00a0Future'\n\u00a0\u00a0\u00a0\u00a0const\u00a0query\u00a0=\u00a0{\u00a0title:\u00a0'Back\u00a0to\u00a0the\u00a0Future'\u00a0};\n\u00a0\u00a0\u00a0\u00a0const\u00a0movie\u00a0=\u00a0await\u00a0movies.findOne(query);\n\u00a0\u00a0\u00a0\u00a0console.log(movie);\n\u00a0\u00a0}\u00a0finally\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0Ensures\u00a0that\u00a0the\u00a0client\u00a0will\u00a0close\u00a0when\u00a0you\u00a0finish/error\n\u00a0\u00a0\u00a0\u00a0await\u00a0client.close();\n\u00a0\u00a0}\n}\nrun().catch(console.dir);\n</code></pre>"},{"location":"mongodb/#exemples-dutilisation","title":"Exemples d'utilisation","text":"<ul> <li>Exemples </li> <li>findOne </li> <li>find </li> <li>InsertOne </li> <li>UpdateOne </li> <li>DeleteOne </li> <li>Aggregation </li> </ul>"},{"location":"mongodb/#mongodb-cursor","title":"MongoDB cursor","text":"<p>Lorsque la requ\u00eate retourne plusieurs r\u00e9sultats, ceux-ci sont retourn\u00e9s dans un curseur </p> <p>Les fonctions suivantes retournent un curseur :   </p> <ul> <li>Collection.find() </li> <li>Collection.aggregate()    </li> <li>Collection.listIndexes()</li> <li>Db.listCollections()   </li> <li>Db.aggregate()  </li> </ul> <p>Voici deux fa\u00e7ons de parcourir un curseur :   </p> En impl\u00e9mentant l\u2019interface AsyncIteratorEn utilisant l\u2019it\u00e9ration \u00ab\u00a0manuelle\u00a0\u00bb asynciterator.ts<pre><code>const cursor = collection.find({});\nconsole.log(\"async 1\");\n\nfor await (const doc of cursor) {\n\u00a0 console.log(doc);\n}\nconsole.log(\"async 2\");\n</code></pre> manuelle.ts<pre><code>const cursor = collection.find({});\n\nwhile (await cursor.hasNext()) {\n\u00a0 console.log(await cursor.next());\n}\n</code></pre> <p>La m\u00e9thode toArray() permet d\u2019obtenir un tableau \u00e0 partir des documents d\u2019un curseur. Cursor.toArray() </p> <p>Note</p> <p>Les bases de donn\u00e9es utilis\u00e9es dans cette le\u00e7on proviennent de ce d\u00e9p\u00f4t GitHub </p>"},{"location":"mongoose2/","title":"Mongoose - La suite","text":""},{"location":"mongoose2/#mongoose-la-suite","title":"Mongoose - La suite","text":""},{"location":"mongoose2/#schema","title":"Sch\u00e9ma","text":"<ul> <li>Sch\u00e9ma : Permet de d\u00e9finir la structure du document attendu  </li> <li>SchemaTypes : Permet de d\u00e9finir le type des propri\u00e9t\u00e9s   </li> <li>Mod\u00e8les : Constructeurs \u00e9labor\u00e9s \u00e0 partir d\u2019un sch\u00e9ma  </li> <li>Documents : Instance d\u2019un mod\u00e8le  </li> <li>SubDocuments : Documents imbriqu\u00e9s  </li> </ul> <p>Lors le sch\u00e9ma attendu contient des propri\u00e9t\u00e9s imbriqu\u00e9es, il est possible de d\u00e9finir le sch\u00e9ma de 2 fa\u00e7ons diff\u00e9rentes :  </p> Imbriqu\u00e92 d\u00e9clarations imbrique.ts<pre><code>const parentSchema = new Schema({ \nchildren: [{ name: 'string' }], \nchild: { name: 'string' }\n}); \n</code></pre> deux_declarations.ts<pre><code>const childSchema = new Schema({ name: 'string' });\n\nconst parentSchema = new Schema({ \n    // Array of subdocuments \n    children: [childSchema], \n    // Single nested subdocuments. Caveat: \n    // single nested subdocs only work \n    // in mongoose &gt;= 4.2.0 \n    child: childSchema\n}); \n</code></pre> <p>Note</p> <p>Il est aussi possible de d\u00e9finir les sch\u00e9mas dans des fichiers distincts.\u00a0</p>"},{"location":"mongoose2/#options-de-schemas","title":"Options de sch\u00e9mas","text":"<p>Plusieurs options sont disponibles lors de l\u2019\u00e9tablissement du Sch\u00e9ma : Guide - Options </p> <p>Voici les principales \u00e0 conna\u00eetre :  </p> <ul> <li>collection : Passe par d\u00e9faut le nom du mod\u00e8le. Il est possible de le red\u00e9finir au besoin.  </li> <li>_id : La propri\u00e9t\u00e9 _id est g\u00e9r\u00e9e automatiquement par Mongoose. Il est possible de modifier l\u2019_id par d\u00e9faut dans des situations particuli\u00e8res seulement.  </li> <li>strict : Il est possible de faire une validation moins stricte d\u2019un document lors de l\u2019ajout et l\u2019\u00e9dition.  </li> </ul> <p>Note</p> <p>Any key/val set on the instance that does not exist in your schema is always ignored, regardless of schema option.</p>"},{"location":"mongoose2/#validations-avancees","title":"Validations avanc\u00e9es","text":"<p>Mongoose offre plusieurs validations de base :  </p> <ul> <li>Champs requis  </li> <li>Type  </li> <li>Longueur  </li> <li>Min, Max  </li> </ul> <p>Il est cependant possible d\u2019ajouter une multitude de validations suppl\u00e9mentaires. Par exemple :  - Longueur minimale d\u2019un tableau - \u00c9num\u00e9ration des valeurs possibles - Validations de cha\u00eenes de caract\u00e8res (String-validators)  - Validations personnalis\u00e9es  </p>"},{"location":"mongoose2/#exemples-de-validation-personnalisees","title":"Exemples de validation personnalis\u00e9es","text":"model.ts<pre><code>const ArtisteSchema = new Schema&lt;IArtiste&gt;({\n  nom: {\n    type: String,\n    required: true,\n    maxLength: [250, 'La longueur du nom ne doit pas d\u00e9passer 250'],\n  },\n  telephone: {\n    type: String,\n    validate: {\n      validator: function (v) {\n        return /\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d/.test(v);\n      },\n      message: 'Le num\u00e9ro de t\u00e9l\u00e9phone doit \u00eatre valide (999-999-9999)',\n    },\n  },\n});\n\nconst ChansonSchema = new Schema&lt;IChanson&gt;({\n  artistes: {\n    type: [ArtisteSchema],\n    validate: {\n      validator: function (v) {\n        return v.length &gt; 0;\n      },\n      message: 'Il doit y avoir au moins un artiste dans la chanson',\n    },\n  },\n  titre: { type: String, required: [true, 'Le titre est obligatoire'] },\n  duree: { type: String },\n});\n</code></pre> <p>Manuel</p> <p>Mongoose - Validations </p>"},{"location":"mongoose2/#messages-personnalises","title":"Messages personnalis\u00e9s","text":"<p>Mongoose va produire des messages par d\u00e9faut.  </p> <p>Il est aussi possible de les red\u00e9finir.  </p> <p>Manuel</p> <p>Mongoose - Messages d'erreur personnalis\u00e9s </p>"},{"location":"mongoose2/#virtual","title":"Virtual","text":"<p>Virtuals : propri\u00e9t\u00e9s pouvant \u00eatre utilis\u00e9es dans votre sch\u00e9ma mais qui ne sont pas conserv\u00e9es dans la base de donn\u00e9es.  </p> <p>Les getters sont souvent utilis\u00e9s pour combiner plusieurs propri\u00e9t\u00e9s. Les setters sont souvent utilis\u00e9s pour d\u00e9composer une valeur en plus petites.   </p> <p>Exemples :  </p> get_seulement.ts<pre><code>personSchema.virtual('fullName').get(function() { \n  return this.name.first + ' ' + this.name.last; \n}); \n</code></pre> get_et_set.ts<pre><code>personSchema.virtual('fullName'). \n  get(function() { \n    return this.name.first + ' ' + this.name.last; \n  }). \n  set(function(v) { \n    this.name.first = v.substr(0, v.indexOf(' ')); \n    this.name.last = v.substr(v.indexOf(' ') + 1); \n  }); \n</code></pre> <p>Manuel</p> <p>Guide - Virtuals Tutoriel - Virtuals </p>"},{"location":"mongoose2/#aggregation","title":"Aggr\u00e9gation","text":"<p>La biblioth\u00e8que Mongoose permet \u00e9galement de transformer des documents \u00e0 l\u2019aide de la m\u00e9thode aggregate : </p> aggregations.ts<pre><code>try\u00a0{\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0const\u00a0personnes\u00a0=\u00a0await\u00a0Personne.aggregate([\n\u00a0\u00a0\u00a0\u00a0{\"$match\":\u00a0{\"isActive\":\u00a0true}},\u00a0\n\u00a0\u00a0\u00a0\u00a0{\"$group\":\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \"_id\":\"$eyeColor\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"moyenneAge\":\u00a0{\"$avg\":\u00a0\"$age\"}\n\u00a0\u00a0\u00a0\u00a0  }\n\u00a0\u00a0\u00a0\u00a0},\u00a0\n\u00a0\u00a0\u00a0\u00a0{\"$sort\":\u00a0{\"moyenneAge\":\u00a01}}\n\u00a0\u00a0]);\n\u00a0\u00a0res.json(personnes);\n}\u00a0\n</code></pre> <p>Manuel</p> <p>Mongoose - Aggregate </p>"},{"location":"mongoose2/#rest-put","title":"REST \u2013 PUT","text":"<p>La m\u00e9thode HTTP PUT cr\u00e9e une nouvelle ressource ou remplace une repr\u00e9sentation de la ressource cibl\u00e9e par le contenu de la requ\u00eate.  </p> <p>La diff\u00e9rence entre PUT et POST tient au fait que PUT est une m\u00e9thode idempotente. Une requ\u00eate PUT, envoy\u00e9e une ou plusieurs fois avec succ\u00e8s, aura toujours le m\u00eame effet (il n'y a pas d'effet de bord). \u00c0 l'inverse, des requ\u00eates POST successives et identiques peuvent avoir des effets additionnels, ce qui peut revenir par exemple \u00e0 passer plusieurs fois une commande.  </p> <p>Manuel</p> <p>MDN - PUT </p> Expression Valeur La requ\u00eate a un corps de message (body) Oui Une requ\u00eate trait\u00e9e avec succ\u00e8s retourne une r\u00e9ponse avec un corps de message (body) Non S\u00fbre Non Idempotente Oui Peut \u00eatre mise en cache Non Autoris\u00e9e dans les formulaires HTML Non"},{"location":"mongoose2/#rest-patch","title":"REST - PATCH","text":"<p>La m\u00e9thode PATCH d'une requ\u00eate HTTP applique des modifications partielles \u00e0 une ressource.  </p> <p>La m\u00e9thode HTTP PUT est d\u00e9j\u00e0 d\u00e9finie pour \u00e9craser une ressource avec un nouveau corps complet de message, et pour la m\u00e9thode HTTP POST, il n'existe aucun moyen standard pour d\u00e9couvrir le support de format de patch. Tout comme POST, la m\u00e9thode HTTP PATCH n'est pas list\u00e9e comme \u00e9tant idempotent, contrairement \u00e0 PUT. Cela signifie que les requ\u00eates patch identiques et successives auront des effets diff\u00e9rents sur l'objet manipul\u00e9.  </p> <p>Manuel</p> <p>MDN - PATCH </p> Expression Valeur La requ\u00eate a un corps de message (body) Oui Une requ\u00eate trait\u00e9e avec succ\u00e8s retourne une r\u00e9ponse avec un corps de message (body) Non S\u00fbre Non Idempotente Non Peut \u00eatre mise en cache Non Autoris\u00e9e dans les formulaires HTML Non"},{"location":"netlify/","title":"D\u00e9ploiement avec Netlify","text":""},{"location":"netlify/#deploiements","title":"D\u00e9ploiements","text":""},{"location":"netlify/#quest-ce-que-netlify","title":"Qu'est-ce que Netlify","text":"<p>Netlify est une plateforme de d\u00e9ploiement web et d'h\u00e9bergement de sites statiques. Elle permet aux d\u00e9veloppeurs de cr\u00e9er, d\u00e9ployer et g\u00e9rer des sites web rapidement et facilement. Netlify simplifie le processus de d\u00e9ploiement en int\u00e9grant des fonctionnalit\u00e9s telles que le d\u00e9ploiement continu, l'int\u00e9gration Git, les performances optimis\u00e9es, la gestion des domaines et des certificats SSL, ainsi que d'autres outils de d\u00e9veloppement.  </p> <p>Voici quelques caract\u00e9ristiques cl\u00e9s de Netlify :  </p> <ul> <li>D\u00e9ploiement continu : Netlify offre un d\u00e9ploiement automatique \u00e0 chaque fois que vous poussez du code vers un r\u00e9f\u00e9rentiel Git. Cela signifie que d\u00e8s que vous effectuez des modifications dans votre code source, votre site sera automatiquement reconstruit et d\u00e9ploy\u00e9.  </li> <li>H\u00e9bergement statique : Netlify est principalement con\u00e7u pour les sites web statiques, ce qui signifie que vos fichiers HTML, CSS, JavaScript et autres m\u00e9dias sont pr\u00e9construits et livr\u00e9s aux utilisateurs tels quels, sans n\u00e9cessiter de traitement c\u00f4t\u00e9 serveur.  </li> <li>Optimisation des performances : Netlify propose des fonctionnalit\u00e9s telles que la mise en cache globale, la compression des images et des fichiers, ainsi que la distribution de contenu via un r\u00e9seau de diffusion de contenu (CDN), ce qui am\u00e9liore la vitesse de chargement et l'exp\u00e9rience utilisateur.  </li> <li>Gestion des domaines et des certificats SSL : Netlify permet d'associer facilement des noms de domaine personnalis\u00e9s \u00e0 vos sites et fournit des certificats SSL gratuits pour assurer des connexions s\u00e9curis\u00e9es. Fonctionnalit\u00e9s de formulaire : Netlify propose \u00e9galement des fonctionnalit\u00e9s de formulaire qui vous permettent de g\u00e9rer les soumissions de formulaires sans n\u00e9cessiter d'application dorsale personnalis\u00e9e.  </li> <li>Fonctions serverless : Netlify prend \u00e9galement en charge les fonctions serverless, ce qui vous permet d'ajouter des fonctionnalit\u00e9s dynamiques \u00e0 votre site statique sans avoir \u00e0 g\u00e9rer une infrastructure serveur. Int\u00e9grations tierces : Netlify peut \u00eatre int\u00e9gr\u00e9 \u00e0 divers services tiers tels que GitHub, GitLab, Bitbucket, et d'autres outils de d\u00e9veloppement.  </li> </ul> <p>En r\u00e9sum\u00e9, Netlify facilite le processus de cr\u00e9ation, de d\u00e9ploiement et de gestion de sites web statiques en offrant une gamme d'outils et de fonctionnalit\u00e9s pour les d\u00e9veloppeurs.</p> <p>Manuel</p> <p>Documentation Netlify </p>"},{"location":"netlify/#etapes-de-deploiement-de-lapplication-dorsale-avec-netlify","title":"\u00c9tapes de d\u00e9ploiement de l'application dorsale avec Netlify","text":"<p>Netlify peut ex\u00e9cuter votre API node.js \u00e0 l'aide de la fonctionnalit\u00e9 serverless.  Voici les \u00e9tapes pour d\u00e9ployer votre application dorsale.  </p> <ol> <li> <p>installer les modules serverless-http et Netlify Functions :  </p> console<pre><code>npm i serverless-http @netlify/functions  \n</code></pre> </li> <li> <p>installer le module netlify-cli en dev :  </p> console<pre><code>npm i netlify-cli --save-dev\n</code></pre> </li> <li> <p>D\u00e9corer l\u2019objet app avec un appel \u00e0 serverless dans un nouveau fichier. Permet d\u2019exposer vos routes \u00e0 Netlify.  Mettre le nouveau fichier dans le dossier /functions (\u00e0 la racine du projet).  </p> functions/api.ts<pre><code>/**\n * Point d'entr\u00e9e pour les fonctions de Netlify\n */\n\nimport { app } from \"../src/app\";\n\nimport dotenv from 'dotenv';\n\nimport serverless from 'serverless-http';\n\n// *** Variables d'environnement ***\n\ndotenv.config();\n\n// *** Le handler requis par Netlify **\nexport const handler = serverless(app);\n</code></pre> </li> <li> <p>Cr\u00e9er un fichier de configuration pour netlify  </p> netlify.toml<pre><code>[build]\ncommand = \"npm install &amp;&amp; npm run build\"\nfunctions = \"functions\"\n[functions]\nexternal_node_modules = [\"express\"]\nincluded_files=[\"./functions/database.json\"]\nnode_bundler = \"esbuild\"\n[[redirects]]\nforce = true\nfrom = \"/api/*\"\nstatus = 200\nto = \"/.netlify/functions/api/:splat\"\n[[redirects]]\nforce = true\nfrom = \"/images/*\"\nstatus = 200\nto = \"/public/images/:splat\"\n</code></pre> <p>Le redirects sert \u00e0 recevoir les requ\u00eates du style https://monbackend/api/x et le rediriger vers /.netlify functions/api/x (la fa\u00e7on interne de Netlify pour exposer les fonctions de l'application dorsale).  </p> </li> <li> <p>Git push de votre projet et cr\u00e9ation du d\u00e9ploiement Netlify  </p> <p> Dans Netlify, importer de git </p> <p> Dans Netlify, d\u00e9ployer le site </p> </li> <li> <p>Ajoutez vos variables d\u2019environnement  </p> <p> Dans Netlify, ajouter vos variables d'environnement </p> </li> <li> <p>Si vous utilisez MongoDB Atlas, permettez la connection par n\u2019importe quelle adresse IP  </p> <p> Dans Atlas, permettez \u00e0 0.0.0.0 de se connecter </p> </li> </ol>"},{"location":"netlify/#procedures","title":"Proc\u00e9dures","text":"<p>Veuillez consulter la proc\u00e9dure suivante pour plus d'informations sur le d\u00e9ploiement de la documentation API sur Netlify : Rendre la documentation disponible pour l'api</p>"},{"location":"netlify/#deploiement-dune-application-react","title":"D\u00e9ploiement d'une application React","text":"<ol> <li> <p>Pousser votre site sur github.  </p> </li> <li> <p>Dans netlify, choisissez votre d\u00e9p\u00f4t github :  </p> <p> choisissez votre d\u00e9p\u00f4t github </p> </li> <li> <p>Dans netlify, d\u00e9ployez votre site :  </p> <p> D\u00e9ployez votre site </p> </li> <li> <p>Voir si le d\u00e9ploiement est r\u00e9ussi :  </p> <p> D\u00e9ploiement r\u00e9ussi </p> </li> </ol>"},{"location":"npm/","title":"NPM","text":""},{"location":"npm/#npm","title":"NPM","text":"<p>Npm est le gestionnaire de paquets (modules) officiel de Node.js.  Celui-ci permet d\u2019ajouter des modules externes dans une application Node.js Depuis la version 0.6.3 de Node.js, npm fait partie de l'environnement et est donc automatiquement install\u00e9 par d\u00e9faut.  npm fonctionne avec un terminal et g\u00e8re les d\u00e9pendances pour une application. Il permet \u00e9galement d'installer des applications Node.js disponibles sur le d\u00e9p\u00f4t npm.</p> <p>Manuel</p> <p>Documentation de npm js Wikipedia - Article sur npm </p>"},{"location":"npm/#npm-init","title":"npm init","text":"<p>La commande npm init permet d\u2019initialiser un projet Node.js dans le but de g\u00e9rer les modules associ\u00e9s au projet. </p> console<pre><code>npm init\n</code></pre> <p>Cette commande cr\u00e9e un fichier nomm\u00e9 package.json qui contiendra les configurations du projet ainsi que la liste des divers modules n\u00e9cessaires pour son bon fonctionnement. Cette commande devrait toujours \u00eatre ex\u00e9cut\u00e9e avant de proc\u00e9der \u00e0 l\u2019installation de modules. </p> <p>Manuel</p> <p>npm init </p> packages.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@types/node\": \"^16.18.32\",\n    \"typescript\": \"^4.9.5\",\n    \"web-vitals\": \"^2.1.4\"\n  }\n}\n</code></pre>"},{"location":"npm/#npm-install","title":"npm install","text":"<p>La commande npm install permet d\u2019installer des modules dans un projet. Lors de l\u2019ajout d\u2019un premier module au projet, le dossier node_modules est automatiquement cr\u00e9\u00e9.  Pour installer un module dans un projet :</p> console<pre><code>npm install nomModule\n</code></pre> <p>Pour chaque installation de module : Un sous-dossier au nom du module est cr\u00e9\u00e9. Toutes les d\u00e9pendances sont \u00e9galement charg\u00e9es. Le module et ses d\u00e9pendances sont ajout\u00e9es dans le fichier package.json </p> <p>Partage et D\u00e9ploiement : Lorsqu\u2019on partage un projet, on ne fournit g\u00e9n\u00e9ralement pas le dossier node_modules car sa taille peut devenir relativement \u00e9lev\u00e9e et les versions de Node.js ne sont pas n\u00e9cessairement les m\u00eames.  La commande npm install (sans pr\u00e9ciser le nom du module) permet d\u2019installer automatiquement tous les modules manquants (npm se fie au fichier package.json pour identifier les modules \u00e0 installer)</p>"},{"location":"npm/#les-options","title":"Les options","text":"<p>Lors de l\u2019installation de modules, je recommande toujours d\u2019utiliser la commande disponible dans la proc\u00e9dure d\u2019installation du module.  Parfois, certaines options sont n\u00e9cessaires.  </p> <p>Manuel</p> <p>npm-install </p> <p>Les plus courantes :  </p> <ul> <li>--save ou -S : Ajoute le module \u00e0 la liste de d\u00e9pendances dans le fichier package.json. Cette option n\u2019est plus n\u00e9cessaire depuis la version npm 5.0.0, les modules \u00e9tant ajout\u00e9s par d\u00e9faut \u00e0 la liste de d\u00e9pendances. Vous verrez cependant r\u00e9guli\u00e8rement cette option dans les proc\u00e9dures d\u2019installation de modules officiels.  </li> <li>--global ou -g : Ajoute le module globalement sur votre PC. Je recommande peu cette option \u00e0 moins que le module ne soit pas implicitement impliqu\u00e9 dans le projet. npm global (If you are using npm 5.2 or higher, we recommend using\u00a0npx\u00a0to run packages globally).  </li> </ul>"},{"location":"npm/#npm-install-save-dev","title":"npm install --save-dev","text":"<p>Dans votre d\u00e9veloppement, c\u2019est possible que vous utilisiez des modules seulement pour aider le d\u00e9veloppement, mais qui ne sont pas n\u00e9cessaires en production.</p> <p>Dans ce cas, il faut utiliser npm install avec l\u2019option --save-dev.  </p> <p>Ex :   </p> console<pre><code>npm install nodemon --save-dev\n</code></pre> <p>Dans packages.json \u00e7a donne :  </p> packages.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@types/node\": \"^16.18.32\",\n    \"typescript\": \"^4.9.5\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.22\"\n  }\n}\n</code></pre>"},{"location":"npm/#module-daide-au-developpement-nodemon","title":"Module d\u2019aide au d\u00e9veloppement \u2013 nodemon","text":"<p>Module qui observe les fichiers de votre projet et qui red\u00e9marre le programme automatiquement.</p> <p>Pour faciliter l\u2019utilisation de nodemon, ajouter un script dans packages.json : </p> packages.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@types/node\": \"^16.18.32\",\n    \"typescript\": \"^4.9.5\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n   \"scripts\": {\n    \"start\": \"nodemon fichier.js\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.22\"\n  }\n}\n</code></pre> <p>Pour ex\u00e9cuter votre programme, il suffit de faire la commande :</p> console<pre><code>npm start\n</code></pre>"},{"location":"npm/#nodemon-vs-node-watch","title":"nodemon vs node --watch","text":"<p>Les versions modernes de node.js (&gt;18) ont les fonctionnalit\u00e9s de base de <code>nodemon</code>. Il suffit de faire la commande suivante :</p> <pre><code>node --watch programme.js\n</code></pre> <p>Le seul avantage de <code>nodemon</code> est la possibilit\u00e9 de red\u00e9marrer le programme avec la commande <code>rs</code>.</p>"},{"location":"npm/#module-daide-au-developpement-concurrently","title":"Module d\u2019aide au d\u00e9veloppement \u2013 concurrently","text":"<p>Module qui permet d\u2019ex\u00e9cuter plusieurs commandes en m\u00eame temps. Utile pour rouler tsc et nodemon en m\u00eame temps.  </p> <p>Pour installer concurrently : </p> console<pre><code>npm install concurrently --save-dev  \n</code></pre> <p>Pour que tsc compile automatiquement votre code, utiliser la commande :  </p> console<pre><code>tsc \u2013watch   \n</code></pre> <p>Donc, pour compiler et ex\u00e9cuter en m\u00eame temps, \u00e9crire le script suivant dans package.json :</p> packages.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@types/node\": \"^16.18.32\",\n    \"typescript\": \"^4.9.5\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n   \"scripts\": {\n    \"start\": \"nodemon fichier.js\",\n    \"dev\": \"concurrently \\\"tsc --watch\\\" \\\"nodemon -q ./dist/serveur.js\\\"\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.22\"\n  }\n}\n</code></pre>"},{"location":"npm/#module-dotenv","title":"Module dotenv","text":"<p>\u00c0 partir de node 20.6.0, il est possible de cr\u00e9er un fichier .env pour y mettre les param\u00e8tres de votre application.</p> <p>Param\u00e9trer votre application directement dans le code est imprudent. Des informations confidentielles peuvent se retrouver dans votre repo GitHub \u00e0 la vue de tout le monde, ex :  </p> a_ne_pas_faire.ts<pre><code>const cleAPI = \"FKSDKLJFKDSKLJF898FSDKJKSD898F9DSKLFDSKFSD\";\nconst utilisateurBD = \"admin\";\nconst motDePasse=\"password\";\n</code></pre> <p>Fichier contenant les param\u00e8tres : .env  </p> .env<pre><code>cleAPI=\"FKSDKLJFKDSKLJF898FSDKJKSD898F9DSKLFDSKFSD\"\nutilisateurBD=\"admin\"\nmotDePasse=\"password\"\n</code></pre> <p>Utilisation dans le code :  </p> a_faire.ts<pre><code>const cleAPI = process.env.cleAPI;\nconsole.log(cleAPI);\n</code></pre> console<pre><code>node --env-file=.env a_faire.js\n</code></pre>"},{"location":"npm/#npm-mise-a-jour","title":"npm \u2013 mise \u00e0 jour","text":"<p>Commande pour mettre \u00e0 jour les modules de votre application :  </p> console<pre><code>npm update [-g] [&lt;pkg&gt;...]\n</code></pre> <p> </p> Versions de modules NPM packages.json<pre><code>\"dependencies\": {\n\u00a0\u00a0\u00a0\u00a0\"markdown\": \"0.3.5\" // Version 0.3.5 uniquement\n}\n\"dependencies\": {\n\u00a0\u00a0\u00a0\u00a0\"markdown\": \"~0.3.5\" // OK pour les versions 0.3.5, 0.3.6, 0.3.7, etc. jusqu'\u00e0 la version 0.4.0 non incluse\n}\n\"dependencies\": {\n\u00a0\u00a0\u00a0\u00a0\"markdown\": \"~0.3\" // OK pour les versions 0.3.X, 0.4.X, 0.5.X jusqu'\u00e0 la version 1.0.0 non incluse\n}\n</code></pre>"},{"location":"npm/#es6-et-commonjs","title":"ES6 et CommonJS","text":"<p>Node.js est b\u00e2tie sur le moteur V8. La version ECMAScript 2016 n\u2019est pas encore totalement support\u00e9e: Node.js vs ES6 Pour plus d\u2019information : Node Green Pour ces raisons, TypeScript doit compiler en ES6 pour assurer la plus grande compatibilit\u00e9 avec Node.  </p>"},{"location":"npm/#npm-publier","title":"npm - Publier","text":"<p>Toute personne ayant un compte npm peut publier un module La proc\u00e9dure est d\u00e9taill\u00e9e dans la documentation officielle npm : Publishing </p>"},{"location":"npm/#npm-securite","title":"npm - S\u00e9curit\u00e9","text":"<p>Il importe de faire attention lors de l\u2019ajout d\u2019un module. Il faut s\u2019assurer que le module est s\u00e9curitaire.  </p> <ul> <li>Article Medium </li> <li>Article ZDNet </li> <li>Article ICHI </li> <li>Info sur le GitHub de Node.js </li> <li>Article Developpez.com </li> </ul>"},{"location":"npm/#gitignore-vs-node-et-env","title":".gitignore vs node et .env","text":"<p>Il est essentiel de ne pas envoyer dans votre d\u00e9p\u00f4t git le dossier node_modules, ajoutez cette ligne dans .gitignore :  </p> .gitignore<pre><code>**/node_modules\n</code></pre> <p>De plus, il ne faut pas envoyer votre fichier de configuration :  </p> .gitignore<pre><code>.env  \n</code></pre> <p>Enfin, ne pas envoyer les fichiers JavaScripts compil\u00e9s de TypeScript :  </p> .gitignore<pre><code>dist/  \n</code></pre>"},{"location":"npm/#module-lodash-_","title":"Module Lodash (_)","text":"<p>Le module Lodash (pour low dash ou en fran\u00e7ais : soulign\u00e9) impl\u00e9mente des fonctions communes fr\u00e9quemment utilis\u00e9es par les programmeurs :  </p> <ul> <li>It\u00e9rer \u00e0 travers des tableaux, des objets et des cha\u00eenes de caract\u00e8res  </li> <li>Manipuler et tester des valeurs  </li> </ul> <p>Pour l\u2019installer :  </p> console<pre><code>npm install lodash\n</code></pre> <p>Pour la compatibilit\u00e9 Typescript :</p> console<pre><code>npm install @types/lodash  \n</code></pre> <p>Pour l\u2019utiliser :  </p> code.ts<pre><code>import _ from 'lodash';  \n</code></pre> <p>Manuel</p> <p>Documentation officielle de lodash </p>"},{"location":"penser_en_react/","title":"Penser en React","text":""},{"location":"penser_en_react/#penser-en-react","title":"Penser en React","text":""},{"location":"penser_en_react/#introduction","title":"Introduction","text":"<p>Pour bien d\u00e9buter une application en React, il est recommand\u00e9 de d\u00e9buter par une maquette froide de l'application. Cela permet de visualiser l'ensemble des composants n\u00e9cessaires \u00e0 la r\u00e9alisation de l'application.</p> <p> </p> Mockup d'une application simple"},{"location":"penser_en_react/#etape-1-decouper-en-composants","title":"\u00c9tape 1 : D\u00e9couper en composants","text":"<p>Pour d\u00e9couper l'application en composants, il est recommand\u00e9 de suivre les \u00e9tapes suivantes :</p> <ol> <li>Identifier les composants r\u00e9utilisables</li> <li>D\u00e9couper les composants en sous-composants</li> <li>D\u00e9finir la hi\u00e9rarchie des composants</li> </ol> <p> </p> Composants d'une application simple <ol> <li>ProduitTableFiltrable (bleu) contient l'application au complet.</li> <li>BarreRecherche (vert) re\u00e7oit l'entr\u00e9e de l'utilisateur.</li> <li>ProduitTable (jaune) affiche et filtre la liste selon l'entr\u00e9e de l'utilisateur.</li> <li>ProduitCategorieRangee (rose) affiche l'ent\u00eate par cat\u00e9gorie.</li> <li>ProduitRangee (brun) affiche une rang\u00e9e pour un produit.</li> </ol> <p>Ces composants peuvent \u00eatre repr\u00e9sent\u00e9s en une hi\u00e9rarchie de composants :</p> <pre><code>ProduitTableFiltrable\n  BarreRecherche\n  ProduitTable\n    ProduitCategorieRangee\n    ProduitRangee\n</code></pre>"},{"location":"penser_en_react/#etape-2-construire-une-version-statique-de-lapplication","title":"\u00c9tape 2 : Construire une version statique de l'application","text":"<p>Passage de donn\u00e9es par props</p> <p>Les donn\u00e9es sont pass\u00e9es de haut en bas dans React. Cela signifie que les donn\u00e9es sont pass\u00e9es du composant parent au composant enfant par le biais de <code>props</code>.</p> <p>Commencez pas le composant de produit le plus bas de la hi\u00e9rarchie, <code>ProduitRangee</code>. Ce composant re\u00e7oit des donn\u00e9es sous forme de <code>props</code> et les affiche.</p> ProduitRangee.tsx<pre><code>import { Produit } from '../models/Produit.model';\n\ninterface ProduitRangeeProps {\n  produit: Produit;\n}\n\nexport default function ProduitRangee(props: ProduitRangeeProps) {\n  const nom = props.produit.en_inventaire ? (\n    props.produit.nom\n  ) : (\n    &lt;span style={{ color: 'red' }}&gt;{props.produit.nom}&lt;/span&gt;\n  );\n\n  return (\n    &lt;tr&gt;\n      &lt;td&gt;{nom}&lt;/td&gt;\n      &lt;td&gt;{props.produit.prix}&lt;/td&gt;\n    &lt;/tr&gt;\n  );\n}\n</code></pre> <p>Ensuite, construisez le composant <code>ProduitCategorieRangee</code> qui re\u00e7oit la cat\u00e9gorie sous forme de <code>props</code> et les affiche.</p> ProduitCategorieRangee.tsx<pre><code>interface ProduitCategorieRangeeProps {\n  categorie: string;\n}\n\nexport default function ProduitCategorieRangee(\n  props: ProduitCategorieRangeeProps\n) {\n  return (\n    &lt;tr&gt;\n      &lt;th colSpan={2}&gt;{props.categorie}&lt;/th&gt;\n    &lt;/tr&gt;\n  );\n}\n</code></pre> <p>Enfin, construisez le composant <code>ProduitTable</code> qui re\u00e7oit les donn\u00e9es sous forme de <code>props</code> et les affiche.</p> ProduitTable.tsx<pre><code>import { Produit } from '../models/Produit.model';\nimport ProduitCategorieRangee from './ProduitCategorieRangee';\nimport ProduitRangee from './ProduitRangee';\n\ninterface ProduitTableProps {\n  produits: Produit[];\n}\n\nexport default function ProduitTable(props: ProduitTableProps) {\n  const produits = props.produits;\n  const rangees: JSX.Element[] = [];\n  let derniereCategorie: string | null = null;\n\n  produits.forEach((produit) =&gt; {\n    if (produit.categorie !== derniereCategorie) {\n      rangees.push(\n        &lt;ProduitCategorieRangee\n          categorie={produit.categorie}\n          key={produit.categorie}\n        /&gt;\n      );\n    }\n    rangees.push(&lt;ProduitRangee produit={produit} key={produit.nom} /&gt;);\n    derniereCategorie = produit.categorie;\n  });\n\n  return (\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Nom&lt;/th&gt;\n          &lt;th&gt;Prix&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;{rangees}&lt;/tbody&gt;\n    &lt;/table&gt;\n  );\n}\n</code></pre>"},{"location":"penser_en_react/#etape-3-identifier-letat-minimal-de-lapplication","title":"\u00c9tape 3 : Identifier l'\u00e9tat minimal de l'application","text":"<p>Il faut maintenant identifier ce qui doit \u00eatre conserv\u00e9 dans un \u00e9tat (state) VS ce qui est statique ou d\u00e9riv\u00e9 d'un \u00e9tat.</p> <p>Quelles sont les donn\u00e9es de notre application? </p> <ol> <li>La liste des produits originale</li> <li>La cat\u00e9gorie des produits</li> <li>Le texte de recherche</li> <li>L'\u00e9tat de la case \u00e0 cocher</li> <li>Les produits filtr\u00e9s</li> </ol> <p>Quelles sont les donn\u00e9es qui changent au cours du temps?</p> <ol> <li>Le texte de recherche</li> <li>L'\u00e9tat de la case \u00e0 cocher</li> <li>Les produits filtr\u00e9s</li> </ol> <p>Quelles sont les donn\u00e9es qui peuvent \u00eatre d\u00e9riv\u00e9es?</p> <ol> <li>Les produits filtr\u00e9s</li> </ol> <p>Donc, quelles sont les \u00e9tats minimaux de notre application?</p> <ol> <li>Le texte de recherche</li> <li>L'\u00e9tat de la case \u00e0 cocher</li> </ol>"},{"location":"penser_en_react/#etape-4-identifier-ou-letat-doit-vivre","title":"\u00c9tape 4 : Identifier o\u00f9 l'\u00e9tat doit vivre","text":"<p>Le principe de lev\u00e9e de l'\u00e9tat</p> <p>L'\u00e9tat doit \u00eatre lev\u00e9 au composant parent le plus proche qui a besoin d'y acc\u00e9der.</p> <p>Dans notre cas, le texte de recherche et l'\u00e9tat de la case \u00e0 cocher seront utilis\u00e9s par deux composants, <code>BarreRecherche</code> et <code>ProduitTable</code>. Donc, l'\u00e9tat doit \u00eatre lev\u00e9 au composant parent commun, <code>ProduitTableFiltrable</code>.</p> ProduitTableFiltrable.tsx<pre><code>import { Produit } from '../models/Produit.model';\nimport BarreRecherche from './BarreRecherche';\nimport ProduitTable from './ProduitTable';\nimport { useState } from 'react';\n\ninterface ProduitTableFiltrableProps {\n  produits: Produit[];\n}\n\nexport default function ProduitTableFiltrable(\n  props: ProduitTableFiltrableProps\n) {\n  const [filtreTexte, setFiltreTexte] = useState('');\n  const [filtreInventaireSeulement, setFiltreInventaireSeulement] =\n    useState(false);\n\n  const gererFiltreTexteChange = (valeur: string) =&gt; {\n    setFiltreTexte(valeur);\n  };\n\n  const gererFiltreInventaireSeulementChange = (valeur: boolean) =&gt; {\n    setFiltreInventaireSeulement(valeur);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;BarreRecherche\n        texte={filtreTexte}\n        seulementEnInventaire={filtreInventaireSeulement}\n        onTexteChange={gererFiltreTexteChange}\n        onSeulementEnInventaireChange={gererFiltreInventaireSeulementChange}\n      /&gt;\n      &lt;ProduitTable\n        produits={props.produits}\n        texte={filtreTexte}\n        seulementEnInventaire={filtreInventaireSeulement}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"penser_en_react/#etape-5-ajouter-des-interactions","title":"\u00c9tape 5 : Ajouter des interactions","text":"<p>Maintenant que l'\u00e9tat est lev\u00e9 au composant parent commun, nous pouvons ajouter des interactions \u00e0 notre application.</p> <p>Passage de donn\u00e9es par props</p> <p>Les fonctions de rappel sont pass\u00e9es de haut en bas dans React. Cela signifie que les fonctions de rappel sont pass\u00e9es du composant parent au composant enfant par le biais de <code>props</code>.</p> <p>Ajoutez une fonction de rappel pour g\u00e9rer le changement de texte de recherche et de la case \u00e0 cocher dans <code>BarreRecherche</code>.</p> BarreRecherche.tsx<pre><code>interface BarreRechercheProps {\n  texte: string;\n  seulementEnInventaire: boolean;\n  onTexteChange: (texte: string) =&gt; void;\n  onSeulementEnInventaireChange: (seulementEnInventaire: boolean) =&gt; void;\n}\n\nexport default function BarreRecherche(props: BarreRechercheProps) {\n  function handleTexteChange(e: React.ChangeEvent&lt;HTMLInputElement&gt;) {\n    props.onTexteChange(e.target.value);\n  }\n\n  function handleSeulementEnInventaireChange(\n    e: React.ChangeEvent&lt;HTMLInputElement&gt;\n  ) {\n    props.onSeulementEnInventaireChange(e.target.checked);\n  }\n\n  return (\n    &lt;form&gt;\n      &lt;input\n        type=\"text\"\n        placeholder=\"Recherche...\"\n        value={props.texte}\n        onChange={handleTexteChange}\n      /&gt;\n      &lt;label&gt;\n        &lt;input\n          type=\"checkbox\"\n          checked={props.seulementEnInventaire}\n          onChange={handleSeulementEnInventaireChange}\n        /&gt;{' '}\n        Seulement les produits en inventaire\n      &lt;/label&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> ProduitTable.tsx<pre><code>import { Produit } from '../models/Produit.model';\nimport ProduitCategorieRangee from './ProduitCategorieRangee';\nimport ProduitRangee from './ProduitRangee';\n\ninterface ProduitTableProps {\n  produits: Produit[];\n  texte: string;\n  seulementEnInventaire: boolean;\n}\n\nexport default function ProduitTable(props: ProduitTableProps) {\n  const produits = props.produits;\n  const rangees: JSX.Element[] = [];\n  let derniereCategorie: string | null = null;\n\n  produits.forEach((produit) =&gt; {\n    if (props.texte !== '' &amp;&amp; !produit.nom.includes(props.texte)) {\n      return;\n    }\n\n    if (props.seulementEnInventaire &amp;&amp; !produit.en_inventaire) {\n      return;\n    }\n\n    if (produit.categorie !== derniereCategorie) {\n      rangees.push(\n        &lt;ProduitCategorieRangee\n          categorie={produit.categorie}\n          key={produit.categorie}\n        /&gt;\n      );\n    }\n    rangees.push(&lt;ProduitRangee produit={produit} key={produit.nom} /&gt;);\n    derniereCategorie = produit.categorie;\n  });\n\n  return (\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Nom&lt;/th&gt;\n          &lt;th&gt;Prix&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;{rangees}&lt;/tbody&gt;\n    &lt;/table&gt;\n  );\n}\n</code></pre>"},{"location":"prettier/","title":"Prettier","text":""},{"location":"prettier/#extension-prettier-pour-vs-code","title":"Extension Prettier pour VS Code","text":"<p>Une extension pour formatter votre code automatiquement.  </p>"},{"location":"prettier/#installation","title":"Installation","text":"<p>Prettier sur VSCode Marketplace </p>"},{"location":"prettier/#configuration","title":"Configuration","text":"Param\u00e8tre Valeur editor.formatOnSave Activ\u00e9 editor.formatOnPaste Activ\u00e9 editor.defaultFormatter Prettier - Code formatter prettier.semi Activ\u00e9 prettier.singleQuote Activ\u00e9 prettier.trailingComma All"},{"location":"projet_complet_mongoose/","title":"Projet complet en Mongoose avec tests","text":""},{"location":"projet_complet_mongoose/#projet-api-complet","title":"Projet API complet","text":""},{"location":"projet_complet_mongoose/#objectif","title":"Objectif","text":"<p>Cr\u00e9er une API compl\u00e8te avec une base de donn\u00e9es MongoDB, un serveur Express et Mongoose.</p> <p>Attention</p> <p>Le projet suivant a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9 avec la version du 12 septembre 2025 du g\u00e9n\u00e9rateur express typescript. Il se peut que certaines parties du code ne fonctionnent pas avec les versions plus r\u00e9centes du g\u00e9n\u00e9rateur.</p>"},{"location":"projet_complet_mongoose/#simulacre","title":"Simulacre","text":"<p>Pour tester un projet complet en mongoose, il faut utiliser un simulacre.  </p> <p>Voici la s\u00e9quence d'appel normal :  </p> <p></p> <p>Voici la s\u00e9quence d'appel avec le simulacre (notez que le simulacre intercepte les appels \u00e0 mongoose pour \u00e9viter de toucher \u00e0 la BD :   </p> <p></p>"},{"location":"projet_complet_mongoose/#etape-1-initialisation-du-projet","title":"\u00c9tape 1 - Initialisation du projet","text":"<p>G\u00e9n\u00e9rer le projet avec le g\u00e9n\u00e9rateur express-typescript :  </p> console<pre><code>npx express-generator-typescript auteur_mongoose_simulacre\n</code></pre> <p>Ajouter le module Mongoose \u00e0 votre application :  </p> console<pre><code>npm install mongoose\n</code></pre> <p>Ajouter les tests de mongoose :  </p> console<pre><code>npm i @jazim/mock-mongoose -D\n</code></pre>"},{"location":"projet_complet_mongoose/#etape-2-preparer-la-connexion-a-la-base-de-donnees","title":"\u00c9tape 2 - Pr\u00e9parer la connexion \u00e0 la base de donn\u00e9es","text":"<p>Cr\u00e9er la variable d'environnement pour l'URI de MongoDB :  </p> config/.env.development<pre><code>## Environment ##\nNODE_ENV=development\n\n\n## Server ##\nPORT=3000\nHOST=localhost\n\n## MongoDB ##\nMONGODB=mongodb://localhost:27017/\n\n\n## Setup jet-logger ##\nJET_LOGGER_MODE=CONSOLE\nJET_LOGGER_FILEPATH=jet-logger.log\nJET_LOGGER_TIMESTAMP=TRUE\nJET_LOGGER_FORMAT=LINE\n</code></pre> <p>Configurer EnvVars pour exposer la variable d'environnement :  </p> src/common/EnvVars.ts<pre><code>import jetEnv, { num, str } from 'jet-env';\nimport { isEnumVal } from 'jet-validators';\n\nimport { NodeEnvs } from '.';\n\n/******************************************************************************\n                                 Setup\n******************************************************************************/\n\nconst ENV = jetEnv({\n  NodeEnv: isEnumVal(NodeEnvs),\n  Port: num,\n  Mongodb: str,\n});\n\n/******************************************************************************\n                            Export default\n******************************************************************************/\n\nexport default ENV;\n</code></pre> <p>D\u00e9marer la connexion \u00e0 MongoDB :  </p> src/index.ts<pre><code>import logger from \"jet-logger\";\nimport { connect } from \"mongoose\";\n\nimport ENV from \"@src/common/constants/ENV\";\nimport server from \"./server\";\n\n/******************************************************************************\n                                Constants\n******************************************************************************/\n\nconst SERVER_START_MSG =\n  \"Express server started on port: \" + ENV.Port.toString();\n\n/******************************************************************************\n                                  Run\n******************************************************************************/\n\n// Start the server\nconnect(ENV.Mongodb).then(() =&gt;\n  server.listen(ENV.Port, () =&gt; logger.info(SERVER_START_MSG))\n);\n</code></pre>"},{"location":"projet_complet_mongoose/#etape-3-creer-le-schema-mongoose","title":"\u00c9tape 3 - Cr\u00e9er le sch\u00e9ma Mongoose","text":"src/models/Auteur.ts<pre><code>import { Schema, model } from 'mongoose';\n\n// Interface pour un auteur\n// Notez l'utilisation de id au lieu de _id.\n// Mongoose cr\u00e9e automatiquement un _id pour chaque document.\nexport interface IAuteur {\n  id: string;\n  prenom: string;\n  nom: string;\n  date_naissance?: Date;\n  date_deces?: Date;\n}\n\nconst AuteurSchema = new Schema&lt;IAuteur&gt;({\n  id: { type: String, required: true, maxlength: 100 },\n  prenom: { type: String, required: true, maxlength: 100 },\n  nom: { type: String, required: true, maxlength: 100 },\n  date_naissance: Date,\n  date_deces: Date,\n});\n\nexport const Auteur = model&lt;IAuteur&gt;('Auteur', AuteurSchema);\n</code></pre>"},{"location":"projet_complet_mongoose/#etape-4-creer-le-repo","title":"\u00c9tape 4 - Cr\u00e9er le repo","text":"src/repos/AuteurRepo.ts<pre><code>import ENV from \"@src/common/constants/ENV\";\nimport { IAuteur, Auteur } from \"@src/models/Auteur\";\n\nimport mongoose from \"mongoose\";\n\n/******************************************************************************\n                                Functions\n******************************************************************************/\n\n/**\n * Extraire un auteur.\n *\n * @param {string} id - ID de l'auteur \u00e0 extraire\n *\n * @returns {IAuteur} - Un auteur si trouv\u00e9\n */\n\nasync function getOne(id: string): Promise&lt;IAuteur | null&gt; {\n  const auteur = await Auteur.findOne({\n    id: id,\n  });\n  return auteur;\n}\n\n/**\n * Extraire tous les auteurs.\n *\n * @returns {IAuteur[]} Un tableau de tous les auteurs\n */\nasync function getAll(): Promise&lt;IAuteur[]&gt; {\n  const auteurs = await Auteur.find();\n  return auteurs;\n}\n\n/**\n * Ajouter un auteur.\n *\n * @param {IAuteur} auteur - Auteur \u00e0 ajouter\n */\n\nasync function add(auteur: IAuteur): Promise&lt;void&gt; {\n  const nouvelAuteur = new Auteur(auteur);\n  await nouvelAuteur.save();\n}\n\n/**\n * Mettre \u00e0 jour un auteur.\n *\n * @param {IAuteur} auteur - Auteur \u00e0 modifier\n */\nasync function update(auteur: IAuteur): Promise&lt;void&gt; {\n  const auteurAModifier = await Auteur.findOne({ id: auteur.id });\n  if (auteurAModifier === null) {\n    throw new Error(\"Auteur non trouv\u00e9\");\n  }\n  auteurAModifier.nom = auteur.nom;\n  auteurAModifier.prenom = auteur.prenom;\n  auteurAModifier.date_naissance = auteur.date_naissance;\n  auteurAModifier.date_deces = auteur.date_deces;\n  await auteurAModifier.save();\n}\n\n/**\n * Supprimer un auteur.\n *\n * @param {string} id -  id de l'auteur \u00e0 supprimer\n */\nasync function delete_(id: string): Promise&lt;void&gt; {\n  await Auteur.deleteOne({ id: id });\n}\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default {\n  getOne,\n  getAll,\n  add,\n  update,\n  delete: delete_,\n} as const;\n</code></pre>"},{"location":"projet_complet_mongoose/#etape-5-creer-le-service","title":"\u00c9tape 5 - Cr\u00e9er le service","text":"src/services/AuteurService.ts<pre><code>import { RouteError } from '@src/common/util/route-errors';\nimport HttpStatusCodes from '@src/common/constants/HttpStatusCodes';\n\nimport AuteurRepo from '@src/repos/AuteurRepo';\nimport { IAuteur } from '@src/models/Auteur';\n\n/******************************************************************************\n                                Constants\n******************************************************************************/\n\nexport const AUTEUR_NON_TROUVE = 'Auteur non trouv\u00e9';\n\n/******************************************************************************\n                                Functions\n******************************************************************************/\n\n/**\n * Extraire tous les auteurs.\n */\nfunction getAll(): Promise&lt;IAuteur[]&gt; {\n  return AuteurRepo.getAll();\n}\n\n/**\n * Ajouter un auteur.\n */\nfunction addOne(auteur: IAuteur): Promise&lt;void&gt; {\n  return AuteurRepo.add(auteur);\n}\n\n/**\n * Mets \u00e0 jour un auteur.\n */\nasync function updateOne(auteur: IAuteur): Promise&lt;void&gt; {\n  const persists = await AuteurRepo.getOne(auteur.id);\n  if (!persists) {\n    throw new RouteError(HttpStatusCodes.NOT_FOUND, AUTEUR_NON_TROUVE);\n  }\n  // Return auteur\n  return AuteurRepo.update(auteur);\n}\n\n/**\n * Supprimer un auteur par son id\n */\nasync function _delete(id: string): Promise&lt;void&gt; {\n  const persists = await AuteurRepo.getOne(id);\n  if (!persists) {\n    throw new RouteError(HttpStatusCodes.NOT_FOUND, AUTEUR_NON_TROUVE);\n  }\n  // Delete auteur\n  return AuteurRepo.delete(id);\n}\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default {\n  getAll,\n  addOne,\n  updateOne,\n  delete: _delete,\n} as const;\n</code></pre>"},{"location":"projet_complet_mongoose/#etape-6-creer-la-route","title":"\u00c9tape 6 - Cr\u00e9er la route","text":"src/routes/AuteurRoutes.ts<pre><code>import HttpStatusCodes from '@src/common/constants/HttpStatusCodes';\nimport AuteurService from '@src/services/AuteurService';\nimport { IAuteur } from '@src/models/Auteur';\n\nimport { IReq, IRes } from './common/types';\n\n/******************************************************************************\n                                Functions\n******************************************************************************/\n\n/**\n * Extraire tous les auteurs\n */\nasync function getAll(_: IReq, res: IRes) {\n  const auteurs = await AuteurService.getAll();\n  res.status(HttpStatusCodes.OK).json({ auteurs });\n}\n\n/**\n * Ajouter un auteur\n */\nasync function add(req: IReq, res: IRes) {\n  const { auteur } = req.body;\n  await AuteurService.addOne(auteur as IAuteur);\n  res.status(HttpStatusCodes.CREATED).end();\n}\n\n/**\n * Mettre \u00e0 jour un auteur\n */\nasync function update(req: IReq, res: IRes) {\n  const { auteur } = req.body;\n  await AuteurService.updateOne(auteur as IAuteur);\n  res.status(HttpStatusCodes.OK).end();\n}\n\n/**\n * Supprimer un auteur\n */\nasync function delete_(req: IReq, res: IRes) {\n  const { id } = req.params;\n  await AuteurService.delete(id as string);\n  res.status(HttpStatusCodes.OK).end();\n}\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default {\n  getAll,\n  add,\n  update,\n  delete: delete_,\n} as const;\n</code></pre>"},{"location":"projet_complet_mongoose/#etape-7-creer-le-chemin-de-lapi","title":"\u00c9tape 7 - Cr\u00e9er le chemin de l'API","text":"src/common/constants/Paths.ts<pre><code>export default {\n  Base: '/api',\n  Auteur: {\n    Base: '/auteurs',\n    Get: '/all',\n    Add: '/add',\n    Update: '/update',\n    Delete: '/delete/:id',\n  },\n} as const;\n</code></pre>"},{"location":"projet_complet_mongoose/#etape-8-consolider-les-routes-dans-lapi","title":"\u00c9tape 8 - Consolider les routes dans l'API","text":"src/routes/index.ts<pre><code>import { Request, Response, NextFunction, Router } from 'express';\n\nimport Paths from '@src/common/constants/Paths';\nimport AuteurRoutes from './AuteurRoutes';\nimport HttpStatusCodes from '@src/common/constants/HttpStatusCodes';\nimport { Auteur } from '@src/models/Auteur';\n\n/******************************************************************************\n                                Setup\n******************************************************************************/\n\nconst apiRouter = Router();\n\n// ** Add AuteurRouter ** //\n// ** Validation d'un auteur ** //\nfunction validateAuteur(req: Request, res: Response, next: NextFunction) {\n  if (req.body === null) {\n    res\n      .status(HttpStatusCodes.BAD_REQUEST)\n      .send({ error: 'Auteur requis' })\n      .end();\n    return;\n  }\n\n  if (req.body.auteur === null) {\n    res\n      .status(HttpStatusCodes.BAD_REQUEST)\n      .send({ error: 'Auteur requis' })\n      .end();\n    return;\n  }\n\n  const nouvelAuteur = new Auteur(req.body.auteur);\n  const error = nouvelAuteur.validateSync();\n  if (error !== null &amp;&amp; error !== undefined) {\n    res.status(HttpStatusCodes.BAD_REQUEST).send(error).end();\n  } else {\n    next();\n  }\n}\n\n// Init router\nconst auteurRouter = Router();\n\nauteurRouter.get(Paths.Auteur.Get, AuteurRoutes.getAll);\nauteurRouter.post(Paths.Auteur.Add, validateAuteur, AuteurRoutes.add);\nauteurRouter.put(Paths.Auteur.Update, AuteurRoutes.update);\nauteurRouter.delete(Paths.Auteur.Delete, AuteurRoutes.delete);\n\n// Add AuteurRouter\napiRouter.use(Paths.Auteur.Base, auteurRouter);\n\n/******************************************************************************\n                                Export default\n******************************************************************************/\n\nexport default apiRouter;\n</code></pre>"},{"location":"projet_complet_mongoose/#tests-unitaires-automatiques","title":"Tests unitaires automatiques","text":""},{"location":"projet_complet_mongoose/#etape-1-creer-le-test-de-lapi","title":"\u00c9tape 1 - Cr\u00e9er le test de l'API","text":"tests/auteur.test.ts<pre><code>import insertUrlParams from 'inserturlparams';\nimport { customDeepCompare } from 'jet-validators/utils';\n\nimport AuteurRepo from '@src/repos/AuteurRepo';\n\nimport { AUTEUR_NON_TROUVE } from '@src/services/AuteurService';\n\nimport HttpStatusCodes from '@src/common/constants/HttpStatusCodes';\nimport { ValidationError } from '@src/common/util/route-errors';\n\nimport Paths from './common/Paths';\nimport { parseValidationErr, TRes } from './common/util';\nimport { agent } from './support/setup';\nimport { IAuteur, Auteur } from '@src/models/Auteur';\n\n/******************************************************************************\n                               Constants\n******************************************************************************/\n\n// Donn\u00e9es bidon pour les auteurs (simulacre de GET)\nconst DB_AUTEURS: IAuteur[] = [\n  {\n    id: '1',\n    nom: 'Halpert',\n    prenom: 'Jim',\n  },\n  {\n    id: '2',\n    nom: 'Schrute',\n    prenom: 'Dwight',\n  },\n  {\n    id: '3',\n    nom: 'Scott',\n    prenom: 'Michael',\n  },\n] as const;\n\n// Don't compare 'id' and 'created' cause those are set dynamically by the\n// database\nconst compareUserArrays = customDeepCompare({\n  onlyCompareProps: ['nom', 'courriel', 'typeChambre', 'prixParNuit'],\n});\n\nconst mockify = require('@jazim/mock-mongoose');\n/******************************************************************************\n                                 Tests\n  IMPORTANT: Following TypeScript best practices, we test all scenarios that \n  can be triggered by a user under normal circumstances. Not all theoretically\n  scenarios (i.e. a failed database connection). \n******************************************************************************/\n\ndescribe('auteurRouter', () =&gt; {\n  let dbAuteurs: IAuteur[] = [];\n\n  // Extraire tous les auteurs\n  describe(`'GET:${Paths.Auteur.Get}'`, () =&gt; {\n    // Succ\u00e8s\n    it(\n      'doit retourner un JSON avec tous les auteurs et un code de ' +\n        `of '${HttpStatusCodes.OK}' si r\u00e9ussi.`,\n      async () =&gt; {\n        // Pr\u00e9parer le simulacre de Mongoose\n        const data = [...DB_AUTEURS];\n        mockify(Auteur).toReturn(data, 'find');\n        const res: TRes&lt;{ auteurs: IAuteur[] }&gt; = await agent.get(\n          Paths.Auteur.Get,\n        );\n        expect(res.status).toBe(HttpStatusCodes.OK);\n        expect(compareUserArrays(res.body.auteurs, DB_AUTEURS)).toBeTruthy();\n      },\n    );\n  });\n\n  // Tester l'ajout d'un auteur\n  describe(`'POST:${Paths.Auteur.Add}'`, () =&gt; {\n    // Ajout r\u00e9ussi\n    it(\n      `doit retourner le code '${HttpStatusCodes.CREATED}' si la ` +\n        'transaction est r\u00e9ussie',\n      async () =&gt; {\n        const auteur: IAuteur = {\n          id: '12',\n          nom: 'Beasley',\n          prenom: 'Pam',\n        };\n        // Pr\u00e9parer le simulacre de Mongoose\n        mockify(Auteur).toReturn(auteur, 'save');\n        const res = await agent.post(Paths.Auteur.Add).send({ auteur });\n        expect(res.status).toBe(HttpStatusCodes.CREATED);\n      },\n    );\n\n    // Param\u00e8tre manquant\n    it(\n      'doit retourner un JSON avec les erreurs et un code de ' +\n        `'${HttpStatusCodes.BAD_REQUEST}' si un param\u00e8tre est ` +\n        'manquant.',\n      async () =&gt; {\n        const res: TRes = await agent\n          .post(Paths.Auteur.Add)\n          .send({ auteur: null });\n        expect(res.status).toBe(HttpStatusCodes.BAD_REQUEST);\n        expect(res.body.error).toBe('Auteur requis');\n      },\n    );\n  });\n\n  // Mise \u00e0 jour d'un auteur\n  describe(`'PUT:${Paths.Auteur.Update}'`, () =&gt; {\n    // Succ\u00e8s\n    it(\n      `doit retourner un code de '${HttpStatusCodes.OK}' si la mise \u00e0 jour ` +\n        'est r\u00e9ussie.',\n      async () =&gt; {\n        const auteur = DB_AUTEURS[0];\n        auteur.nom = 'Johnny B. Good';\n\n        // Pr\u00e9parer le simulacre de Mongoose\n        mockify(Auteur).toReturn(auteur, 'findOne').toReturn(auteur, 'save');\n\n        const res = await agent.put(Paths.Auteur.Update).send({ auteur });\n        expect(res.status).toBe(HttpStatusCodes.OK);\n      },\n    );\n\n    // R\u00e9servation non trouv\u00e9e\n    it(\n      'doit retourner un JSON avec erreur  ' +\n        `'${AUTEUR_NON_TROUVE}' et un code de ` +\n        `'${HttpStatusCodes.NOT_FOUND}' si l'id n'est pas trouv\u00e9.`,\n      async () =&gt; {\n        // Pr\u00e9parer le simulacre de Mongoose\n        mockify(Auteur).toReturn(null, 'findOne');\n        const auteur = {\n            id: 4,\n            nom: 'a',\n            prenom: 'b',\n          },\n          res: TRes = await agent.put(Paths.Auteur.Update).send({ auteur });\n\n        expect(res.status).toBe(HttpStatusCodes.NOT_FOUND);\n        expect(res.body.error).toBe(AUTEUR_NON_TROUVE);\n      },\n    );\n  });\n\n  // Supprimer la r\u00e9servation\n  describe(`'DELETE:${Paths.Auteur.Delete}'`, () =&gt; {\n    const getPath = (id: string) =&gt;\n      insertUrlParams(Paths.Auteur.Delete, { id });\n\n    // Succ\u00e8s\n    it(\n      `doit retourner un code de '${HttpStatusCodes.OK}' si la ` +\n        'suppression est r\u00e9ussie.',\n      async () =&gt; {\n        // Pr\u00e9parer le simulacre de Mongoose\n        mockify(Auteur)\n          .toReturn(DB_AUTEURS[0], 'findOne')\n          .toReturn(DB_AUTEURS[0], 'findOneAndRemove');\n        const id = DB_AUTEURS[0].id,\n          res = await agent.delete(getPath(id));\n        expect(res.status).toBe(HttpStatusCodes.OK);\n      },\n    );\n\n    // R\u00e9servation non trouv\u00e9e\n    it(\n      'doit retourner un JSON avec erreur ' +\n        `'${AUTEUR_NON_TROUVE}' et un code de  ` +\n        `'${HttpStatusCodes.NOT_FOUND}' si la r\u00e9servation est introuvable.`,\n      async () =&gt; {\n        // Pr\u00e9parer le simulacre de Mongoose\n        mockify(Auteur).toReturn(null, 'findOne');\n\n        const res: TRes = await agent.delete(getPath('-1'));\n        expect(res.status).toBe(HttpStatusCodes.NOT_FOUND);\n        expect(res.body.error).toBe(AUTEUR_NON_TROUVE);\n      },\n    );\n  });\n});\n</code></pre>"},{"location":"projet_complet_mongoose/#etape-2-executer-les-tests-de-lapi","title":"\u00c9tape 2 - Ex\u00e9cuter les tests de l'API","text":"console<pre><code>npm test\n</code></pre>"},{"location":"projet_integrateur/","title":"Projet int\u00e9grateur","text":""},{"location":"projet_integrateur/#projet-integrateur-50","title":"Projet int\u00e9grateur (50%)","text":""},{"location":"projet_integrateur/#mise-en-contexte","title":"Mise en contexte","text":"<p>Votre travail consiste \u00e0 concevoir une application web qui interagit avec des donn\u00e9es par une interface applicative (API). Vous devez choisir un projet de votre choix qui doit cependant \u00eatre pr\u00e9alablement approuv\u00e9 par l\u2019enseignant. Vous \u00eates responsable de vous assurer que votre projet respecte les consignes demand\u00e9es.  </p> <p>Le projet est divis\u00e9 en 3 parties :  </p> <ol> <li>Base de donn\u00e9es : 10% de l\u2019\u00e9preuve finale  </li> <li>Interface applicative (API) : 40% de l\u2019\u00e9preuve finale  </li> <li>Application: 50% de l\u2019\u00e9preuve finale   </li> </ol> <p>Voici les r\u00e8gles \u00e0 respecter pour chacune des parties :  </p> <ol> <li> <p>Base de donn\u00e9es : </p> <ul> <li>Base de donn\u00e9es MongoDB<ul> <li>Minimum 8 propri\u00e9t\u00e9s</li> <li>Au moins une propri\u00e9t\u00e9 de chacun de ces types :  <ul> <li>String  </li> <li>Number  </li> <li>Date  </li> <li>Bool  </li> <li>Tableau de types natifs (string, number, etc.)    </li> </ul> </li> <li>Possibilit\u00e9 d\u2019utiliser plusieurs collections (recommand\u00e9 pour les mod\u00e8les plus avanc\u00e9s)  </li> </ul> </li> <li>Jeu de donn\u00e9es test  </li> <li>Publication de la base de donn\u00e9es (MongoDB Atlas ou autre)</li> </ul> </li> <li> <p>Interface applicative (API) :</p> <ul> <li>Robuste (validation et messages d\u2019erreur personnalis\u00e9s, en fran\u00e7ais)  </li> <li>S\u00e9curitaire  </li> <li>Impl\u00e9mente m\u00e9thodes HTTP cibl\u00e9es : <ul> <li>GET <ul> <li>GET ALL</li> <li>GET by ID</li> <li>GET avec Filtres (au moins 2)</li> </ul> </li> <li>POST   </li> <li>PUT</li> <li>DELETE  </li> </ul> </li> <li>Validations appropri\u00e9es :  <ul> <li>Champs requis  </li> <li>Types  </li> <li>Tailles et intervalles (min, max, longueur du tableau)  </li> <li>Messages personnalis\u00e9s en fran\u00e7ais  </li> <li>Au moins 2 validations personnalis\u00e9es</li> </ul> </li> <li>Tests unitaires (Vitest et Supertest)  </li> <li>Documentation : toutes les routes doivent \u00eatre document\u00e9es sur la page d\u2019accueil de l\u2019api (exemple : Google Classroom REST API )  </li> <li>Publication de l\u2019API (Netlify ou autre)  </li> </ul> </li> <li> <p>Application :  </p> <ul> <li>Approche \u00ab mobile first \u00bb, id\u00e9alement responsive, minimalement correctement affich\u00e9e sur 3 r\u00e9solutions d\u2019\u00e9cran (mobile, tablette et pc). </li> <li>\u00c0 l\u2019aide de React fonctionnel.  </li> <li>D\u00e9compos\u00e9e en minimum 5 composants (ou l\u2019\u00e9quivalent)  </li> <li>Internationalis\u00e9e (Fran\u00e7ais et Anglais)  </li> <li>Interactions avec toutes les m\u00e9thodes HTTP impl\u00e9ment\u00e9es par l\u2019API  </li> <li>Utilisation de formulaires lorsque n\u00e9cessaire (minimum 1 formulaire, 5 champs)    </li> <li>Avec validations ad\u00e9quates et coh\u00e9rentes avec les validations serveur. Les messages issus des validations doivent \u00eatre affich\u00e9s \u00e0 l\u2019utilisateur.   </li> <li>Minimum 2 composants utilis\u00e9s \u00e0 des fins d\u2019affichage.  </li> <li>Authentification obligatoire pour certaines fonctionnalit\u00e9s cibl\u00e9es (minimum 1), adapt\u00e9e \u00e0 la r\u00e9alit\u00e9 du projet. L\u2019authentification peut \u00eatre int\u00e9gr\u00e9e dans l\u2019API ou comme serveur tiers.  </li> <li>Publication de l\u2019application (Netlify, GitHub Pages ou autre)  </li> </ul> </li> </ol>"},{"location":"projet_integrateur/#remise","title":"Remise","text":"<ul> <li>Le projet doit \u00eatre remis avant le 15 d\u00e9cembre 2025 \u00e0 14h05  </li> <li> <p>\u00c0 remettre sur Teams :  </p> <ul> <li>Lien GitHub (d\u00e9p\u00f4t public ou priv\u00e9*) de l\u2019API.  </li> <li>Ajouter un dossier Dev contenant le script de la base de donn\u00e9es (scripts de cr\u00e9ation au besoin et scripts de donn\u00e9es de test)  </li> <li>Le fichier README doit contenir les informations suivantes :  <ul> <li>Proc\u00e9dure d\u2019installation de l\u2019API sur un poste local  </li> <li>Proc\u00e9dure de cr\u00e9ation de la base de donn\u00e9es.   </li> <li>URL de l\u2019API publi\u00e9e  </li> </ul> </li> <li>Lien GitHub (d\u00e9p\u00f4t public ou priv\u00e9*) de l\u2019application.   </li> <li>Le fichier README doit contenir les informations suivantes :  </li> <li>Proc\u00e9dure d\u2019installation de l\u2019application sur un poste local  </li> <li>Description sommaire de l\u2019application publi\u00e9e  </li> <li>Informations d\u2019authentification  </li> </ul> </li> </ul> <p>*Si d\u00e9p\u00f4t priv\u00e9, envoyer une invitation de collaboration \u00e0 rivard.etienne@cegepvicto.ca  </p>"},{"location":"projet_integrateur/#rencontre","title":"Rencontre","text":"<p>Une rencontre de 15 minutes durant la semaine d'examen est obligatoire. Durant cette rencontre, vous devrez expliquer votre code pour permettre l'\u00e9valuation de votre compr\u00e9hension.  </p>"},{"location":"projet_integrateur/#niveau-dintelligence-artificielle-a-utiliser","title":"Niveau d'intelligence artificielle \u00e0 utiliser","text":"Niveau Exigence pour l'\u00e9valuation 3 Les contenus g\u00e9n\u00e9r\u00e9s par l'IA sont reformul\u00e9s ou cit\u00e9s dans la production.Ces contenus repr\u00e9sentent une petite partie de la production.Plus de d\u00e9tails ici"},{"location":"projet_integrateur/#grille-de-correction","title":"Grille de correction","text":"\u00c9l\u00e9ment Excellent Satisfaisant Minimal Faible Insuffisant Base de donn\u00e9es (10%) \u2060 \u2060 \u2060 \u2060 Sch\u00e9ma Le sch\u00e9ma de la base de donn\u00e9es r\u00e9pond totalement aux exigences demand\u00e9es. 6 points Un ou 2 \u00e9l\u00e9ments du sch\u00e9ma ne r\u00e9pondent pas aux exigences demand\u00e9es5 points 3 \u00e0 5 \u00e9l\u00e9ments du sch\u00e9ma ne r\u00e9pondent pas aux exigences demand\u00e9es4 points Plus de 5 \u00e9l\u00e9ments ne r\u00e9pondent pas aux exigences demand\u00e9es0 point Publication Le base de donn\u00e9es est publi\u00e9e. 2 points La base de donn\u00e9es n\u2019est pas publi\u00e9e0 point Jeu de tests Le jeu de donn\u00e9es de permet de tester l\u2019ensemble des fonctionnalit\u00e9s.2 points Le jeu de donn\u00e9es de permet de tester partiellement les fonctionnalit\u00e9s.1 point Le jeu de donn\u00e9es de permet de tester moins de 25% des fonctionnalit\u00e9s.0 point Interface applicative (API) (40%) \u2060 \u2060 \u2060 \u2060 M\u00e9thodes HTTP L\u2019interface applicative impl\u00e9mente correctement l\u2019ensemble des m\u00e9thodes HTTP demand\u00e9es. (GET, POST, PUT, DELETE)4 points L\u2019interface applicative impl\u00e9mente correctement 75% des m\u00e9thodes HTTP demand\u00e9es.  (GET, POST, PUT, DELETE)3 points L\u2019interface applicative impl\u00e9mente correctement 50% des m\u00e9thodes HTTP demand\u00e9es. (GET, POST, PUT, DELETE)2 points L\u2019interface applicative impl\u00e9mente correctement 25% des m\u00e9thodes HTTP demand\u00e9es. (GET, POST, PUT, DELETE)1 point L\u2019interface applicative impl\u00e9mente moins de 25% des m\u00e9thodes HTTP demand\u00e9es.  (GET, POST, PUT, DELETE)0 point GET avec filtre L\u2019interface applicative impl\u00e9mente correctement un minimum de 2 m\u00e9thodes GET avec filtres. Ces requ\u00eates sont pertinentes au projet.  5 points L\u2019interface applicative impl\u00e9mente partiellement un minimum de 2 m\u00e9thodes GET avec filtres. Ces requ\u00eates sont pertinentes au projet.  3 points L\u2019interface applicative impl\u00e9mente partiellement moins de 2 m\u00e9thodes GET avec filtres. Ces requ\u00eates sont peu pertinentes au projet.  2 points L\u2019interface applicative n\u2019impl\u00e9mente pas correctement de m\u00e9thodes GET avec filtres, ou ces requ\u00eates ne sont pas pertinentes au projet0 point Validations natives L\u2019interface applicative contient des validations natives appropri\u00e9es aux donn\u00e9es repr\u00e9sent\u00e9es dans le sch\u00e9ma.5 points L\u2019interface applicative contient des validations natives partiellement appropri\u00e9es aux donn\u00e9es repr\u00e9sent\u00e9es dans le sch\u00e9ma4 points L\u2019interface applicative ne contient pas de validations natives appropri\u00e9es aux donn\u00e9es repr\u00e9sent\u00e9es dans le sch\u00e9ma0 point Validations personnalis\u00e9es L\u2019interface applicative contient au minimum 2 validations personnalis\u00e9es appropri\u00e9es aux donn\u00e9es repr\u00e9sent\u00e9es dans le sch\u00e9ma.5 points L\u2019interface applicative contient au moins 1 validation personnalis\u00e9e appropri\u00e9e aux donn\u00e9es repr\u00e9sent\u00e9es dans le sch\u00e9ma.4 points L\u2019interface applicative ne contient pas de validation personnalis\u00e9e appropri\u00e9e aux donn\u00e9es repr\u00e9sent\u00e9es dans le sch\u00e9ma0 point Application s\u00e9curis\u00e9e L\u2019interface applicative est correctement s\u00e9curis\u00e9e.4 points L\u2019interface applicative est partiellement s\u00e9curis\u00e9e.2 points L\u2019interface applicative n\u2019est pas s\u00e9curis\u00e9e.0 point Messages d'erreur Les messages d\u2019erreur sont personnalis\u00e9s en fran\u00e7ais.2 points L\u2019interface applicative contient des messages d\u2019erreurs appropri\u00e9s.1 point L\u2019interface applicative ne contient pas de messages d\u2019erreurs appropri\u00e9s.0 point Tests unitaires automatis\u00e9s L'ensemble des m\u00e9thodes HTTP impl\u00e9ment\u00e9s et des validations sont test\u00e9es6 points Les tests unitaires ne couvrent que 75% des m\u00e9thodes HTTP et validations5 points Les tests unitaires ne couvrent que 50% des m\u00e9thodes HTTP et validations4 points Les tests unitaires ne couvrent que 25% des m\u00e9thodes HTTP et validations2 points Les tests unitaires couvrent moins de  25% des m\u00e9thodes HTTP et validations0 point Compr\u00e9hension de son code L'\u00e9l\u00e8ve explique clairement et sans h\u00e9sitation l'ensemble du code remis \u00e0 l'enseignant4 points L'\u00e9l\u00e8ve explique clairement et sans h\u00e9sitation une majeure partie du code remis \u00e0 l'enseignant2 points L'\u00e9l\u00e8ve explique difficilement son code0 point Documentation La documentation de l\u2019interface applicative est claire et compl\u00e8te. 2 points La documentation de l\u2019interface applicative est floue ou incompl\u00e8te.1 point La documentation de l\u2019interface applicative est inexistante.0 point La qualit\u00e9 g\u00e9n\u00e9rale de l\u2019interface applicative (API) d\u00e9montre une rigueur dans l\u2019application des proc\u00e9dures d\u2019assurance qualit\u00e9.(Correction n\u00e9gative, -1 par bogue identifi\u00e9) \u2060 \u2060 \u2060 \u2060 Application Web (50%) \u2060 \u2060 \u2060 \u2060 Composants L\u2019application est optimalement d\u00e9compos\u00e9e en composants.5 points L\u2019application est correctement d\u00e9compos\u00e9e en composants4 points L\u2019application est d\u00e9compos\u00e9e en composants, mais contient une ou 2 erreurs de structure. 2 points L\u2019application n\u2019est pas correctement d\u00e9compos\u00e9e0 point Hooks Les techniques de programmation utilis\u00e9es d\u00e9montrent une excellente ma\u00eetrise de l\u2019approche par hooks5 points Les techniques de programmation utilis\u00e9es d\u00e9montrent une bonne ma\u00eetrise de l\u2019approche par hooks 3 points Les techniques de programmation utilis\u00e9es d\u00e9montrent une l\u00e9g\u00e8re ma\u00eetrise de l\u2019approche par hooks2 points Les techniques de programmation utilis\u00e9es ne d\u00e9montrent pas la ma\u00eetrise de l\u2019approchepar hooks0 point M\u00e9thodes HTTP L\u2019application impl\u00e9mente correctement l\u2019ensemble des m\u00e9thodes HTTP fournies par l\u2019interface applicative (API).12 points L\u2019application impl\u00e9mente correctement 75% des m\u00e9thodes HTTP fournies par l\u2019interface applicative (API).9 points L\u2019application impl\u00e9mente correctement 50% des m\u00e9thodes HTTP fournies par l\u2019interface applicative (API).7 points L\u2019application impl\u00e9mente correctement 25% des m\u00e9thodes HTTP fournies par l\u2019interface applicative (API).3 points L\u2019application impl\u00e9mente correctement moins de 25% des m\u00e9thodes HTTP fournies par l\u2019interface applicative (API).0 point Validations L\u2019application contient des validations appropri\u00e9es avec messages \u00e0 l'utilisateur dans l'interface graphique.5 points L\u2019application contient des validations partiellement appropri\u00e9es qui ont des messages affich\u00e9s \u00e0 l'utilisateur.3 points L\u2019application ne contient pas de validations appropri\u00e9es ou ne sont pas affich\u00e9es \u00e0 l'utilisateur.0 point Compr\u00e9hension de son code L'\u00e9l\u00e8ve explique clairement et sans h\u00e9sitation l'ensemble du code remis \u00e0 l'enseignant5 points L'\u00e9l\u00e8ve explique clairement et sans h\u00e9sitation une majeure partie du code remis \u00e0 l'enseignant3 points L'\u00e9l\u00e8ve explique difficilement son code0 point Visuel L\u2019application int\u00e8gre ad\u00e9quatement des composants visuels r\u00e9pondant aux exigences du projet. 4 points L\u2019application int\u00e8gre partiellement des composants visuels r\u00e9pondant aux exigences du projet. 2 points L\u2019application n\u2019int\u00e8gre pas des composants visuels r\u00e9pondant aux exigences du projet. 0 point Application s\u00e9curis\u00e9e L\u2019application est correctement s\u00e9curis\u00e9e.4 points L\u2019application est partiellement s\u00e9curis\u00e9e.3 points L\u2019application n\u2019est pas s\u00e9curis\u00e9e.0 point Internationalisation L\u2019application est enti\u00e8rement internationalis\u00e9e en Fran\u00e7ais et en Anglais4 points L\u2019application est partiellement internationalis\u00e9een Fran\u00e7ais et en Anglais3 points L\u2019application n\u2019est pas internationalis\u00e9e en Fran\u00e7ais et en Anglais0 point Organisation visuelle L\u2019organisation visuelle des fonctionnalit\u00e9s est ad\u00e9quate et coh\u00e9rente dans un minimum de 3 affichages (mobile, tablette et PC)2 points Les fonctionnalit\u00e9s d\u00e9velopp\u00e9es contiennent 1 ou 2 incoh\u00e9rences au niveau de l\u2019organisation visuelle.1 point L\u2019organisation visuelle des fonctionnalit\u00e9s d\u00e9velopp\u00e9es est inad\u00e9quate ou incoh\u00e9rente.0 point Navigation La navigation est intuitive.(Positionnement des boutons, retour \u00e0 l\u2019accueil, utilisation d\u2019onglets, etc.)2 points La navigation contient une erreur de parcours.1 point La navigation contient plus d\u2019une erreur de parcours.0 point Publication L\u2019application est publi\u00e9e et fonctionnelle.2 points L\u2019interface applicative n\u2019est pas correctement publi\u00e9e.  Certaines fonctionnalit\u00e9s ne fonctionnement pas. 1 point L\u2019application n\u2019est pas publi\u00e9e0 point La qualit\u00e9 g\u00e9n\u00e9rale de l\u2019application d\u00e9montre une rigueur dans l\u2019application des proc\u00e9dures d\u2019assurance qualit\u00e9.(Correction n\u00e9gative, -1 par bogue identifi\u00e9) \u2060 \u2060 \u2060 \u2060"},{"location":"pwa/","title":"PWA","text":""},{"location":"pwa/#progressive-web-apps","title":"Progressive Web Apps","text":"<p>Les\u00a0applications web progressives\u00a0(ou\u00a0progressive web applications\u00a0en anglais, abr\u00e9g\u00e9es en PWAs) sont des applications web qui utilisent\u00a0les\u00a0service workers,\u00a0les manifestes, et d'autres fonctionnalit\u00e9s de la plateforme web, avec\u00a0l'am\u00e9lioration progressive\u00a0pour fournir aux utilisatrices et utilisateurs une exp\u00e9rience \u00e9quivalente \u00e0 celle des applications natives.</p> <p>Manuel</p> <p>MDN - Progressive Web Apps Stats et nouvelles sur PWA Web.dev - Apprendre sur PWA </p>"},{"location":"pwa/#utilisation-du-plugiciel-pwa-pour-vite","title":"Utilisation du plugiciel PWA pour vite","text":"<p>Manuel</p> <p>Guide pour le plugiciel PWA </p> <ol> <li> <p>Installation du plugiciel  :</p> console<pre><code>npm install -D vite-plugin-pwa\n</code></pre> </li> <li> <p>Modifier vite.config.ts pour g\u00e9n\u00e9rer le manifest requis pour PWA :  </p> vite.config.ts<pre><code>import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { VitePWA } from 'vite-plugin-pwa';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\nplugins: [\n    react(),\n    VitePWA({\n    registerType: 'autoUpdate',\n    devOptions: {\n        enabled: true,\n    },\n    includeAssets: ['favicon.ico', 'logo192.png', 'vite.svg'],\n    manifest: {\n        name: 'Depan-Heure',\n        short_name: 'dep',\n        description: 'Le meilleur d\u00e9panneur en ligne',\n        theme_color: '#ffffff',\n        icons: [\n        {\n            src: 'logo192.png',\n            sizes: '192x192',\n            type: 'image/png',\n            purpose: 'maskable',\n        },\n        {\n            src: 'logo512.png',\n            sizes: '512x512',\n            type: 'image/png',\n        },\n        ],\n    },\n    }),\n],\n});\n</code></pre> </li> <li> <p>Tester votre application avec Lighthouse :  </p> <p> Utiliser Lighthouse dans les outils de d\u00e9veloppeur de Chrome </p> <p>R\u00e9sultats attendus :  </p> <p> Exemple de rapport Lighthouse </p> </li> </ol>"},{"location":"react3/","title":"Router - useParams - useContext et API","text":""},{"location":"react3/#react-router","title":"React Router","text":"<p>Permettre de passer d\u2019une page \u00e0 l\u2019autre dans votre application React.  </p> <p>Manuel</p> <p>React Router </p> <p>Pour l'installer dans votre projet :  </p> console<pre><code>npm i react-router-dom\nnpm i @types/react-router-dom --save-dev\n</code></pre>"},{"location":"react3/#exemple-de-spa-avec-router","title":"Exemple de SPA avec Router","text":"App.tsx<pre><code>import {\n  BrowserRouter,\n  Routes,\n  Route,\n  Outlet,\n  useParams,\n} from 'react-router-dom';\n\nimport './App.css';\n\nfunction Modele() {\n  return (\n    &lt;div&gt;\n      &lt;a href=\"/\"&gt;Page principale&lt;/a&gt;&amp;nbsp;\n      &lt;a href=\"/dadams\"&gt;Douglas Adams&lt;/a&gt;&amp;nbsp;\n      &lt;a href=\"/oscard\"&gt;Orson Scott Card&lt;/a&gt;\n      &lt;br /&gt;\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\nfunction PagePrincipale() {\n  return &lt;h1&gt;Page principale&lt;/h1&gt;;\n}\n\nfunction DouglasAdams() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Page de Douglas Adams&lt;/h1&gt;&amp;nbsp;\n      &lt;a href=\"/livre/1\"&gt;Livre 1&lt;/a&gt;&amp;nbsp;\n      &lt;a href=\"/livre/2\"&gt;Livre 2&lt;/a&gt;&amp;nbsp;\n    &lt;/&gt;\n  );\n}\n\nfunction OrsonScottCard() {\n  return &lt;h1&gt;Page de Orson Scott Card&lt;/h1&gt;;\n}\n\nfunction Livre() {\n  const { id } = useParams();\n  return &lt;h1&gt;Livre #{id}&lt;/h1&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Modele /&gt;}&gt;\n          &lt;Route index element={&lt;PagePrincipale /&gt;} /&gt;\n          &lt;Route path=\"dadams\" element={&lt;DouglasAdams /&gt;} /&gt;\n          &lt;Route path=\"oscard\" element={&lt;OrsonScottCard /&gt;} /&gt;\n          &lt;Route path=\"livre/:id\" element={&lt;Livre /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>CodeSandbox</p> <p>D\u00e9mo - monrouteur </p>"},{"location":"react3/#differents-elements-du-projet-monrouteur","title":"Diff\u00e9rents \u00e9l\u00e9ments du projet monrouteur","text":""},{"location":"react3/#browserrouter","title":"BrowserRouter","text":"<p>Un &lt;BrowserRouter&gt; stocke l'emplacement actuel dans la barre d'adresse du navigateur en utilisant des URL propres et navigue en utilisant la pile d'historique int\u00e9gr\u00e9e du navigateur.</p> App.tsx<pre><code>function App() {\n  return (\n    &lt;BrowserRouter&gt;\n      // Le reste de l'application React\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre> <p>Manuel</p> <p>BrowserRouter</p>"},{"location":"react3/#routes","title":"Routes","text":"<p>L'\u00e9l\u00e9ment &lt;Routes&gt; (au pluriel) indique l'ensemble des routes qui seront disponibles dans l'application.  Doit contenir au moins un \u00e9l\u00e9ment &lt;Route&gt; (au singulier).  </p> app.tsx<pre><code>function App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Modele /&gt;}/&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre>"},{"location":"react3/#route","title":"Route","text":"<p>L'\u00e9l\u00e9ment &lt;Route&gt; (au singulier) d\u00e9finit une page de l'application \u00e0 afficher selon son URL.  </p> <p>Par exemple :  </p> app.tsx<pre><code>     &lt;Route path=\"/dadams\" element={&lt;DouglasAdams /&gt;} /&gt;\n</code></pre> <p>Cette route indique que http://serveur/dadams pointe sur la composante DouglasAdams.  </p> <p>Manuel</p> <p>Route - Documentation </p>"},{"location":"react3/#routes-imbriquees","title":"Routes imbriqu\u00e9es","text":"<p>L'\u00e9l\u00e9ment &lt;Route&gt; (au singulier) peut contenir des routes enfants.  Comme ceci :  </p> app.tsx<pre><code>     &lt;Route path=\"/\" element={&lt;Modele /&gt;}&gt;\n          &lt;Route index element={&lt;PagePrincipale /&gt;} /&gt;\n          &lt;Route path=\"dadams\" element={&lt;DouglasAdams /&gt;} /&gt;\n          &lt;Route path=\"oscard\" element={&lt;OrsonScottCard /&gt;} /&gt;\n          &lt;Route path=\"livre/:id\" element={&lt;Livre /&gt;} /&gt;\n        &lt;/Route&gt;\n</code></pre> <p>Plusieurs choses importantes ici :  </p> <ul> <li> <p>La route \"/\" est la route parent des autres.  Lorsqu'un \u00e9l\u00e9ment est mentionn\u00e9 dans la route parent, l'\u00e9l\u00e9ment est g\u00e9n\u00e9r\u00e9 avant celui de la route enfant.  Il faut par contre indiquer dans l'\u00e9l\u00e9ment parent \u00e0 quel endroit faut-il g\u00e9n\u00e9rer l'\u00e9l\u00e9ment enfant (avec l'\u00e9l\u00e9ment &lt;Outlet&gt;) :   </p> app.tsx<pre><code>    function Modele() {\n    return (\n        &lt;div&gt;\n        &lt;a href=\"/\"&gt;Page principale&lt;/a&gt;&amp;nbsp;\n        &lt;a href=\"/dadams\"&gt;Douglas Adams&lt;/a&gt;&amp;nbsp;\n        &lt;a href=\"/oscard\"&gt;Orson Scott Card&lt;/a&gt;\n        &lt;br /&gt;\n        &lt;Outlet /&gt;\n        &lt;/div&gt;\n    );\n    }\n</code></pre> </li> <li> <p>Le mot cl\u00e9 index indique l'\u00e9l\u00e9ment qui sera g\u00e9n\u00e9r\u00e9 lorsque l'utilisateur navigue \u00e0 l'URL du parent.  </p> </li> </ul>"},{"location":"react3/#routes-dynamiques","title":"Routes dynamiques","text":"<p>On peut placer un param\u00e8tre dans une route qui peut \u00eatre lu par l'\u00e9l\u00e9ment g\u00e9n\u00e9r\u00e9.  </p> <p>Dans la route, on peut avoir le param\u00e8tre :id :  </p> app.tsx<pre><code>&lt;Route path=\"livre/:id\" element={&lt;Livre /&gt;} /&gt;\n</code></pre> <p>Dans l'\u00e9l\u00e9ment, on acc\u00e8de au param\u00e8tre avec la fonction useParams() :  </p> app.tsx<pre><code>    function Livre() {\n        const { id } = useParams();\n        return &lt;h1&gt;Livre #{id}&lt;/h1&gt;;\n    }\n</code></pre>"},{"location":"react3/#usecontext","title":"useContext","text":"<p>Une fa\u00e7on de passer des donn\u00e9es d'un \u00e9l\u00e9ment parent vers un \u00e9l\u00e9ment enfant est via les props.  Le flux normal de donn\u00e9es dans React est de haut en bas. Les \u00e9l\u00e9ments en bas ne peuvent pas influencer les donn\u00e9es venant de plus haut.  </p> <p>Lorsque c'est requis pour un \u00e9l\u00e9ment enfant d'influencer les donn\u00e9es venant d'un parent, React offre une fonctionnalit\u00e9 qui se nomme contexte.  Le contexte rend possible la mise \u00e0 jour d'\u00e9tats par tous les sous-\u00e9l\u00e9ments selon les besoins.  </p> <p>Manuel</p> <p>useContext - Documentation </p> <p>Prenons l'exemple suivant :  </p> <pre><code>graph TD\n  A[Home] --&gt; B[Panier];\n  A[Home] --&gt; C[Fiche];\n  B[Panier] --&gt; D[Fiche];\n</code></pre> <p>L'\u00e9l\u00e9ment Home a un panier contenant les items d\u00e9sir\u00e9s par l'utilisateur. L'\u00e9l\u00e9ment Fiche repr\u00e9sente un item avec une photo, une description et un prix.  L'\u00e9l\u00e9ment Panier contient les fiches des items ajout\u00e9s par l'utilisateur.  </p> <p>Si nous voulons que le bouton Ajouter au panier de l'\u00e9l\u00e9ment Fiche puisse influencer le contenu du Panier, il faut cr\u00e9er un contexte :  </p> <pre><code>graph TD\n  Z[ContextePanier] --&gt; A[Home];\n  A[Home] --&gt; B[Panier];\n  A[Home] --&gt; C[Fiche];\n  B[Panier] --&gt; D[Fiche];\n</code></pre> <p>Tous les \u00e9l\u00e9ments sous ContextePanier peuvent acc\u00e8der au contenu et le modifier au besoin.  Dans cette situation, la liste des items au panier vient du contexte et est utilis\u00e9 dans l'\u00e9l\u00e9ment Panier alors que Fiche s'ajoute ou se retire du panier via le contexte.  </p>"},{"location":"react3/#demo-de-usecontext","title":"D\u00e9mo de useContext","text":"<p>Voici les \u00e9l\u00e9ments pertinents pour l'utilisation de contexte :  </p> panier.context.tsx<pre><code>import React, { useState } from 'react';\n\ninterface IItemPanier {\n  id: number;\n  nom: string;\n  photo: string;\n  prix: number;\n  quantite: number;\n}\n\nexport type PanierContextType = {\n  itemsPanier: IItemPanier[];\n  panierOuvert: boolean;\n  setItemsPanier: (itemsPanier: IItemPanier[]) =&gt; void;\n  setPanierOuvert: (ouvert: boolean) =&gt; void;\n};\n\nconst panierVide: IItemPanier[] = [];\n\nexport const PanierContext = React.createContext&lt;PanierContextType&gt;({\n  itemsPanier: panierVide,\n  panierOuvert: false,\n  setItemsPanier: () =&gt; {},\n  setPanierOuvert: () =&gt; {},\n});\n\nexport default function PanierProvider(props: any) {\n  const [itemsPanier, setItemsPanier] = useState(panierVide);\n  const [panierOuvert, setPanierOuvert] = useState(false);\n\n  const values = {\n    itemsPanier,\n    panierOuvert,\n    setItemsPanier,\n    setPanierOuvert,\n  };\n  return (\n    &lt;PanierContext.Provider value={values}&gt;\n      {props.children}\n    &lt;/PanierContext.Provider&gt;\n  );\n}\n</code></pre> App.tsx<pre><code>import './App.css';\nimport PanierProvider from './contexts/panier.context';\nimport Home from './components/home.component';\n\nfunction App() {\n  return (\n    &lt;PanierProvider&gt;\n      &lt;Home /&gt;\n    &lt;/PanierProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre> panier.component.tsx<pre><code>import { useContext } from 'react';\nimport { Drawer } from '@mui/material';\nimport { PanierContext } from '../contexts/panier.context';\nimport Fiche from './fiche.component';\nimport { Box } from '@mui/material';\n\nexport default function Panier() {\n  const { itemsPanier, panierOuvert, setPanierOuvert } =\n    useContext(PanierContext);\n  return (\n    &lt;Drawer\n      anchor=\"right\"\n      open={panierOuvert}\n      onClose={() =&gt; {\n        setPanierOuvert(false);\n      }}\n    &gt;\n      &lt;Box sx={{ width: 300 }}&gt;\n        {itemsPanier &amp;&amp;\n          itemsPanier.map((item) =&gt; {\n            return &lt;Fiche chapeau={item} dansPanier={true} /&gt;;\n          })}\n      &lt;/Box&gt;\n    &lt;/Drawer&gt;\n  );\n}\n</code></pre> fiche.component.tsx<pre><code>import { useContext } from 'react';\nimport { Card } from '@mui/material';\nimport { CardActions } from '@mui/material';\nimport { CardContent } from '@mui/material';\nimport { CardMedia } from '@mui/material';\nimport { Button } from '@mui/material';\nimport { Typography } from '@mui/material';\nimport { PanierContext } from '../contexts/panier.context';\nimport { IChapeau } from '../models/ichapeau.model';\n\ninterface IFiche {\n  chapeau: IChapeau;\n  dansPanier: boolean;\n}\n\nexport default function Fiche(props: IFiche) {\n  const { itemsPanier, setItemsPanier } = useContext(PanierContext);\n\n  const ajouterAuPanier = () =&gt; {\n    const nouveauPanier = [...itemsPanier, { ...props.chapeau, quantite: 1 }];\n    console.log(nouveauPanier);\n    setItemsPanier(nouveauPanier);\n  };\n\n  const retirerDuPanier = () =&gt; {\n    var i = 0;\n    console.log('retirer du panier : ', props.chapeau.id);\n    while (i &lt; itemsPanier.length) {\n      if (itemsPanier[i].id === props.chapeau.id) {\n        itemsPanier.splice(i, 1);\n      } else {\n        ++i;\n      }\n    }\n    const nouveauPanier = [...itemsPanier];\n    setItemsPanier(nouveauPanier);\n  };\n\n  return (\n    &lt;Card sx={{ width: 300, maxWidth: 300, height: 300, maxHeight: 300 }}&gt;\n      &lt;CardMedia\n        component=\"img\"\n        height=\"150\"\n        sx={{ objectFit: 'contain' }}\n        image={props.chapeau.photo}\n      /&gt;\n      &lt;CardContent&gt;\n        &lt;Typography gutterBottom variant=\"h6\" component=\"div\"&gt;\n          {props.chapeau.nom}\n        &lt;/Typography&gt;\n        &lt;Typography variant=\"body2\" color=\"text.secondary\"&gt;\n          {props.chapeau.prix}&amp;nbsp;$\n        &lt;/Typography&gt;\n      &lt;/CardContent&gt;\n      &lt;CardActions&gt;\n        {!props.dansPanier &amp;&amp; (\n          &lt;Button\n            size=\"small\"\n            color=\"primary\"\n            onClick={() =&gt; ajouterAuPanier()}\n          &gt;\n            Ajouter au panier\n          &lt;/Button&gt;\n        )}\n        {props.dansPanier &amp;&amp; (\n          &lt;Button\n            size=\"small\"\n            color=\"primary\"\n            onClick={() =&gt; retirerDuPanier()}\n          &gt;\n            Retirer du panier\n          &lt;/Button&gt;\n        )}\n      &lt;/CardActions&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre> <p>CodeSandbox</p> <p>D\u00e9mo - Chapeaux en folie </p>"},{"location":"react3/#se-connecter-a-un-api","title":"Se connecter \u00e0 un API","text":"<p>Il est pr\u00e9f\u00e9rable d\u2019utiliser la librairie Axios pour aller chercher vos donn\u00e9es de l\u2019API :</p> fetch_bieres.ts<pre><code>axios.get('https://bieres.profinfo.ca/api/bieres').then((response) =&gt; {\n  setListeBieres(response.data.bieres);\n});\n</code></pre> <p>Manuel</p> <p>Axios - Documentation </p>"},{"location":"react_mui/","title":"Styles : React et MUI","text":""},{"location":"react_mui/#styles-react-et-material-ui","title":"Styles : React et Material UI","text":"<p>Librairie de composantes pr\u00e9-stylis\u00e9es.  </p> <p>Pour l\u2019installer dans votre projet :  </p> console<pre><code>npm i @mui/material @emotion/react @emotion/styled\nnpm i @fontsource/roboto\nnpm install @mui/icons-material\n</code></pre> <p>Manuel</p> <p>Material UI - Installation </p>"},{"location":"react_mui/#utiliser-material-ui","title":"Utiliser Material UI","text":"Personnage.tsx<pre><code>import Card from '@mui/material/Card';\nimport CardMedia from '@mui/material/CardMedia';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { Grid } from '@mui/material';\n\ninterface IPersonnageProps {\n  nom: string;\n  photo: string;\n  adresse: string;\n}\n\nconst Personnage = (props: IPersonnageProps) =&gt; {\n  return (\n    &lt;Card sx={{ width: 400 }}&gt;\n      &lt;Grid container spacing={0} direction=\"column\" alignItems=\"center\"&gt;\n        &lt;CardMedia\n          image={props.photo}\n          sx={{ height: 150, width: 150, borderRadius: '50%' }}\n        /&gt;\n      &lt;/Grid&gt;\n      &lt;Box&gt;\n        &lt;Typography variant=\"subtitle1\"&gt;{props.nom}&lt;/Typography&gt;\n        &lt;Typography variant=\"subtitle1\"&gt;{props.adresse}&lt;/Typography&gt;\n      &lt;/Box&gt;\n    &lt;/Card&gt;\n  );\n};\n\nexport default Personnage;\n</code></pre> <p>CodeSandbox</p> <p>D\u00e9mo - Material UI </p>"},{"location":"react_mui/#themes-dans-material-ui","title":"Th\u00e8mes dans Material UI","text":"<p>La mani\u00e8re la plus efficace pour changer l'apparence de votre application avec Material UI est l'utilisation de th\u00e8mes.  </p> <p>Manuel</p> <p>Material UI - Theming </p> <p>La place id\u00e9ale pour ajouter un th\u00e8me \u00e0 votre application est <code>App.tsx</code> :  </p> app.tsx<pre><code>import Personnage from \"../Personnage\";\nimport type { IPersonnageData } from \"../../data/PersonnageData\";\nimport { PersonnageData } from \"../../data/PersonnageData\";\nimport \"./App.css\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { CssBaseline } from \"@mui/material\";\n\nfunction App() {\n  const theme = createTheme({\n    typography: {\n      fontFamily: [\"Cutive Mono\", \"monospace\"].join(\",\"),\n    },\n    palette: {\n      mode: \"light\",\n      primary: {\n        main: \"#c75000\",\n      },\n      secondary: {\n        main: \"#f50057\",\n      },\n      background: {\n        default: \"#2f1000\",\n        paper: \"#202027\",\n      },\n      text: {\n        primary: \"#EFECEC\",\n        secondary: \"#FFFFFF\",\n        disabled: \"rgba(70,38,38,0.5)\",\n      },\n    },\n    components: {\n      MuiCssBaseline: {\n        styleOverrides: `\n        @font-face {\n          font-family: 'Cutive Mono';\n          font-style: normal;\n          font-display: swap;\n          font-weight: 400;\n          }\n      `,\n      },\n    },\n  });\n\n  return (\n    &lt;&gt;\n      &lt;ThemeProvider theme={theme}&gt;\n        &lt;CssBaseline /&gt;\n        {PersonnageData.map((personnage: IPersonnageData) =&gt; {\n          return (\n            &lt;Personnage\n              nom={personnage.nom}\n              photo={personnage.photo}\n              adresse={personnage.adresse}\n            /&gt;\n          );\n        })}\n      &lt;/ThemeProvider&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Vous pouvez aussi assigner une apparence sp\u00e9cifiquement \u00e0 un type de composant comme suit :  </p> app.tsx<pre><code>components: {\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          backgroundColor: '#172325 ',\n          color: '#007AFF',\n          primary: '#FFFFFF',\n          ':hover': {\n            color: '#5C5757',\n          },\n        },\n      },\n    },\n  },\n</code></pre> <p>Manuel</p> <p>Material UI - Button - CSS </p>"},{"location":"react_tw/","title":"Styles : React - TailwindCSS","text":""},{"location":"react_tw/#styles-react-et-tailwind-css","title":"Styles : React et Tailwind CSS","text":""},{"location":"react_tw/#introduction-a-tailwindcss","title":"Introduction \u00e0 TailwindCSS","text":"<p>TailwindCSS est un framework CSS utilitaire qui permet de concevoir des interfaces utilisateur directement dans vos composants avec des classes pr\u00e9-d\u00e9finies. Contrairement au CSS traditionnel o\u00f9 vous devez d\u00e9finir manuellement vos styles dans des fichiers s\u00e9par\u00e9s, TailwindCSS vous permet d'appliquer des styles en utilisant des classes utilitaires dans votre HTML ou JSX.</p>"},{"location":"react_tw/#comparaison-entre-tailwindcss-et-le-css-traditionnel","title":"Comparaison entre TailwindCSS et le CSS traditionnel","text":"<ol> <li> <p>D\u00e9claration des styles :</p> </li> <li> <p>CSS traditionnel :</p> <ul> <li>Vous d\u00e9finissez les styles dans un fichier CSS externe puis vous les appliquez aux \u00e9l\u00e9ments HTML via des classes.  <pre><code>/* styles.css */\n.button {\n  background-color: #3490dc;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n}\n</code></pre></li> </ul> <pre><code>// React Component\n&lt;button className=\"button\"&gt;Click me&lt;/button&gt;\n</code></pre> </li> <li> <p>Avec TailwindCSS :</p> <ul> <li>Les styles sont appliqu\u00e9s directement dans le JSX avec des classes utilitaires.  <pre><code>&lt;button className=\"bg-blue-500 text-white py-2 px-4 rounded\"&gt;Click me&lt;/button&gt;\n</code></pre></li> </ul> </li> </ol> <p>Ici, au lieu d'utiliser une classe CSS d\u00e9finie ailleurs, Tailwind fournit des classes comme <code>bg-blue-500</code> pour la couleur de fond, <code>text-white</code> pour le texte blanc, <code>py-2</code> pour le padding vertical, etc.</p> <ol> <li> <p>Gestion des Responsives :</p> </li> <li> <p>CSS traditionnel :</p> <ul> <li>Les media queries sont utilis\u00e9es pour rendre le design responsive.  <pre><code>.button {\n  padding: 10px 20px;\n}\n@media (min-width: 768px) {\n  .button {\n    padding: 15px 30px;\n  }\n}\n</code></pre></li> </ul> </li> <li> <p>Avec TailwindCSS :</p> <ul> <li>Les classes Tailwind sont modulaires et g\u00e8rent le responsive via des pr\u00e9fixes comme <code>md:</code>, <code>lg:</code>.  <pre><code>&lt;button className=\"py-2 px-4 md:py-4 md:px-8\"&gt;Click me&lt;/button&gt;\n</code></pre></li> </ul> </li> <li> <p>Personnalisation des styles :</p> </li> <li> <p>CSS traditionnel :</p> <ul> <li>Vous avez la flexibilit\u00e9 compl\u00e8te de cr\u00e9er n'importe quel style que vous souhaitez dans un fichier CSS.</li> <li>Si vous avez un style sp\u00e9cifique non disponible dans Tailwind, vous pouvez personnaliser la configuration ou utiliser la directive <code>@apply</code> pour combiner des utilitaires.</li> </ul> </li> <li> <p>Avec TailwindCSS :</p> <ul> <li>Tailwind peut \u00eatre \u00e9tendu via le fichier de configuration <code>tailwind.config.js</code> pour personnaliser les couleurs, espacements, typographies, etc.  <pre><code>module.exports = {\n  theme: {\n    extend: {\n      colors: {\n        primary: '#ff6363',\n      },\n    },\n  },\n}\n</code></pre></li> </ul> </li> <li> <p>Avantages et Inconv\u00e9nients :</p> </li> <li> <p>CSS traditionnel :</p> <ul> <li>Avantages : Flexible, d\u00e9j\u00e0 bien \u00e9tabli.</li> <li>Inconv\u00e9nients : Peut devenir difficile \u00e0 maintenir avec de grands projets, duplication de code, comment nommer les classes, etc.</li> </ul> </li> <li> <p>TailwindCSS :</p> <ul> <li>Avantages : Rapide, utilisation directe dans le JSX, \u00e9limination des styles inutilis\u00e9s lors du build, facile \u00e0 personnaliser.</li> <li>Inconv\u00e9nients : Peut sembler verbeux au d\u00e9but, n\u00e9cessite d'apprendre les classes utilitaires.</li> </ul> </li> </ol>"},{"location":"react_tw/#installation-de-tailwindcss","title":"Installation de TailwindCSS","text":""},{"location":"react_tw/#installation-de-vite","title":"Installation de Vite","text":"<ol> <li>Situez vous dans le dossier o\u00f9 vous d\u00e9sirez cr\u00e9er l\u2019application (le dossier de l\u2019application sera automatiquement cr\u00e9\u00e9 \u00e0 la prochaine \u00e9tape)  </li> <li>Ex\u00e9cutez la commande de cr\u00e9ation d\u2019application : console<pre><code>npm create vite@latest my_app\n</code></pre></li> <li>Suivez les instructions et choisir React et TypeScript </li> <li>Une fois l\u2019application g\u00e9n\u00e9r\u00e9e, d\u00e9placez-vous dans le dossier cr\u00e9\u00e9 : console<pre><code>cd my_app\n</code></pre></li> <li>Ex\u00e9cutez l\u2019application en utilisant les commandes suivantes : console<pre><code>npm install\nnpm run dev\n</code></pre></li> </ol>"},{"location":"react_tw/#installation-de-tailwind-css","title":"Installation de Tailwind CSS","text":"<ol> <li>Installez Tailwind CSS en utilisant la commande suivante : console<pre><code>npm install tailwindcss @tailwindcss/vite\n</code></pre></li> <li>Configurer le plugin dans la configuration Vite     vite.config.ts<pre><code>import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport tailwindcss from \"@tailwindcss/vite\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(), tailwindcss()],\n});\n</code></pre></li> <li>Ajouter les imports de Tailwind CSS dans le fichier <code>index.css</code> : index.css<pre><code>@import 'tailwindcss';\n</code></pre></li> <li>D\u00e9marrez l'application en utilisant la commande suivante : console<pre><code>npm run dev\n</code></pre></li> <li>Tailwind CSS est maintenant install\u00e9 et pr\u00eat \u00e0 \u00eatre utilis\u00e9 dans votre application React.</li> </ol> <p>Manuel</p> <p>Documentation officielle Tailwind CSS</p> <p>Manuel</p> <p>Feuille de triche TailwindCSS</p>"},{"location":"react_tw/#extensions-vscode-recommandees-pour-tailwindcss","title":"Extensions VSCode recommand\u00e9es pour TailwindCSS","text":"Extension Description Lien Tailwind CSS IntelliSense Cette extension offre de l'auto-compl\u00e9tion pour les classes Tailwind, ainsi que la documentation en survolant les classes dans votre code. Lien vers l'extension PostCSS Language Support N\u00e9cessaire si vous utilisez Tailwind avec PostCSS, cette extension vous aidera \u00e0 g\u00e9rer vos fichiers CSS de mani\u00e8re efficace. Lien vers l'extension Headwind Cet outil trie automatiquement vos classes Tailwind dans un ordre logique. Cela rend votre code plus lisible. Lien vers l'extension Prettier - Code formatter Utilisez cette extension pour vous assurer que votre code React, y compris les classes Tailwind, est bien format\u00e9. Lien vers l'extension"},{"location":"react_tw/#personnages-avec-tailwindcss","title":"Personnages avec TailwindCSS","text":"Personnage.tsx<pre><code>interface IPersonnageProps {\n  nom: string;\n  photo: string;\n  adresse: string;\n}\n\nconst Personnage = (props: IPersonnageProps) =&gt; {\n  return (\n    &lt;div className=\"max-w-sm w-72 mx-auto flex flex-col text-center items-center bg-white text-black p-5 border border-gray-300 rounded shadow-md\"&gt;\n      &lt;div className=\"text-center mb-5\"&gt;\n        &lt;img className=\"w-36 h-36 rounded-full\" src={props.photo} /&gt;\n      &lt;/div&gt;\n      &lt;div className=\"mb-5\"&gt;\n        &lt;span className=\"italic\"&gt;{props.nom}&lt;/span&gt;\n        &lt;div className=\"italic\"&gt;{props.adresse}&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Personnage;\n</code></pre> <p>CodeSandbox</p> <p>D\u00e9mo - TailwindCSS </p>"},{"location":"regles_react/","title":"R\u00e8gles de R\u00e9act","text":""},{"location":"regles_react/#regles-de-react","title":"R\u00e8gles de React","text":""},{"location":"regles_react/#introduction","title":"Introduction","text":"<p>Les r\u00e8gles de React sont des principes essentiels pour \u00e9crire du code idiomatique en React. Suivre ces r\u00e8gles aide \u00e0 cr\u00e9er des applications bien organis\u00e9es, s\u00fbres et composables.</p>"},{"location":"regles_react/#composants-et-hooks-doivent-etre-purs","title":"Composants et Hooks doivent \u00eatre purs","text":""},{"location":"regles_react/#1-les-composants-doivent-etre-idempotents","title":"1. Les composants doivent \u00eatre idempotents","text":"<p>Les composants React doivent toujours renvoyer la m\u00eame sortie pour les m\u00eames entr\u00e9es (props, state, context).</p>"},{"location":"regles_react/#2-les-effets-secondaires-en-dehors-du-rendu","title":"2. Les effets secondaires en dehors du rendu","text":"<p>Les effets secondaires ne doivent pas \u00eatre ex\u00e9cut\u00e9s dans la fonction de rendu car React peut rendre les composants plusieurs fois.</p>"},{"location":"regles_react/#3-props-et-state-immuables","title":"3. Props et state immuables","text":"<p>Les props et le state d'un composant sont des instantan\u00e9s immuables. Ne les modifiez jamais directement.</p>"},{"location":"regles_react/#4-valeurs-et-arguments-des-hooks-immuables","title":"4. Valeurs et arguments des hooks immuables","text":"<p>Une fois les valeurs pass\u00e9es \u00e0 un hook, elles ne doivent pas \u00eatre modifi\u00e9es. Comme les props, elles deviennent immuables.</p>"},{"location":"regles_react/#5-valeurs-immuables-apres-le-passage-au-jsx","title":"5. Valeurs immuables apr\u00e8s le passage au JSX","text":"<p>Ne modifiez pas les valeurs apr\u00e8s leur utilisation dans le JSX. Effectuez les mutations avant de cr\u00e9er le JSX.</p>"},{"location":"regles_react/#appels-des-composants-et-hooks-par-react","title":"Appels des composants et hooks par React","text":""},{"location":"regles_react/#1-ne-jamais-appeler-directement-les-fonctions-de-composants","title":"1. Ne jamais appeler directement les fonctions de composants","text":"<p>Les composants doivent \u00eatre utilis\u00e9s uniquement dans le JSX, pas appel\u00e9s comme des fonctions r\u00e9guli\u00e8res.</p>"},{"location":"regles_react/#2-ne-jamais-passer-des-hooks-comme-des-valeurs-regulieres","title":"2. Ne jamais passer des hooks comme des valeurs r\u00e9guli\u00e8res","text":"<p>Les hooks doivent \u00eatre appel\u00e9s uniquement \u00e0 l'int\u00e9rieur des composants, et non pass\u00e9s comme des valeurs normales.</p>"},{"location":"regles_react/#regles-des-hooks","title":"R\u00e8gles des hooks","text":""},{"location":"regles_react/#1-appeler-les-hooks-au-niveau-superieur-uniquement","title":"1. Appeler les hooks au niveau sup\u00e9rieur uniquement","text":"<p>Ne pas appeler les Hooks \u00e0 l'int\u00e9rieur de boucles, de conditions ou de fonctions imbriqu\u00e9es. Utilisez-les toujours au niveau sup\u00e9rieur de votre fonction React.</p>"},{"location":"regles_react/#2-appeler-les-hooks-uniquement-a-partir-des-fonctions-react","title":"2. Appeler les hooks uniquement \u00e0 partir des fonctions React","text":"<p>Ne pas appeler les hooks \u00e0 partir de fonctions JavaScript r\u00e9guli\u00e8res.</p>"},{"location":"regles_react/#conclusion","title":"Conclusion","text":"<p>Suivre les r\u00e8gles de React aide \u00e0 maintenir des applications pr\u00e9visibles, d\u00e9boguables et optimis\u00e9es. Utilisez le mode strict de React et le plugin ESLint pour v\u00e9rifier automatiquement le respect de ces r\u00e8gles.</p> <p>Manuel</p> <p>Rules of React</p>"},{"location":"retroaction/","title":"R\u00e9troaction","text":""},{"location":"retroaction/#retroaction-dans-le-code","title":"R\u00e9troaction dans le code","text":"<p>Le code source de votre projet sera annot\u00e9 avec des commentaires pour vous donner des pistes d'am\u00e9lioration. Pour ce faire, un plugin nomm\u00e9 <code>out-of-code insights</code> sera utilis\u00e9. Ce plugin permet d'ajouter des commentaires sans modifier le code source. </p>"},{"location":"retroaction/#installation-du-plugin","title":"Installation du plugin","text":"<p>Installez le plugin en allant sur le march\u00e9 de Visual Studio Code et en cliquant sur le bouton <code>Install</code>.</p>"},{"location":"retroaction/#utilisation","title":"Utilisation","text":"<ol> <li> <p>Ouvrir le panneau <code>Out-of-code insights</code> en cliquant sur l'ic\u00f4ne de l'extension dans la barre lat\u00e9rale.</p> </li> <li> <p>Toutes les annotations sont dans le panneau.</p> </li> <li> <p>Vous pouvez voir chaque annotation dans le code, en utilisant le plugin <code>code lens</code> de Visual Studio Code.</p> </li> </ol>"},{"location":"structure_projet_react/","title":"Structure typique d'un projet React","text":""},{"location":"structure_projet_react/#structure-typique-dun-projet-react","title":"Structure typique d'un projet React","text":""},{"location":"structure_projet_react/#structure","title":"Structure","text":"<pre><code>.\n\u251c\u2500\u2500 eslint.config.js\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 assets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 components\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 App\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 App.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 App.tsx\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 index.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Personnage\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 index.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Personnage.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 Personnage.tsx\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.tsx\n\u251c\u2500\u2500 tsconfig.app.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 tsconfig.node.json\n\u2514\u2500\u2500 vite.config.ts\n</code></pre>"},{"location":"structure_projet_react/#les-dossiers","title":"Les dossiers","text":"Dossier Utilisation src Tout le code de l'application React src/assets Les images, vid\u00e9os et autres m\u00e9dia utilis\u00e9s dans l'application src/components Les composantes de React"},{"location":"structure_projet_react/#la-racine-indexhtml","title":"La racine - Index.html","text":"<p>Index.html est le point d'entr\u00e9e du site Web.  </p> index.html<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;personnage_base&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script type=\"module\" src=\"/src/main.tsx\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"structure_projet_react/#le-contenant-principal-maintsx","title":"Le contenant principal  - main.tsx","text":"<p>main.tsx contient l'application React.  </p> /src/main.tsx<pre><code>import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './components/App';\n\ncreateRoot(document.getElementById('root')!).render(\n  &lt;StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/StrictMode&gt;,\n);\n</code></pre>"},{"location":"structure_projet_react/#la-composante-principale-apptsx","title":"La composante principale - App.tsx","text":"<p>App.tsx est l'application React.  C'est ici que l'on modifie le code pour faire notre application.  </p> /src/components/App/App.tsx<pre><code>import './App.css';\nimport Personnage from '../Personnage';\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Personnage /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Dans la structure utilis\u00e9e pour le cours, chaque composante est dans son propre dossier.  Pour faciliter l'importation des composantes, un fichier <code>index.ts</code> est cr\u00e9\u00e9, pour exporter la composante.  </p> /src/components/App/index.ts<pre><code>export * from './App';\nexport { default } from './App';\n</code></pre> <p>Le CSS sp\u00e9cifique \u00e0 une composante peut r\u00e9sider dans le dossier de la composante :  </p> /src/components/App/App.css<pre><code>#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n</code></pre>"},{"location":"structure_projet_react/#une-composante-specifique-a-votre-projet","title":"Une composante sp\u00e9cifique \u00e0 votre projet","text":"<p>Personnage.tsx est une composante sp\u00e9cifique \u00e0 votre application React. </p> /src/components/Personnage/Personnage.tsx<pre><code>import './Personnage.css';\n\nconst Personnage = () =&gt; {\n  const nomDuPersonnage = 'Fluffy McChat';\n  const photoDuPersonnage = 'https://placecats.com/300/300';\n  const adresseDuPersonnage = '123 Ave Des F\u00e9lins';\n\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;div className=\"photo\"&gt;\n        &lt;img src={photoDuPersonnage} /&gt;\n      &lt;/div&gt;\n      &lt;div className=\"info\"&gt;\n        &lt;p&gt;{nomDuPersonnage}&lt;/p&gt;\n        &lt;p className=\"addresse\"&gt;{adresseDuPersonnage}&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Personnage;\n</code></pre> /src/components/Personnage/index.ts<pre><code>export * from './Personnage';\nexport { default } from './Personnage';\n</code></pre> <p>Le CSS sp\u00e9cifique \u00e0 une composante peut r\u00e9sider dans le dossier de la composante :  </p> /src/components/Personnage/Personnage.css<pre><code>.container {\n  max-width: 600px;\n  width: 400px;\n  margin: 0 auto;\n  background-color: #fff;\n  color: #000;\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.photo {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.photo img {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n}\n\n.info {\n  margin-bottom: 20px;\n}\n\n.address {\n  font-style: italic;\n}\n</code></pre>"},{"location":"tester_api/","title":"Tests unitaires","text":""},{"location":"tester_api/#tester-automatiquement-un-api","title":"Tester automatiquement un API","text":""},{"location":"tester_api/#introduction","title":"Introduction","text":"<p>Dans ce tutoriel, nous allons voir comment tester automatiquement un API. Pour cela, nous allons utiliser les modules <code>VITest</code> et <code>supertest</code>. Ce sont les deux technologies utilis\u00e9es dans le mod\u00e8le utilis\u00e9 dans le cours.</p>"},{"location":"tester_api/#modules","title":"Modules","text":""},{"location":"tester_api/#vitest","title":"VITest","text":"<p>VITest est un cadriciel de test pour JavaScript. Il est utilis\u00e9 pour tester le code JavaScript. Il est facile \u00e0 mettre en place et \u00e0 utiliser. Il est \u00e9galement tr\u00e8s flexible. Il est utilis\u00e9 pour tester le code JavaScript dans les applications Node.js.</p>"},{"location":"tester_api/#supertest","title":"Supertest","text":"<p>Supertest est un module Node.js qui permet de tester les API REST. Il est utilis\u00e9 pour tester les API REST en Node.js. Il est facile \u00e0 mettre en place et \u00e0 utiliser. Il est \u00e9galement tr\u00e8s flexible. </p>"},{"location":"tester_api/#concepts-de-base","title":"Concepts de base","text":""},{"location":"tester_api/#les-assertions","title":"Les assertions","text":"<p>Les assertions sont des instructions qui v\u00e9rifient si une condition est vraie ou fausse. Si la condition est vraie, le test passe. Si la condition est fausse, le test \u00e9choue. Les assertions sont utilis\u00e9es pour v\u00e9rifier si le code fonctionne correctement.</p> <p>Exemple d'assertion : </p> <pre><code>expect(1 + 1).toBe(2);\n</code></pre>"},{"location":"tester_api/#anatomie-dun-test","title":"Anatomie d'un test","text":"<p>Un test est une fonction qui v\u00e9rifie si une partie du code fonctionne correctement. Un test est compos\u00e9 de trois parties :</p> <ol> <li> <p>La mise en place : c'est la partie du test o\u00f9 vous configurez l'environnement de test. Vous cr\u00e9ez les objets n\u00e9cessaires pour ex\u00e9cuter le test.</p> </li> <li> <p>L'ex\u00e9cution : c'est la partie du test o\u00f9 vous ex\u00e9cutez le code que vous voulez tester.</p> </li> <li> <p>L'assertion : c'est la partie du test o\u00f9 vous v\u00e9rifiez si le code a fonctionn\u00e9 correctement. Vous v\u00e9rifiez si le r\u00e9sultat est celui attendu.</p> </li> </ol> <p>Exemple de test :</p> <pre><code>it('doit retourner 200 OK', async () =&gt; {\n  const response = await agent.get('/api/reservations');\n  expect(response.status).toBe(200);\n});\n</code></pre> <p>Dans cet exemple, le test v\u00e9rifie si l'API <code>/api/reservations</code> retourne un code 200 OK.</p>"},{"location":"tester_api/#exemple-complet-de-test","title":"Exemple complet de test","text":"<p>Voici un exemple complet de test d'une API REST en utilisant VITest et Supertest :</p> tests/reservations.test.ts<pre><code>import insertUrlParams from 'inserturlparams';\nimport { customDeepCompare } from 'jet-validators/utils';\n\nimport ReservationRepo from '@src/repos/ReservationRepo';\nimport Reservation from '@src/models/Reservation';\nimport { RESERVATION_NOT_FOUND_ERR } from '@src/services/ReservationService';\n\nimport HttpStatusCodes from '@src/common/constants/HttpStatusCodes';\nimport { ValidationError } from '@src/common/util/route-errors';\n\nimport Paths from './common/Paths';\nimport { parseValidationErr, TRes } from './common/util';\nimport { agent } from './support/setup';\nimport { IReservation, TypeChambre } from '@src/models/Reservation';\n\n/******************************************************************************\n                               Constants\n******************************************************************************/\n\n// Donn\u00e9es bidon pour les r\u00e9servations (simulacre de GET)\nconst DB_RESERVATIONS = [\n  Reservation.new({\n    nom: 'Jim Halpert',\n    courriel: 'jimh@dundermifflin.com',\n    dateDebut: new Date('2026-01-01'),\n    dateFin: new Date('2026-01-04'),\n    typeChambre: TypeChambre.Standard,\n    prixParNuit: 123,\n  }),\n  Reservation.new({\n    nom: 'Michael Scott',\n    courriel: 'michaels@dundermifflin.com',\n    dateDebut: new Date('2026-02-12'),\n    dateFin: new Date('2026-03-16'),\n    typeChambre: TypeChambre.Deluxe,\n    prixParNuit: 150,\n  }),\n  Reservation.new({\n    nom: 'Dwight Schrute',\n    courriel: 'dwights@dundermifflin.com',\n    dateDebut: new Date('2026-02-12'),\n    dateFin: new Date('2026-03-12'),\n    typeChambre: TypeChambre.Deluxe,\n    prixParNuit: 150,\n  }),\n] as const;\n\n// Don't compare 'id' and 'created' cause those are set dynamically by the\n// database\nconst compareUserArrays = customDeepCompare({\n  onlyCompareProps: ['nom', 'courriel', 'typeChambre', 'prixParNuit'],\n});\n\n/******************************************************************************\n                                 Tests\n  IMPORTANT: Following TypeScript best practices, we test all scenarios that \n  can be triggered by a user under normal circumstances. Not all theoretically\n  scenarios (i.e. a failed database connection). \n******************************************************************************/\n\ndescribe('reservationRouter', () =&gt; {\n  let dbReservations: IReservation[] = [];\n\n  // S'ex\u00e9cute avant chaque test\n  beforeEach(async () =&gt; {\n    await ReservationRepo.deleteAllReservations();\n    dbReservations = await ReservationRepo.insertMult(DB_RESERVATIONS);\n  });\n\n  // Extraire toutes les r\u00e9servations\n  describe(`'GET:${Paths.Reservations.Get}'`, () =&gt; {\n    // Succ\u00e8s\n    it(\n      'doit retourner un JSON avec toutes les r\u00e9servations et un code de ' +\n        `of '${HttpStatusCodes.OK}' si r\u00e9ussi.`,\n      async () =&gt; {\n        const res: TRes&lt;{ reservations: IReservation[] }&gt; = await agent.get(\n          Paths.Reservations.Get,\n        );\n        expect(res.status).toBe(HttpStatusCodes.OK);\n        expect(\n          compareUserArrays(res.body.reservations, DB_RESERVATIONS),\n        ).toBeTruthy();\n      },\n    );\n  });\n\n  // Tester l'ajout d'une r\u00e9servation\n  describe(`'POST:${Paths.Reservations.Add}'`, () =&gt; {\n    // Ajout r\u00e9ussi\n    it(\n      `doit retourner le code '${HttpStatusCodes.CREATED}' si la ` +\n        'transaction est r\u00e9ussie',\n      async () =&gt; {\n        const reservation = Reservation.new({\n            nom: 'Toby',\n            courriel: 'hr@dundermifflin.com',\n            dateDebut: new Date('2026-01-01'),\n            dateFin: new Date('2026-01-04'),\n            typeChambre: TypeChambre.Standard,\n            prixParNuit: 110,\n          }),\n          res = await agent.post(Paths.Reservations.Add).send({ reservation });\n        expect(res.status).toBe(HttpStatusCodes.CREATED);\n      },\n    );\n\n    // Param\u00e8tre manquant\n    it(\n      'doit retourner un JSON avec les erreurs et un code de ' +\n        `'${HttpStatusCodes.BAD_REQUEST}' si un param\u00e8tre est ` +\n        'manquant.',\n      async () =&gt; {\n        const res: TRes = await agent\n          .post(Paths.Reservations.Add)\n          .send({ reservation: null });\n        expect(res.status).toBe(HttpStatusCodes.BAD_REQUEST);\n        const errorObj = parseValidationErr(res.body.error);\n        expect(errorObj.message).toBe(ValidationError.MESSAGE);\n        expect(errorObj.errors[0].prop).toBe('reservation');\n      },\n    );\n  });\n\n  // Mise \u00e0 jour d'une r\u00e9servation\n  describe(`'PUT:${Paths.Reservations.Update}'`, () =&gt; {\n    // Succ\u00e8s\n    it(\n      `doit retourner un code de '${HttpStatusCodes.OK}' si la mise \u00e0 jour ` +\n        'est r\u00e9ussie.',\n      async () =&gt; {\n        const reservation = DB_RESERVATIONS[0];\n        reservation.nom = 'Johnny B. Good';\n        const res = await agent\n          .put(Paths.Reservations.Update)\n          .send({ reservation });\n        expect(res.status).toBe(HttpStatusCodes.OK);\n      },\n    );\n\n    // R\u00e9servation non trouv\u00e9e\n    it(\n      'doit retourner un JSON avec erreur  ' +\n        `'${RESERVATION_NOT_FOUND_ERR}' et un code de ` +\n        `'${HttpStatusCodes.NOT_FOUND}' si l'id n'est pas trouv\u00e9.`,\n      async () =&gt; {\n        const reservation = Reservation.new({\n            id: 4,\n            nom: 'a',\n            courriel: 'a@a.com',\n          }),\n          res: TRes = await agent\n            .put(Paths.Reservations.Update)\n            .send({ reservation });\n        expect(res.status).toBe(HttpStatusCodes.NOT_FOUND);\n        expect(res.body.error).toBe(RESERVATION_NOT_FOUND_ERR);\n      },\n    );\n  });\n\n  // Supprimer la r\u00e9servation\n  describe(`'DELETE:${Paths.Reservations.Delete}'`, () =&gt; {\n    const getPath = (id: number) =&gt;\n      insertUrlParams(Paths.Reservations.Delete, { id });\n\n    // Succ\u00e8s\n    it(\n      `doit retourner un code de '${HttpStatusCodes.OK}' si la ` +\n        'suppression est r\u00e9ussie.',\n      async () =&gt; {\n        const id = dbReservations[0].id,\n          res = await agent.delete(getPath(id));\n        expect(res.status).toBe(HttpStatusCodes.OK);\n      },\n    );\n\n    // R\u00e9servation non trouv\u00e9e\n    it(\n      'doit retourner un JSON avec erreur ' +\n        `'${RESERVATION_NOT_FOUND_ERR}' et un code de  ` +\n        `'${HttpStatusCodes.NOT_FOUND}' si la r\u00e9servation est introuvable.`,\n      async () =&gt; {\n        const res: TRes = await agent.delete(getPath(-1));\n        expect(res.status).toBe(HttpStatusCodes.NOT_FOUND);\n        expect(res.body.error).toBe(RESERVATION_NOT_FOUND_ERR);\n      },\n    );\n  });\n});\n</code></pre>"},{"location":"typescript_2/","title":"TypeScript 2","text":""},{"location":"typescript_2/#typescript-2","title":"TypeScript 2","text":""},{"location":"typescript_2/#union-de-types","title":"Union de types","text":"<p>L\u2019union de type permet d\u2019indiquer \u00e0 TypeScript que nous acceptons deux types de donn\u00e9es pour une variable ou un argument de fonction. Par exemple :  </p> union.ts<pre><code>function devineMonAge(age: number | string) {\n    console.log(`Ton age est ${age}`);\n}\n\ndevineMonAge(40);\ndevineMonAge('Trente huit');\n</code></pre> <p>Manuel</p> <p>Union dans TypeScript </p>"},{"location":"typescript_2/#retrecir-le-type","title":"R\u00e9tr\u00e9cir le type","text":"<p>Quand nous acceptons plus d\u2019un type pour un argument, il est parfois n\u00e9cessaire de bien d\u00e9terminer le type dans le corps de la fonction :  </p> <p>Par exemple :  </p> retrecir.ts<pre><code>function doubler(item: number | string) {\n    if (typeof item === 'string') {\n        return `${item} - ${item}`;\n    }   \n    return item * 2;\n}\n\nconsole.log(doubler('Allo'));\nconsole.log(doubler(12));\n</code></pre> <p>Manuel</p> <p>R\u00e9tr\u00e9cir le type - Manuel TypeScript </p>"},{"location":"typescript_2/#union-de-type-pour-creer-un-alias","title":"Union de type pour cr\u00e9er un alias","text":"alias.ts<pre><code>type Utilisateur = {\n    nom: string;\n    age: number;\n    actif: boolean;\n};\n\ntype Administrateur = {\n    nom: string;\n    niveau: number;\n};\n\ntype Employe = Utilisateur | Administrateur;\n</code></pre> <p>Manuel</p> <p>Alias de types - Manuel TypeScript </p>"},{"location":"typescript_2/#retrecir-le-type-autre-exemple","title":"R\u00e9tr\u00e9cir le type \u2013 autre exemple","text":"retrecir2.ts<pre><code>const roy: Administrateur = {\n    nom: 'Roy',\n    niveau: 99,\n};\n\nconst richmond: Utilisateur = {\n    nom: 'Richmond',\n    age: 40,\n    actif: true,\n};\n\n/**\n * Dire bonjour \u00e0 un employ\u00e9\n * \n * @param {Employe} employe - L'employ\u00e9 \u00e0 qui on dit bonjour \n * \n */\nfunction direBonjour(employe: Employe) {\n    if ('niveau' in employe) {\n        console.log(\n        `Bonjour Adminisatrateur ${employe.nom} de niveau ${employe.niveau}`\n        );\n        return;\n    }\n    console.log(`Bonjour Utilisateur ${employe.nom} ag\u00e9 de ${employe.age} ans`);\n}\n\ndireBonjour(roy);\ndireBonjour(richmond);\n</code></pre>"},{"location":"typescript_2/#union-de-type-pour-restreindre-les-valeurs","title":"Union de type \u2013 pour restreindre les valeurs","text":"chat.ts<pre><code>type Chat {\n    nom: string,\n    age: number,\n    race: 'Ragdoll' | 'Siamois' | 'Sphynx',\n};\n\nconst fanta : Chat = {\n    nom: 'Fanta',\n    age: 8,\n    race: 'Ragdoll',\n};\n\n/*\n * La race pour Furguie n'est pas accept\u00e9e pour le type Chat\n */\nconst furguie : Chat = {\n    nom: 'Furguie',\n    age: 3,\n    race: 'colorpoint',\n};\n</code></pre> Erreur lorsque la mauvaise valeur est assign\u00e9e."},{"location":"typescript_2/#enum","title":"Enum","text":"<p>Un enum nous permet de d\u00e9finir un ensemble de constantes nomm\u00e9es.  </p> race.ts<pre><code>enum Race {\n    Ragdoll,\n    Siamois,\n    Sphynx,\n}\n\ntype Chat = {\n    nom: string;\n    age: number;\n    race: Race;\n};\n\nconst fanta: Chat = {\n    nom: 'Fanta',\n    age: 8,\n    race: Race.Ragdoll,\n};\n</code></pre> <p>Manuel</p> <p>Enums - Manuel TypeScript </p>"},{"location":"typescript_2/#interface","title":"Interface","text":"<p>Une interface est une fa\u00e7on diff\u00e9rente en TypeScript pour d\u00e9crire la forme d\u2019un objet :  </p> race.ts<pre><code>enum Race {\n    Ragdoll,\n    Siamois,\n    Sphynx,\n}\n\ninterface Chat {\n    nom: string;\n    age: number;\n    race: Race;\n};\n\nconst fanta: Chat = {\n    nom: 'Fanta',\n    age: 8,\n    race: Race.Ragdoll,\n};\n</code></pre> <p>Manuel</p> <p>Interfaces - Manuel TypeScript </p>"},{"location":"typescript_2/#generics","title":"Generics","text":"<p>Comme dans C#, TypeScript support les generics :  </p> generics.ts<pre><code>const listeDeChats : Array&lt;Chat&gt; = [];\n</code></pre> <p>Manuel</p> <p>Generics - Manuel TypeScript </p>"}]}